!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.apgl=e():t.apgl=e()}(this,(()=>(()=>{"use strict";var t={m:{},d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},u:t=>t+".autumnplot-gl.js"};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),t.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href;var e={};t.r(e),t.d(e,{Barbs:()=>q,ColorMap:()=>z,Contour:()=>F,ContourFill:()=>W,Hodographs:()=>lt,MultiPlotLayer:()=>ft,PlateCarreeGrid:()=>vt,PlotComponent:()=>y,PlotLayer:()=>st,RawScalarField:()=>gt,makeColorBar:()=>H});const n=Symbol("Comlink.proxy"),r=Symbol("Comlink.endpoint"),o=Symbol("Comlink.releaseProxy"),a=Symbol("Comlink.thrown"),i=t=>"object"==typeof t&&null!==t||"function"==typeof t,l=new Map([["proxy",{canHandle:t=>i(t)&&t[n],serialize(t){const{port1:e,port2:n}=new MessageChannel;return c(t,e),[n,[n]]},deserialize:t=>(t.start(),s(t))}],["throw",{canHandle:t=>i(t)&&a in t,serialize({value:t}){let e;return e=t instanceof Error?{isError:!0,value:{message:t.message,name:t.name,stack:t.stack}}:{isError:!1,value:t},[e,[]]},deserialize(t){if(t.isError)throw Object.assign(new Error(t.value.message),t.value);throw t.value}}]]);function c(t,e=self){e.addEventListener("message",(function r(o){if(!o||!o.data)return;const{id:i,type:l,path:s}=Object.assign({path:[]},o.data),f=(o.data.argumentList||[]).map(m);let h;try{const e=s.slice(0,-1).reduce(((t,e)=>t[e]),t),r=s.reduce(((t,e)=>t[e]),t);switch(l){case"GET":h=r;break;case"SET":e[s.slice(-1)[0]]=m(o.data.value),h=!0;break;case"APPLY":h=r.apply(e,f);break;case"CONSTRUCT":h=function(t){return Object.assign(t,{[n]:!0})}(new r(...f));break;case"ENDPOINT":{const{port1:e,port2:n}=new MessageChannel;c(t,n),h=function(t,e){return _.set(t,e),t}(e,[e])}break;case"RELEASE":h=void 0;break;default:return}}catch(t){h={value:t,[a]:0}}Promise.resolve(h).catch((t=>({value:t,[a]:0}))).then((t=>{const[n,o]=d(t);e.postMessage(Object.assign(Object.assign({},n),{id:i}),o),"RELEASE"===l&&(e.removeEventListener("message",r),u(e))}))})),e.start&&e.start()}function u(t){(function(t){return"MessagePort"===t.constructor.name})(t)&&t.close()}function s(t,e){return h(t,[],e)}function f(t){if(t)throw new Error("Proxy has been released and is not useable")}function h(t,e=[],n=function(){}){let a=!1;const i=new Proxy(n,{get(n,r){if(f(a),r===o)return()=>v(t,{type:"RELEASE",path:e.map((t=>t.toString()))}).then((()=>{u(t),a=!0}));if("then"===r){if(0===e.length)return{then:()=>i};const n=v(t,{type:"GET",path:e.map((t=>t.toString()))}).then(m);return n.then.bind(n)}return h(t,[...e,r])},set(n,r,o){f(a);const[i,l]=d(o);return v(t,{type:"SET",path:[...e,r].map((t=>t.toString())),value:i},l).then(m)},apply(n,o,i){f(a);const l=e[e.length-1];if(l===r)return v(t,{type:"ENDPOINT"}).then(m);if("bind"===l)return h(t,e.slice(0,-1));const[c,u]=p(i);return v(t,{type:"APPLY",path:e.map((t=>t.toString())),argumentList:c},u).then(m)},construct(n,r){f(a);const[o,i]=p(r);return v(t,{type:"CONSTRUCT",path:e.map((t=>t.toString())),argumentList:o},i).then(m)}});return i}function p(t){const e=t.map(d);return[e.map((t=>t[0])),(n=e.map((t=>t[1])),Array.prototype.concat.apply([],n))];var n}const _=new WeakMap;function d(t){for(const[e,n]of l)if(n.canHandle(t)){const[r,o]=n.serialize(t);return[{type:"HANDLER",name:e,value:r},o]}return[{type:"RAW",value:t},_.get(t)||[]]}function m(t){switch(t.type){case"HANDLER":return l.get(t.name).deserialize(t.value);case"RAW":return t.value}}function v(t,e,n){return new Promise((r=>{const o=new Array(4).fill(0).map((()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16))).join("-");t.addEventListener("message",(function e(n){n.data&&n.data.id&&n.data.id===o&&(t.removeEventListener("message",e),r(n.data))})),t.start&&t.start(),t.postMessage(Object.assign({id:o},e),n)}))}var g=s(new Worker(new URL(t.p+t.u(110),t.b))),y=function(){},b=function(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(c){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){i.label=l[1];break}if(6===l[0]&&i.label<o[1]){i.label=o[1],o=l;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(l);break}o[2]&&i.ops.pop(),i.trys.pop();continue}l=e.call(t,i)}catch(t){l=[6,t],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,c])}}},x=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i},w=function(t,e){e=void 0===e?"float":e;var n=t.match(/#([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?/i);if(null===n)throw"Got '".concat(t,"' in hex2rgba, which does not look like a hex color");var r=n.slice(1).filter((function(t){return void 0!==t})).map((function(t){return parseInt(t,16)}));return"float"==e&&(r=r.map((function(t){return t/255}))),void 0===r[3]?[r[0],r[1],r[2],1]:[r[0],r[1],r[2],r[3]]},E=function(t,e){var n=x(w(t,e),4),r=n[0],o=n[1],a=n[2];return n[3],[r,o,a]},T=function(t,e){var n=x(t,3);return function(t,e){var n=t;return"float"==(e=void 0===e?"float":e)&&(n=n.map((function(t){return Math.round(255*t)}))),"#"+n.map((function(t){return t.toString(16).padStart(2,"0").toUpperCase()})).join("")}([n[0],n[1],n[2],0],e).slice(0,-2)},A=function(t){var e,n=x(t,3),r=n[0],o=n[1],a=n[2],i=Math.max(r,o,a),l=i-Math.min(r,o,a);return 0==l?e=0:i==r?e=(o-a)/l*60%6:i==o?e=60*((a-r)/l+2):i==a&&(e=60*((r-o)/l+4)),[e,0==i?0:l/i,i]},S=function(t){var e,n,r,o=x(t,3),a=o[0],i=o[1],l=o[2],c=l*i,u=c*(1-Math.abs(a/60%2-1)),s=l-c;return 0<=a&&a<60?(e=c,n=u,r=0):60<=a&&a<120?(e=u,n=c,r=0):120<=a&&a<180?(e=0,n=c,r=u):180<=a&&a<240?(e=0,n=u,r=c):240<=a&&a<300?(e=u,n=0,r=c):300<=a&&a<360&&(e=c,n=0,r=u),[e+s,n+s,r+s]};function R(t,e,n){for(var r=1,o=n;t%o!=0||e%o!=0;)r+=1,o/=2;return r}function P(){var t,e,n,r=[];for(t=0;t<arguments.length;t++)r[t]=arguments[t];return b(this,(function(t){switch(t.label){case 0:e=r.map((function(t){return t[Symbol.iterator]()})),t.label=1;case 1:return(n=e.map((function(t){return t.next()}))).some((function(t){return t.done}))?[3,3]:[4,n.map((function(t){return t.value}))];case 2:return t.sent(),[3,1];case 3:return[2]}}))}var M,I=function(){function t(t,e,n,r){var o={Float32Array:t.FLOAT,Uint8Array:t.UNSIGNED_BYTE};this.gl=t,this.n_coords_per_vert=n,this.dtype=o[e.constructor.name],this.n_verts=e.length/n,this.draw_mode=r;var a=t.createBuffer();if(null===a)throw"Could not create WebGL buffer";this.buffer=a,t.bindBuffer(t.ARRAY_BUFFER,this.buffer),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)}return t.prototype.bindToProgram=function(t){this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.buffer),this.gl.enableVertexAttribArray(t),this.gl.vertexAttribPointer(t,this.n_coords_per_vert,this.dtype,!1,0,0)},t}(),C=function(){function t(t,e){this.gl=t;var n=t.createTexture();if(null===n)throw"Could not create WebGL texture";this.texture=n,this.tex_num=null,this.setImageData(e);var r=void 0===e.mag_filter?t.LINEAR:e.mag_filter;t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,r)}return t.prototype.setImageData=function(t){var e=this.gl;e.bindTexture(e.TEXTURE_2D,this.texture),void 0!==t.width&&void 0!==t.height?e.texImage2D(e.TEXTURE_2D,0,t.format,t.width,t.height,0,t.format,t.type,t.image):e.texImage2D(e.TEXTURE_2D,0,t.format,t.format,t.type,t.image)},t.prototype.bindToProgram=function(t,e){this.activate(e),this.gl.uniform1i(t,e)},t.prototype.activate=function(t){this.tex_num=t,this.gl.activeTexture(this.gl.TEXTURE0+this.tex_num),this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture)},t.prototype.deactivate=function(){null!==this.tex_num&&(this.gl.activeTexture(this.gl.TEXTURE0+this.tex_num),this.gl.bindTexture(this.gl.TEXTURE_2D,null),this.tex_num=null)},t.prototype.delete=function(){this.gl.deleteTexture(this.texture),this.tex_num=null},t}(),L=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},N=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i},O=function(){function t(t,e,n){var r,o,a,i,l,c;this.gl=t,this.prog=function(t,e,n){var r=t.createShader(t.VERTEX_SHADER);if(null===r)throw"Could not create vertex shader";if(t.shaderSource(r,e),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS)){var o=t.getShaderInfoLog(r);console.log("Vertex shader compiler log: "+o)}var a=t.createShader(t.FRAGMENT_SHADER);if(null===a)throw"Could not create fragment shader";t.shaderSource(a,n),t.compileShader(a),t.getShaderParameter(a,t.COMPILE_STATUS)||(o=t.getShaderInfoLog(a),console.log("Fragment shader compiler log: "+o));var i=t.createProgram();if(null===i)throw"Could not create shader program";if(t.attachShader(i,r),t.attachShader(i,a),t.linkProgram(i),!t.getProgramParameter(i,t.LINK_STATUS)){var l=t.getProgramInfoLog(i);console.log("Linker log: "+l)}return i}(t,e,n),this.attributes={},this.uniforms={},this.n_verts=null,this.draw_mode=null;var u=function(t){var e=t.indexOf("//");return e>=0&&(t=t.slice(0,e)),t};e=e.split("\n").map(u).join("\n"),n=n.split("\n").map(u).join("\n");try{for(var s=L(e.matchAll(/attribute +([\w ]+?) +([\w_]+);[\s]*$/gm)),f=s.next();!f.done;f=s.next()){var h=f.value,p=N(h,3),_=(p[0],p[1]),d=p[2];this.attributes[d]={type:_,location:t.getAttribLocation(this.prog,d)}}}catch(t){r={error:t}}finally{try{f&&!f.done&&(o=s.return)&&o.call(s)}finally{if(r)throw r.error}}try{for(var m=L(e.matchAll(/uniform +([\w ]+?) +([\w_]+);[\s]*$/gm)),v=m.next();!v.done;v=m.next()){h=v.value;var g=N(h,3),y=(g[0],_=g[1],g[2]),b=_.split(" ");if(null===(E=t.getUniformLocation(this.prog,y)))throw"Could not get vertex shader uniform location for '".concat(y,"'");this.uniforms[y]={type:b[b.length-1],location:E}}}catch(t){a={error:t}}finally{try{v&&!v.done&&(i=m.return)&&i.call(m)}finally{if(a)throw a.error}}try{for(var x=L(n.matchAll(/uniform +([\w ]+?) +([\w_]+);[\s]*$/gm)),w=x.next();!w.done;w=x.next()){h=w.value;var E,T=N(h,3);if(T[0],_=T[1],y=T[2],b=_.split(" "),null===(E=t.getUniformLocation(this.prog,y)))throw"Could not get fragment shader uniform location for '".concat(y,"'");this.uniforms[y]={type:b[b.length-1],location:E}}}catch(t){l={error:t}}finally{try{w&&!w.done&&(c=x.return)&&c.call(x)}finally{if(l)throw l.error}}}return t.prototype.use=function(t,e,n){this.gl.useProgram(this.prog),this.draw_mode=null,this.n_verts=null,void 0!==t&&this.bindAttributes(t),void 0!==e&&this.setUniforms(e),void 0!==n&&this.bindTextures(n)},t.prototype.bindAttributes=function(t){var e=this;Object.entries(t).forEach((function(t){var n=N(t,2),r=n[0],o=n[1];if(void 0!==e.attributes[r]){if(e.n_verts=null===e.n_verts?o.n_verts:e.n_verts,e.draw_mode=null===e.draw_mode?o.draw_mode:e.draw_mode,e.draw_mode!=o.draw_mode||e.n_verts!=o.n_verts)throw"Unexpected draw mode or number of vertices.";var a=e.attributes[r],i=(a.type,a.location);o.bindToProgram(i)}else console.warn("Skipping attribute buffer provided for '".concat(r,"' because the attribute was not found in the program."))}))},t.prototype.setUniforms=function(t){var e=this;Object.entries(t).forEach((function(t){var n=N(t,2),r=n[0],o=n[1];if(void 0!==e.uniforms[r]){var a=e.uniforms[r],i=a.type,l=a.location;if("int"===i&&"number"==typeof o)e.gl.uniform1i(l,o);else if("float"===i&&"number"==typeof o)e.gl.uniform1f(l,o);else if("vec2"===i&&o instanceof Array)e.gl.uniform2fv(l,o);else if("vec3"===i&&o instanceof Array)e.gl.uniform3fv(l,o);else if("vec4"===i&&o instanceof Array)e.gl.uniform4fv(l,o);else{if(!("mat4"===i&&o instanceof Array))throw"Could not figure out uniform function for type '".concat(i,"' and value '").concat(String(o),"'");e.gl.uniformMatrix4fv(l,!1,o)}}else console.warn("Skipping uniform value provided for '".concat(r,"' because the uniform was not found in the program."))}))},t.prototype.bindTextures=function(t){var e=this;Object.entries(t).forEach((function(t,n){var r=N(t,2),o=r[0],a=r[1];if(void 0!==e.uniforms[o]){var i=e.uniforms[o],l=(i.type,i.location);a.bindToProgram(l,n)}else console.warn("Skipping texture provided for sampler '".concat(o,"' because the sampler was not found in the program."))}))},t.prototype.draw=function(){if(null===this.draw_mode||null===this.n_verts)throw"Cannot draw without binding attribute buffers";this.gl.drawArrays(this.draw_mode,0,this.n_verts)},t}(),k=(M=function(t,e){return M=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},M(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}M(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),B=function(){function t(t,e){this.gl=t,this.framebuffer=e}return t.prototype.clear=function(t){var e=this.gl;if(null===e)throw"Register WebGL drawing context using registerGLContext() first";e.clearColor.apply(e,function(t,e,n){if(n||2===arguments.length)for(var r,o=0,a=e.length;o<a;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))}([],function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}(t),!1)),e.bindFramebuffer(e.FRAMEBUFFER,this.framebuffer),e.clear(e.COLOR_BUFFER_BIT)},t.prototype.renderTo=function(t,e,n,r){var o=this.gl;if(null===o)throw"Register WebGL drawing context using registerGLContext() first";o.bindFramebuffer(o.FRAMEBUFFER,this.framebuffer),o.viewport(t,e,n,r)},t.prototype.copyToTexture=function(t,e,n,r,o){var a=this.gl;if(null===a)throw"Register WebGL drawing context using registerGLContext() first";a.bindFramebuffer(a.FRAMEBUFFER,this.framebuffer),t.activate(0),a.copyTexImage2D(a.TEXTURE_2D,0,a.RGBA,e,n,r,o,0)},t}(),D=function(t){function e(){return t.call(this,null,null)||this}return k(e,t),e.prototype.registerGLContext=function(t){this.gl=t},e}(B),j=(function(t){function e(e,n){var r=this,o=e.createFramebuffer();if(null===o)throw"Could not create WebGL Framebuffer";return(r=t.call(this,e,o)||this).texture=n,e.bindFramebuffer(e.FRAMEBUFFER,r.framebuffer),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n.texture,0),r}k(e,t),e.screen=new D}(B),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}());const F=function(t){function e(e,n){var r=t.call(this)||this;r.field=e,r.interval=n.interval||1;var o=w(n.color||"#000000");return r.color=[o[0],o[1],o[2]],r.thinner=n.thinner||function(){return 1},r.map=null,r.program=null,r.vertices=null,r.latitudes=null,r.fill_texture=null,r.texcoords=null,r.grid_spacing=null,r.tex_width=null,r.tex_height=null,r}return j(e,t),e.prototype.onAdd=function(t,e){return n=this,r=void 0,a=function(){var n,r,o,a,i,l,c,u,s,f;return function(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(c){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){i.label=l[1];break}if(6===l[0]&&i.label<o[1]){i.label=o[1],o=l;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(l);break}o[2]&&i.ops.pop(),i.trys.pop();continue}l=e.call(t,i)}catch(t){l=[6,t],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,c])}}}(this,(function(h){switch(h.label){case 0:return this.map=t,e.getExtension("OES_texture_float"),e.getExtension("OES_texture_float_linear"),e.getExtension("OES_standard_derivatives"),this.program=new O(e,"\n        uniform mat4 u_matrix;\n\n        attribute vec2 a_pos;\n        attribute vec2 a_tex_coord;\n        attribute float a_latitude;\n\n        varying highp vec2 v_tex_coord;\n        varying highp float v_map_scale_fac;\n\n        void main() {\n            gl_Position = u_matrix * vec4(a_pos, 0.0, 1.0);\n            v_tex_coord = a_tex_coord;\n            v_map_scale_fac = cos(a_latitude * 3.141592654 / 180.);\n        }","\n        #extension GL_OES_standard_derivatives : enable\n        varying highp vec2 v_tex_coord;\n        varying highp float v_map_scale_fac;\n\n        uniform sampler2D u_fill_sampler;\n        uniform highp float u_contour_interval;\n        uniform lowp float u_line_cutoff;\n        uniform lowp vec3 u_color;\n        uniform lowp vec2 u_step_size;\n        uniform lowp float u_zoom_fac;\n        uniform highp float u_grid_spacing;\n\n        void main() {\n            highp float field_val = texture2D(u_fill_sampler, v_tex_coord).r;\n\n            // Find the gradient magnitude of the grid (the y component divides by 2 to cheat for high latitudes)\n            lowp vec2 ihat = vec2(u_step_size.x, 0.0);\n            lowp vec2 jhat = vec2(0.0, u_step_size.y);\n            highp float fv_xp1 = texture2D(u_fill_sampler, v_tex_coord + ihat).r;\n            highp float fv_xm1 = texture2D(u_fill_sampler, v_tex_coord - ihat).r;\n            highp float fv_yp1 = texture2D(u_fill_sampler, v_tex_coord + jhat).r;\n            highp float fv_ym1 = texture2D(u_fill_sampler, v_tex_coord - jhat).r;\n            highp float fwidth_field = sqrt((fv_xp1 - fv_xm1) * (fv_xp1 - fv_xm1) + (fv_yp1 - fv_ym1) * (fv_yp1 - fv_ym1) * v_map_scale_fac * v_map_scale_fac) \n                                        / (2. * u_grid_spacing);\n\n            //gl_FragColor = vec4(fwidth_field, fwidth_field, fwidth_field, 1.0);\n\n            lowp float plot_val = fract(field_val / u_contour_interval);\n            if (plot_val > 0.5) plot_val = 1.0 - plot_val;\n            plot_val = plot_val / (max(0.001, fwidth_field / (u_zoom_fac * 0.125)));\n\n            if (plot_val > u_line_cutoff) discard;\n\n            gl_FragColor = vec4(u_color, 1. - (plot_val * plot_val / (u_line_cutoff * u_line_cutoff)));\n        }"),n=this.field.grid.getCoords(),r=n.lats,o=n.lons,a=this.field.getPaddedData(),i=a.width,l=a.height,c=a.data,[4,g.makeDomainVerticesAndTexCoords(r,o,i,l)];case 1:return u=h.sent(),s=new Float32Array(function(t,e,n){if(n||2===arguments.length)for(var r,o=0,a=e.length;o<a;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))}([],function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}(r),!1).map((function(t){return[t,t]})).flat()),this.grid_spacing=Math.abs(s[2]-s[0]),this.vertices=new I(e,u.vertices,2,e.TRIANGLE_STRIP),this.latitudes=new I(e,s,1,e.TRIANGLE_STRIP),this.tex_width=i,this.tex_height=l,f={format:e.LUMINANCE,type:e.FLOAT,width:i,height:l,image:c,mag_filter:e.LINEAR},this.fill_texture=new C(e,f),this.texcoords=new I(e,u.tex_coords,2,e.TRIANGLE_STRIP),[2]}}))},new((o=void 0)||(o=Promise))((function(t,e){function i(t){try{c(a.next(t))}catch(t){e(t)}}function l(t){try{c(a.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(t){t(n)}))).then(i,l)}c((a=a.apply(n,r||[])).next())}));var n,r,o,a},e.prototype.render=function(t,e){if(null!==this.map&&null!==this.program&&null!==this.vertices&&null!==this.latitudes&&null!==this.fill_texture&&null!==this.texcoords&&null!==this.grid_spacing&&null!==this.tex_width&&null!==this.tex_height){var n=this.map.getZoom(),r=this.thinner(n)*this.interval,o=.5/r,a=[.25/this.tex_width,.25/this.tex_height],i=Math.pow(2,n);this.program.use({a_pos:this.vertices,a_latitude:this.latitudes,a_tex_coord:this.texcoords},{u_contour_interval:r,u_line_cutoff:o,u_color:this.color,u_step_size:a,u_zoom_fac:i,u_grid_spacing:this.grid_spacing,u_matrix:e},{u_fill_sampler:this.fill_texture}),t.enable(t.BLEND),t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA),this.program.draw()}},e}(y);var U=function(){return U=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},U.apply(this,arguments)},G=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i},z=function(){function t(t,e){if(t.length!=e.length+1)throw"Mismatch between number of levels (".concat(t.length,") and number of colors (").concat(e.length,"; expected ").concat(t.length-1,")");this.levels=t,this.colors=e}return t.prototype.getColors=function(){return this.colors.map((function(t){return t.color}))},t.prototype.getOpacities=function(){return this.colors.map((function(t){return t.opacity}))},t.diverging=function(e,n,r,o,a){for(var i,l,c=[],u=[],s=(o-r)/(a-1),f=(o+r)/2,h=[0,0,.9],p=A(E(e)),_=A(E(n)),d=0;d<a;d++){var m=r+d*s,v=void 0,g=void 0,y=void 0,b=void 0;m<f?(b=(f-m)/(f-r),v=(i=G([p[0],h[1]+(p[1]-h[1])*b,h[2]+(p[2]-h[2])*b],3))[0],g=i[1],y=i[2]):m>=f&&(b=(m-f)/(o-f),v=(l=G([_[0],h[1]+(_[1]-h[1])*b,h[2]+(_[2]-h[2])*b],3))[0],g=l[1],y=l[2]);var x=T(S([v,g,y]));c.push({color:x,opacity:Math.min(2*b,1)})}for(var w=0;w<=a;w++){var R=(o-r)/a;u.push(r+w*R)}return new t(u,c)},t.redblue=function(e,n,r){return t.diverging("#ff0000","#0000ff",e,n,r)},t.bluered=function(e,n,r){return t.diverging("#0000ff","#ff0000",e,n,r)},t}();function H(t,e){var n=e.label||"",r=e.ticks||t.levels,o=e.orientation||"vertical",a=e.fontface||"sans-serif",i=e.tick_direction||("vertical"==o?"left":"bottom");if("vertical"==o&&("top"==i||"bottom"==i)||"horizontal"==o&&("left"==i||"right"==i))throw"tick_direction of '".concat(i," doesn't match an orientation of ").concat(o);var l,c,u,s,f,h,p=function(t,e,n){var r=document.createElementNS("http://www.w3.org/2000/svg",t);return void 0!==e&&Object.entries(e).forEach((function(t){var e=G(t,2),n=e[0],o=e[1];r.setAttribute(n,o.toString())})),void 0!==n&&n.appendChild(r),r},_=600/9;"vertical"==o?(l=600,c=_,u="left"==i?53.66666666666667:3,s=11,f=10,h=578):(c=600,l=_-6,u=11,s="bottom"==i?3:47.66666666666667,h=10,f=578);var d,m=t.colors.length,v=p("svg",{width:c,height:l}),g=p("g",{},v);d="vertical"==o?"left"==i?{"text-anchor":"end",transform:"translate(".concat(u,", ").concat(s,")")}:{transform:"translate(".concat(u+f,", ").concat(s,")")}:"bottom"==i?{"text-anchor":"middle",transform:"translate(".concat(u,", ").concat(s+h,")")}:{"text-anchor":"middle",transform:"translate(".concat(u,", ").concat(s,")")};var y,b=p("g",d,v);return t.colors.forEach((function(t,e){p("rect",U(U({},"vertical"==o?{x:u,y:s+h*(1-(e+1)/m),width:f,height:h/m}:{x:u+f*e/m,y:s,width:f/m,height:h}),{fill:t.color,opacity:t.opacity}),g)})),r.forEach((function(e){var n=t.levels.indexOf(e),r="vertical"==o?{transform:"translate(0, ".concat(h*(1-n/m),")")}:{transform:"translate(".concat(f*n/m,", 0)")},l=p("g",r,b);p("line",U(U({},"vertical"==o?"left"==i?{x2:-6}:{x2:6}:"bottom"==i?{y2:6}:{y2:-6}),{stroke:"#000000","stroke-width":1.5}),l),p("text",U(U({},"vertical"==o?"left"==i?{x:-9,dy:"0.32em"}:{x:9,dy:"0.32em"}:"bottom"==i?{y:9,dy:"0.8em"}:{y:-9,dy:"0em"}),{fill:"#000000",style:"font-family: ".concat(a,";")}),l).textContent=e.toString()})),p("rect",{x:u,y:s,width:f,height:h,stroke:"#000000","stroke-width":1.5,fill:"none"},v),y="vertical"==o?"left"==i?{transform:"translate(15, ".concat(l/2,") rotate(-90)")}:{transform:"translate(".concat(c-6,", ").concat(l/2,") rotate(-90)")}:"bottom"==i?{transform:"translate(".concat(c/2,", ").concat(l-5,")")}:{transform:"translate(".concat(c/2,", 15)")},p("text",U(U({},y),{fill:"#000000","text-anchor":"middle",style:"font-family: ".concat(a,";")}),v).textContent=n,v}var X=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const W=function(t){function e(e,n){var r=t.call(this)||this;r.field=e,r.cmap=n.cmap,r.opacity=n.opacity||1,r.cmap_image=function(t){var e=document.createElement("canvas");e.width=t.colors.length,e.height=1;var n=e.getContext("2d");return t.colors.forEach((function(t,e){if(null===n)throw"Could not get rendering context for colormap image canvas";n.fillStyle=t.color+Math.round(255*t.opacity).toString(16),n.fillRect(e,0,1,1)})),e}(r.cmap);for(var o=r.cmap.levels,a=o.length-1,i=[],l=0;l<101;l++)i.push(l/100);var c=o.map((function(t,e){return e/a})),u=o.map((function(t){return(t-o[0])/(o[a]-o[0])})),s=i.map((function(t){var e;for(e=0;!(u[e]<=t&&t<=u[e+1]);e++);var n=(t-u[e])/(u[e+1]-u[e]);return c[e]*(1-n)+c[e+1]*n}));return r.index_map=new Float32Array(s),r.program=null,r.vertices=null,r.fill_texture=null,r.texcoords=null,r.cmap_texture=null,r.cmap_nonlin_texture=null,r}return X(e,t),e.prototype.onAdd=function(t,e){return n=this,r=void 0,a=function(){var t,n,r,o,a,i,l,c,u,s,f;return function(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(c){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){i.label=l[1];break}if(6===l[0]&&i.label<o[1]){i.label=o[1],o=l;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(l);break}o[2]&&i.ops.pop(),i.trys.pop();continue}l=e.call(t,i)}catch(t){l=[6,t],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,c])}}}(this,(function(h){switch(h.label){case 0:return e.getExtension("OES_texture_float"),e.getExtension("OES_texture_float_linear"),this.program=new O(e,"\n        uniform mat4 u_matrix;\n\n        attribute vec2 a_pos;\n        attribute vec2 a_tex_coord;\n\n        varying highp vec2 v_tex_coord;\n\n        void main() {\n            gl_Position = u_matrix * vec4(a_pos, 0.0, 1.0);\n            v_tex_coord = a_tex_coord;\n        }","\n        varying highp vec2 v_tex_coord;\n\n        uniform sampler2D u_fill_sampler;\n        uniform sampler2D u_cmap_sampler;\n        uniform sampler2D u_cmap_nonlin_sampler;\n        uniform highp float u_cmap_min;\n        uniform highp float u_cmap_max;\n        uniform highp float u_opacity;\n        uniform int u_n_index;\n\n        void main() {\n            lowp float index_buffer = 1. / (2. * float(u_n_index));\n            highp float fill_val = texture2D(u_fill_sampler, v_tex_coord).r;\n            lowp float normed_val = (fill_val - u_cmap_min) / (u_cmap_max - u_cmap_min);\n            \n            if (normed_val < 0.0 || normed_val > 1.0) {\n                discard;\n            }\n\n            normed_val = index_buffer + normed_val * (1. - 2. * index_buffer); // Chop off the half pixels on either end of the texture\n            highp float nonlin_val = texture2D(u_cmap_nonlin_sampler, vec2(normed_val, 0.5)).r;\n            lowp vec4 color = texture2D(u_cmap_sampler, vec2(nonlin_val, 0.5));\n            color.a = color.a * u_opacity;\n            gl_FragColor = color;\n        }"),t=this.field.grid.getCoords(),n=t.lats,r=t.lons,o=this.field.getPaddedData(),a=o.width,i=o.height,l=o.data,[4,g.makeDomainVerticesAndTexCoords(n,r,a,i)];case 1:return c=h.sent(),this.vertices=new I(e,c.vertices,2,e.TRIANGLE_STRIP),u={format:e.LUMINANCE,type:e.FLOAT,width:a,height:i,image:l,mag_filter:e.LINEAR},this.fill_texture=new C(e,u),this.texcoords=new I(e,c.tex_coords,2,e.TRIANGLE_STRIP),s={format:e.RGBA,type:e.UNSIGNED_BYTE,image:this.cmap_image,mag_filter:e.NEAREST},this.cmap_texture=new C(e,s),f={format:e.LUMINANCE,type:e.FLOAT,width:this.index_map.length,height:1,image:this.index_map,mag_filter:e.LINEAR},this.cmap_nonlin_texture=new C(e,f),[2]}}))},new((o=void 0)||(o=Promise))((function(t,e){function i(t){try{c(a.next(t))}catch(t){e(t)}}function l(t){try{c(a.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(t){t(n)}))).then(i,l)}c((a=a.apply(n,r||[])).next())}));var n,r,o,a},e.prototype.render=function(t,e){null!==this.program&&null!==this.vertices&&null!==this.texcoords&&null!==this.fill_texture&&null!==this.cmap_texture&&null!==this.cmap_nonlin_texture&&(this.program.use({a_pos:this.vertices,a_tex_coord:this.texcoords},{u_cmap_min:this.cmap.levels[0],u_cmap_max:this.cmap.levels[this.cmap.levels.length-1],u_matrix:e,u_opacity:this.opacity,u_n_index:this.index_map.length},{u_fill_sampler:this.fill_texture,u_cmap_sampler:this.cmap_texture,u_cmap_nonlin_sampler:this.cmap_nonlin_texture}),t.enable(t.BLEND),t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA),this.program.draw())},e}(y);var Y=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i},V=function(){function t(t,e,n,r,o){var a=Y(r,2),i=a[0],l=a[1];this.size=l,this.aspect=i/l,this.color=o,this.program=new O(t,"\n        uniform mat4 u_matrix;\n\n        attribute vec3 a_pos;    // Has position and zoom info\n        attribute vec2 a_offset; // Has corner and orientation info\n        attribute vec2 a_tex_coord;\n        uniform lowp float u_billboard_size;\n        uniform lowp float u_billboard_aspect;\n        uniform lowp float u_map_aspect;\n        uniform lowp float u_zoom;\n        uniform highp float u_map_bearing;\n\n        varying highp vec2 v_tex_coord;\n\n        mat4 scalingMatrix(float x_scale, float y_scale, float z_scale) {\n            return mat4(x_scale, 0.0,     0.0,     0.0,\n                        0.0,     y_scale, 0.0,     0.0,\n                        0.0,     0.0,     z_scale, 0.0,\n                        0.0,     0.0,     0.0,     1.0);\n        }\n\n        mat4 rotationZMatrix(float angle) {\n            float s = sin(angle);\n            float c = cos(angle);\n\n            return mat4( c,  s,  0., 0.,\n                        -s,  c,  0., 0.,\n                         0., 0., 1., 0.,\n                         0., 0., 0., 1.);\n        }\n\n        mat4 rotationXMatrix(float angle) {\n            float s = sin(angle);\n            float c = cos(angle);\n\n            return mat4( 1.,  0., 0., 0.,\n                         0.,  c,  s,  0.,\n                         0., -s,  c,  0.,\n                         0.,  0., 0., 1.);\n        }\n\n        void main() {\n            vec4 pivot_pos = u_matrix * vec4(a_pos.xy, 0.0, 1.0);\n            lowp float min_zoom = a_pos.z;\n\n            lowp float corner = a_offset.x;\n            lowp float ang = radians(180.0 - a_offset.y);\n\n            vec4 offset = vec4(0.0, 0.0, 0.0, 0.0);\n            \n            if (u_zoom >= min_zoom) {\n                if (corner < 0.5) {\n                    offset = vec4(-u_billboard_size, u_billboard_size, 0., 0.);\n                }\n                else if (corner < 1.5) {\n                    offset = vec4(u_billboard_size, u_billboard_size, 0., 0.);\n                }\n                else if (corner < 2.5) {\n                    offset = vec4(-u_billboard_size, -u_billboard_size * (2. / u_billboard_aspect - 1.), 0., 0.);\n                }\n                else if (corner < 3.5) {\n                    offset = vec4(u_billboard_size, -u_billboard_size * (2. / u_billboard_aspect - 1.), 0., 0.);\n                }\n\n                mat4 barb_rotation = rotationZMatrix(ang + radians(u_map_bearing));\n                mat4 map_stretch_matrix = scalingMatrix(1.0, 1. / u_map_aspect, 1.0);\n                offset = map_stretch_matrix * barb_rotation * offset;\n            }\n\n            gl_Position = pivot_pos + offset;\n            v_tex_coord = a_tex_coord;\n        }","\n        varying highp vec2 v_tex_coord;\n\n        uniform sampler2D u_sampler;\n        uniform lowp vec3 u_billboard_color;\n\n        void main() {\n            lowp vec4 tex_color = texture2D(u_sampler, v_tex_coord);\n            gl_FragColor = vec4(u_billboard_color, tex_color.a); //mix(vec4(1.0, 0.0, 0.0, 0.5), tex_color, tex_color.a);\n        }"),this.vertices=new I(t,e.pts,3,t.TRIANGLE_STRIP),this.offsets=new I(t,e.offset,2,t.TRIANGLE_STRIP),this.texcoords=new I(t,e.tex_coords,2,t.TRIANGLE_STRIP),this.texture=new C(t,n)}return t.prototype.render=function(t,e,n,r,o,a){var i=Y(n,2),l=i[0],c=i[1];this.program.use({a_pos:this.vertices,a_offset:this.offsets,a_tex_coord:this.texcoords},{u_billboard_size:this.size*(c/l),u_billboard_aspect:this.aspect,u_billboard_color:this.color,u_matrix:e,u_map_aspect:c/l,u_zoom:r,u_map_bearing:o},{u_sampler:this.texture}),t.enable(t.BLEND),t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA),this.program.draw()},t}(),Z=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),$={BARB_WIDTH:85,BARB_HEIGHT:256,BARB_TEX_WRAP:60,BARB_TEX_WIDTH:1024,BARB_TEX_HEIGHT:1024,MAX_BARB:235},K=function(){var t=document.createElement("canvas");function e(t,e,n,r){var o=$.BARB_WIDTH/2-4,a=o/2;if(r<2.5)t.beginPath(),t.arc(e,n,o/2,0,2*Math.PI),t.stroke();else{var i=0,l=r,c=0,u=Math.floor((l+2.5)/50);c+=u*o/2+a+(u-1)*a/2,l-=50*u;var s=Math.floor((l+2.5)/10);c+=s*a,l-=10*s,c+=Math.floor((l+2.5)/5)*a,r<7.5&&(c+=a),c=Math.max(120,c),t.beginPath(),t.moveTo(e,n),t.lineTo(e,n+c),l=r,i=n+c;for(var f=!1,h=!0;l>47.5;)f&&(i+=a/2),h||t.moveTo(e,i),t.lineTo(e-o,i),t.lineTo(e,i-o/2),i-=o/2+a,l-=50,f=!0,h=!1;for(;l>7.5;)h||t.moveTo(e,i),t.lineTo(e-o,i+o/2),i-=a,l-=10,h=!1;for(r<7.5&&(i-=a);l>2.5;)t.moveTo(e,i),t.lineTo(e-o/2,i+o/4),l-=5;t.stroke()}}t.width=$.BARB_TEX_WIDTH,t.height=$.BARB_TEX_HEIGHT;var n=t.getContext("2d");if(null===n)throw"Could not get rendering context for the wind barb canvas";n.lineWidth=8,n.miterLimit=4;for(var r=0;r<=$.MAX_BARB;r+=5)e(n,r%$.BARB_TEX_WRAP/5*$.BARB_WIDTH+$.BARB_WIDTH/2,Math.floor(r/$.BARB_TEX_WRAP)*$.BARB_HEIGHT+$.BARB_WIDTH/2,r);return t}();const q=function(t){function e(e,n){var r=t.call(this)||this;r.fields=e;var o=w(n.color||"#000000");return r.color=[o[0],o[1],o[2]],r.thin_fac=n.thin_fac||1,r.map=null,r.barb_billboards=null,r}return Z(e,t),e.prototype.onAdd=function(t,e){return n=this,r=void 0,a=function(){var n,r,o,a,i,l;return function(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(c){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){i.label=l[1];break}if(6===l[0]&&i.label<o[1]){i.label=o[1],o=l;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(l);break}o[2]&&i.ops.pop(),i.trys.pop();continue}l=e.call(t,i)}catch(t){l=[6,t],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,c])}}}(this,(function(c){switch(c.label){case 0:return this.map=t,n=this.fields.u.grid.getCoords(),r=n.lons,o=n.lats,[4,g.makeBarbElements(o,r,this.fields.u.data,this.fields.v.data,this.thin_fac,$)];case 1:return a=c.sent(),i={format:e.RGBA,type:e.UNSIGNED_BYTE,image:K,mag_filter:e.NEAREST},l=$.BARB_WIDTH/$.BARB_HEIGHT*27.5,this.barb_billboards=new V(e,a,i,[l,27.5],this.color),[2]}}))},new((o=void 0)||(o=Promise))((function(t,e){function i(t){try{c(a.next(t))}catch(t){e(t)}}function l(t){try{c(a.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(t){t(n)}))).then(i,l)}c((a=a.apply(n,r||[])).next())}));var n,r,o,a},e.prototype.render=function(t,e){if(null!==this.map&&null!==this.barb_billboards){var n=this.map.getZoom(),r=this.map.getCanvas().width,o=this.map.getCanvas().height,a=this.map.getBearing(),i=this.map.getPitch();this.barb_billboards.render(t,e,[r,o],n,a,i)}},e}(y);var J=function(){function t(t,e,n,r,o){this.width=r,this.scale=o,this.program=new O(t,"\n        uniform mat4 u_matrix;\n\n        attribute vec2 a_pos;\n        attribute float a_min_zoom;\n        attribute vec2 a_extrusion;\n        attribute vec2 a_offset;\n        attribute vec2 a_tex_coord;\n        uniform lowp float u_offset_scale;\n        uniform lowp float u_map_aspect;\n        uniform lowp float u_zoom;\n        uniform lowp float u_line_width;\n        uniform highp float u_map_bearing;\n        //uniform highp float u_map_pitch;\n\n        varying highp vec2 v_tex_coord;\n\n        mat4 scalingMatrix(float x_scale, float y_scale, float z_scale) {\n            return mat4(x_scale, 0.0,     0.0,     0.0,\n                        0.0,     y_scale, 0.0,     0.0,\n                        0.0,     0.0,     z_scale, 0.0,\n                        0.0,     0.0,     0.0,     1.0);\n        }\n\n        mat4 rotationZMatrix(float angle) {\n            float s = sin(angle);\n            float c = cos(angle);\n\n            return mat4( c,  s,  0., 0.,\n                        -s,  c,  0., 0.,\n                         0., 0., 1., 0.,\n                         0., 0., 0., 1.);\n        }\n\n        mat4 rotationXMatrix(float angle) {\n            float s = sin(angle);\n            float c = cos(angle);\n\n            return mat4( 1.,  0., 0., 0.,\n                         0.,  c,  s,  0.,\n                         0., -s,  c,  0.,\n                         0.,  0., 0., 1.);\n        }\n\n        void main() {\n            vec4 center_pos = u_matrix * vec4(a_pos.xy, 0.0, 1.0);\n            vec4 offset = vec4(0.0, 0.0, 0.0, 0.0);\n            \n            if (u_zoom >= a_min_zoom) {\n                vec2 offset_2d = a_offset + u_line_width * a_extrusion;\n\n                mat4 rotation_matrix = rotationZMatrix(radians(u_map_bearing));\n                mat4 map_stretch_matrix = scalingMatrix(u_offset_scale, u_offset_scale / u_map_aspect, 1.);\n                offset = map_stretch_matrix * rotation_matrix * vec4(offset_2d, 0., 0.);\n            }\n\n            gl_Position = center_pos + offset;\n            v_tex_coord = a_tex_coord;\n        }","\n        varying highp vec2 v_tex_coord;\n\n        uniform sampler2D u_sampler;\n\n        void main() {\n            if (v_tex_coord.x > 1.0) {\n                discard;\n            }\n\n            lowp vec4 tex_color = texture2D(u_sampler, v_tex_coord);\n            gl_FragColor = tex_color;\n        }"),this.origin=new I(t,e.origin,2,t.TRIANGLE_STRIP),this.offset=new I(t,e.verts,2,t.TRIANGLE_STRIP),this.extrusion=new I(t,e.extrusion,2,t.TRIANGLE_STRIP),this.min_zoom=new I(t,e.zoom,1,t.TRIANGLE_STRIP),this.texture=new C(t,n),this.texcoords=new I(t,e.texcoords,2,t.TRIANGLE_STRIP)}return t.prototype.render=function(t,e,n,r,o,a){var i=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}(n,2),l=i[0],c=i[1];this.program.use({a_pos:this.origin,a_offset:this.offset,a_extrusion:this.extrusion,a_min_zoom:this.min_zoom,a_tex_coord:this.texcoords},{u_offset_scale:this.scale*(c/l),u_line_width:this.width,u_matrix:e,u_map_aspect:c/l,u_zoom:r,u_map_bearing:o},{u_sampler:this.texture}),t.enable(t.BLEND),t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA),this.program.draw()},t}(),Q=function(){function t(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid LngLat object: (".concat(t,", ").concat(e,")"));if(this.lng=+t,this.lat=+e,this.lat>90||this.lat<-90)throw new Error("Invalid LngLat latitude value: must be between -90 and 90")}return t.prototype.toMercatorCoord=function(){return{x:(e=this.lng,(180+e)/360),y:(t=this.lat,(180-180/Math.PI*Math.log(Math.tan(Math.PI/4+t*Math.PI/360)))/360)};var t,e},t}(),tt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),et=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i},nt=function(t,e,n){if(n||2===arguments.length)for(var r,o=0,a=e.length;o<a;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))},rt=256,ot=function(){var t=document.createElement("canvas");t.width=rt,t.height=rt;var e=t.getContext("2d");if(null===e)throw"Could not get rendering context for the hodograph background canvas";e.lineWidth=4;for(var n=64;n<=128;n+=64)e.beginPath(),e.arc(128,128,n-2,0,2*Math.PI),e.stroke();var r=128,o=128;return e.beginPath(),e.moveTo(r,o),e.lineTo(148,118),e.lineTo(148,138),e.lineTo(r,o),e.fill(),t}(),at=[{bounds:[0,1],color:"#ffffcc"},{bounds:[1,3],color:"#a1dab4"},{bounds:[3,6],color:"#41b6c4"},{bounds:[6,9],color:"#225ea8"}],it=function(){var t=document.createElement("canvas");t.width=Math.max.apply(Math,nt([],et(at.map((function(t){return Math.max.apply(Math,nt([],et(t.bounds),!1))}))),!1)),t.height=1;var e=t.getContext("2d");return at.forEach((function(t){if(null===e)throw"Could not get rendering context for the hodograph height texture canvas";var n=et(t.bounds,2),r=n[0],o=n[1];e.fillStyle=t.color,e.fillRect(r,0,o-r,1)})),t}();const lt=function(t){function e(e,n){var r=t.call(this)||this;r.profiles=e;var o=w(n.bgcolor);return r.bgcolor=[o[0],o[1],o[2]],r.thin_fac=n.thin_fac,r.map=null,r.bg_billboard=null,r.hodo_line=null,r.sm_line=null,r}return tt(e,t),e.prototype.onAdd=function(t,e){return n=this,r=void 0,a=function(){var n,r,o,a,i,l,c,u,s,f=this;return function(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(c){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){i.label=l[1];break}if(6===l[0]&&i.label<o[1]){i.label=o[1],o=l;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(l);break}o[2]&&i.ops.pop(),i.trys.pop();continue}l=e.call(t,i)}catch(t){l=[6,t],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,c])}}}(this,(function(h){switch(h.label){case 0:return this.map=t,n=254/10240,r=140,o=this._getHodoBackgroundElements(),a={format:e.RGBA,type:e.UNSIGNED_BYTE,image:ot,mag_filter:e.NEAREST},this.bg_billboard=new V(e,o,a,[r,r],this.bgcolor),[4,g.makePolyLines(this.profiles.map((function(t){var e=new Q(t.lon,t.lat).toMercatorCoord(),n=R(t.jlat,t.ilon,f.thin_fac),r=Math.max.apply(Math,nt([],et(at.map((function(t){return Math.max.apply(Math,nt([],et(t.bounds),!1))}))),!1));return{verts:nt([],et(t.u),!1).map((function(e,n){return[e-t.smu,t.v[n]-t.smv]})),origin:[e.x,e.y],zoom:n,texcoords:nt([],et(t.z),!1).map((function(t){return[t/r,.5]}))}})))];case 1:return i=h.sent(),l={format:e.RGBA,type:e.UNSIGNED_BYTE,image:it,mag_filter:e.NEAREST},this.hodo_line=new J(e,i,l,1.5,n*r),[4,g.makePolyLines(this.profiles.map((function(t){var e=new Q(t.lon,t.lat).toMercatorCoord(),n=R(t.jlat,t.ilon,f.thin_fac),r=Math.hypot(t.smu,t.smv),o=Math.PI/2-Math.atan2(-t.smv,-t.smu);return{verts:[[2*Math.sin(o),2*Math.cos(o)],[r*Math.sin(o),r*Math.cos(o)]],origin:[e.x,e.y],zoom:n,texcoords:[[.5,.5],[.5,.5]]}})))];case 2:return c=h.sent(),(u=this.bgcolor.map((function(t){return 255*t}))).push(255),s={format:e.RGBA,type:e.UNSIGNED_BYTE,width:1,height:1,image:new Uint8Array(u),mag_filter:e.NEAREST},this.sm_line=new J(e,c,s,1,n*r),[2]}}))},new((o=void 0)||(o=Promise))((function(t,e){function i(t){try{c(a.next(t))}catch(t){e(t)}}function l(t){try{c(a.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(t){t(n)}))).then(i,l)}c((a=a.apply(n,r||[])).next())}));var n,r,o,a},e.prototype.render=function(t,e){if(null!==this.map&&null!==this.hodo_line&&null!==this.sm_line&&null!==this.bg_billboard){var n=this.map.getZoom(),r=this.map.getCanvas().width,o=this.map.getCanvas().height,a=this.map.getBearing(),i=this.map.getPitch();this.hodo_line.render(t,e,[r,o],n,a,i),this.sm_line.render(t,e,[r,o],n,a,a),this.bg_billboard.render(t,e,[r,o],n,a,i)}},e.prototype._getHodoBackgroundElements=function(){var t=this;return{pts:new Float32Array(this.profiles.map((function(e){var n=new Q(e.lon,e.lat).toMercatorCoord(),r=R(e.jlat,e.ilon,t.thin_fac);return[n.x,n.y,r,n.x,n.y,r,n.x,n.y,r,n.x,n.y,r,n.x,n.y,r,n.x,n.y,r]})).flat()),offset:new Float32Array(this.profiles.map((function(t){var e=90-180*Math.atan2(-t.smv,-t.smu)/Math.PI;return[0,e,0,e,1,e,2,e,3,e,3,e]})).flat()),tex_coords:new Float32Array(this.profiles.map((function(t){return[0,0,0,0,0,1,1,0,1,1,1,1]})).flat())}},e}(y);var ct=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ut=function(t){this.type="custom",this.id=t},st=function(t){function e(e,n){var r=t.call(this,e)||this;return r.field=n,r}return ct(e,t),e.prototype.onAdd=function(t,e){this.field.onAdd(t,e)},e.prototype.render=function(t,e){this.field.render(t,e)},e}(ut),ft=function(t){function e(e){var n=t.call(this,e)||this;return n.fields={},n.field_key=null,n.map=null,n.gl=null,n}return ct(e,t),e.prototype.onAdd=function(t,e){var n=this;this.map=t,this.gl=e,Object.values(this.fields).forEach((function(r){r.onAdd(t,e).then((function(t){n._repaintIfNecessary(null)}))})),this._repaintIfNecessary(null)},e.prototype.render=function(t,e){null!==this.map&&null!==this.gl&&null!==this.field_key&&this.fields.hasOwnProperty(this.field_key)&&null!==this.fields[this.field_key]&&this.fields[this.field_key].render(t,e)},e.prototype.setActiveKey=function(t){var e=this.field_key;this.field_key=t,this._repaintIfNecessary(e)},e.prototype.getKeys=function(){return Object.keys(this.fields)},e.prototype.addField=function(t,e){var n=this;this.field_key,null!==this.map&&null!==this.gl&&null!==t&&t.onAdd(this.map,this.gl).then((function(t){n._repaintIfNecessary(null)})),this.fields[e]=t,null===this.field_key&&(this.field_key=e)},e.prototype._repaintIfNecessary=function(t){null!==this.map&&t!==this.field_key&&this.map.triggerRepaint()},e}(ut),ht=function(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(c){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){i.label=l[1];break}if(6===l[0]&&i.label<o[1]){i.label=o[1],o=l;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(l);break}o[2]&&i.ops.pop(),i.trys.pop();continue}l=e.call(t,i)}catch(t){l=[6,t],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,c])}}},pt=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i},_t=function(t,e,n){if(n||2===arguments.length)for(var r,o=0,a=e.length;o<a;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))},dt=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},mt=function(){function t(t){this.cached_value=null,this.compute_value=t}return t.prototype.getValue=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return null===this.cached_value&&(this.cached_value=this.compute_value.apply(this,_t([],pt(t),!1))),this.cached_value},t}(),vt=function(){function t(t,e,n,r,o,a){var i=this;this.type="latlon",this.ni=t,this.nj=e,this.ll_lon=n,this.ll_lat=r,this.ur_lon=o,this.ur_lat=a,this._ll_cache=new mt((function(){for(var t=(i.ur_lon-i.ll_lon)/(i.ni-1),e=(i.ur_lat-i.ll_lat)/(i.nj-1),n=new Float32Array(i.ni),r=new Float32Array(i.nj),o=0;o<i.ni;o++)n[o]=i.ll_lon+o*t;for(var a=0;a<i.nj;a++)r[a]=i.ll_lat+a*e;return{lons:n,lats:r}}))}return t.prototype.getCoords=function(){return this._ll_cache.getValue()},t}(),gt=function(){function t(t,e){var n=this;this.grid=t,this.data=e,this._pad_cache=new mt((function(){for(var t=Math.pow(2,Math.ceil(Math.log2(n.grid.ni))),e=Math.pow(2,Math.ceil(Math.log2(n.grid.nj))),r=new Float32Array(t*e),o=0;o<n.grid.nj;o++)r.set(n.data.slice(o*n.grid.ni,(o+1)*n.grid.ni),o*t),r.set(n.data.slice((o+1)*n.grid.ni-1,(o+1)*n.grid.ni),o*t+n.grid.ni);return r.set(n.data.slice((n.grid.nj-1)*n.grid.ni,n.grid.nj*n.grid.ni),n.grid.nj*t),{width:t,height:e,data:r}}))}return t.prototype.getPaddedData=function(){return this._pad_cache.getValue()},t.aggregateFields=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];function o(t,e){var n,r,o,a,i,l;return ht(this,(function(c){switch(c.label){case 0:c.trys.push([0,5,6,7]),n=dt(t),r=n.next(),c.label=1;case 1:return r.done?[3,4]:(o=r.value,[4,e(o)]);case 2:c.sent(),c.label=3;case 3:return r=n.next(),[3,1];case 4:return[3,7];case 5:return a=c.sent(),i={error:a},[3,7];case 6:try{r&&!r.done&&(l=n.return)&&l.call(n)}finally{if(i)throw i.error}return[7];case 7:return[2]}}))}var a=P.apply(void 0,_t([],pt(n.map((function(t){return t.data}))),!1)),i=new Float32Array(o(a,(function(t){return e.apply(void 0,_t([],pt(t),!1))})));return new t(n[0].grid,i)},t}();return e})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFDNUMsRUFDSixFQTVEQSxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBnbC93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vYXBnbC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9hcGdsL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9hcGdsL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9hcGdsL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vYXBnbC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2FwZ2wvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9hcGdsL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2FwZ2wvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vYXBnbC8uL25vZGVfbW9kdWxlcy9jb21saW5rL2Rpc3QvZXNtL2NvbWxpbmsubWpzIiwid2VicGFjazovL2FwZ2wvLi9zcmMvUGxvdENvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9hcGdsLy4vc3JjL3V0aWxzLnRzIiwid2VicGFjazovL2FwZ2wvLi9zcmMvd2dsL1dHTEJ1ZmZlci50cyIsIndlYnBhY2s6Ly9hcGdsLy4vc3JjL3dnbC9XR0xUZXh0dXJlLnRzIiwid2VicGFjazovL2FwZ2wvLi9zcmMvd2dsL1dHTFByb2dyYW0udHMiLCJ3ZWJwYWNrOi8vYXBnbC8uL3NyYy93Z2wvV0dMRnJhbWVidWZmZXIudHMiLCJ3ZWJwYWNrOi8vYXBnbC8uL3NyYy9Db250b3VyLnRzIiwid2VicGFjazovL2FwZ2wvLi9zcmMvQ29sb3JNYXAudHMiLCJ3ZWJwYWNrOi8vYXBnbC8uL3NyYy9Db250b3VyRmlsbC50cyIsIndlYnBhY2s6Ly9hcGdsLy4vc3JjL0JpbGxib2FyZENvbGxlY3Rpb24udHMiLCJ3ZWJwYWNrOi8vYXBnbC8uL3NyYy9CYXJicy50cyIsIndlYnBhY2s6Ly9hcGdsLy4vc3JjL1BvbHlsaW5lQ29sbGVjdGlvbi50cyIsIndlYnBhY2s6Ly9hcGdsLy4vc3JjL01hcC50cyIsIndlYnBhY2s6Ly9hcGdsLy4vc3JjL0hvZG9ncmFwaHMudHMiLCJ3ZWJwYWNrOi8vYXBnbC8uL3NyYy9QbG90TGF5ZXIudHMiLCJ3ZWJwYWNrOi8vYXBnbC8uL3NyYy9SYXdGaWVsZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJhcGdsXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImFwZ2xcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCAoKSA9PiB7XG5yZXR1cm4gIiwiLy8gVGhlIHJlcXVpcmUgc2NvcGVcbnZhciBfX3dlYnBhY2tfcmVxdWlyZV9fID0ge307XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18udSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5hdXR1bW5wbG90LWdsLmpzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiLyoqXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgcHJveHlNYXJrZXIgPSBTeW1ib2woXCJDb21saW5rLnByb3h5XCIpO1xyXG5jb25zdCBjcmVhdGVFbmRwb2ludCA9IFN5bWJvbChcIkNvbWxpbmsuZW5kcG9pbnRcIik7XHJcbmNvbnN0IHJlbGVhc2VQcm94eSA9IFN5bWJvbChcIkNvbWxpbmsucmVsZWFzZVByb3h5XCIpO1xyXG5jb25zdCB0aHJvd01hcmtlciA9IFN5bWJvbChcIkNvbWxpbmsudGhyb3duXCIpO1xyXG5jb25zdCBpc09iamVjdCA9ICh2YWwpID0+ICh0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiICYmIHZhbCAhPT0gbnVsbCkgfHwgdHlwZW9mIHZhbCA9PT0gXCJmdW5jdGlvblwiO1xyXG4vKipcclxuICogSW50ZXJuYWwgdHJhbnNmZXIgaGFuZGxlIHRvIGhhbmRsZSBvYmplY3RzIG1hcmtlZCB0byBwcm94eS5cclxuICovXHJcbmNvbnN0IHByb3h5VHJhbnNmZXJIYW5kbGVyID0ge1xyXG4gICAgY2FuSGFuZGxlOiAodmFsKSA9PiBpc09iamVjdCh2YWwpICYmIHZhbFtwcm94eU1hcmtlcl0sXHJcbiAgICBzZXJpYWxpemUob2JqKSB7XHJcbiAgICAgICAgY29uc3QgeyBwb3J0MSwgcG9ydDIgfSA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xyXG4gICAgICAgIGV4cG9zZShvYmosIHBvcnQxKTtcclxuICAgICAgICByZXR1cm4gW3BvcnQyLCBbcG9ydDJdXTtcclxuICAgIH0sXHJcbiAgICBkZXNlcmlhbGl6ZShwb3J0KSB7XHJcbiAgICAgICAgcG9ydC5zdGFydCgpO1xyXG4gICAgICAgIHJldHVybiB3cmFwKHBvcnQpO1xyXG4gICAgfSxcclxufTtcclxuLyoqXHJcbiAqIEludGVybmFsIHRyYW5zZmVyIGhhbmRsZXIgdG8gaGFuZGxlIHRocm93biBleGNlcHRpb25zLlxyXG4gKi9cclxuY29uc3QgdGhyb3dUcmFuc2ZlckhhbmRsZXIgPSB7XHJcbiAgICBjYW5IYW5kbGU6ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpICYmIHRocm93TWFya2VyIGluIHZhbHVlLFxyXG4gICAgc2VyaWFsaXplKHsgdmFsdWUgfSkge1xyXG4gICAgICAgIGxldCBzZXJpYWxpemVkO1xyXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHNlcmlhbGl6ZWQgPSB7XHJcbiAgICAgICAgICAgICAgICBpc0Vycm9yOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB2YWx1ZS5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHZhbHVlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhY2s6IHZhbHVlLnN0YWNrLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHNlcmlhbGl6ZWQgPSB7IGlzRXJyb3I6IGZhbHNlLCB2YWx1ZSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW3NlcmlhbGl6ZWQsIFtdXTtcclxuICAgIH0sXHJcbiAgICBkZXNlcmlhbGl6ZShzZXJpYWxpemVkKSB7XHJcbiAgICAgICAgaWYgKHNlcmlhbGl6ZWQuaXNFcnJvcikge1xyXG4gICAgICAgICAgICB0aHJvdyBPYmplY3QuYXNzaWduKG5ldyBFcnJvcihzZXJpYWxpemVkLnZhbHVlLm1lc3NhZ2UpLCBzZXJpYWxpemVkLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgc2VyaWFsaXplZC52YWx1ZTtcclxuICAgIH0sXHJcbn07XHJcbi8qKlxyXG4gKiBBbGxvd3MgY3VzdG9taXppbmcgdGhlIHNlcmlhbGl6YXRpb24gb2YgY2VydGFpbiB2YWx1ZXMuXHJcbiAqL1xyXG5jb25zdCB0cmFuc2ZlckhhbmRsZXJzID0gbmV3IE1hcChbXHJcbiAgICBbXCJwcm94eVwiLCBwcm94eVRyYW5zZmVySGFuZGxlcl0sXHJcbiAgICBbXCJ0aHJvd1wiLCB0aHJvd1RyYW5zZmVySGFuZGxlcl0sXHJcbl0pO1xyXG5mdW5jdGlvbiBleHBvc2Uob2JqLCBlcCA9IHNlbGYpIHtcclxuICAgIGVwLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGZ1bmN0aW9uIGNhbGxiYWNrKGV2KSB7XHJcbiAgICAgICAgaWYgKCFldiB8fCAhZXYuZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHsgaWQsIHR5cGUsIHBhdGggfSA9IE9iamVjdC5hc3NpZ24oeyBwYXRoOiBbXSB9LCBldi5kYXRhKTtcclxuICAgICAgICBjb25zdCBhcmd1bWVudExpc3QgPSAoZXYuZGF0YS5hcmd1bWVudExpc3QgfHwgW10pLm1hcChmcm9tV2lyZVZhbHVlKTtcclxuICAgICAgICBsZXQgcmV0dXJuVmFsdWU7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gcGF0aC5zbGljZSgwLCAtMSkucmVkdWNlKChvYmosIHByb3ApID0+IG9ialtwcm9wXSwgb2JqKTtcclxuICAgICAgICAgICAgY29uc3QgcmF3VmFsdWUgPSBwYXRoLnJlZHVjZSgob2JqLCBwcm9wKSA9PiBvYmpbcHJvcF0sIG9iaik7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkdFVFwiIC8qIEdFVCAqLzpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblZhbHVlID0gcmF3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlNFVFwiIC8qIFNFVCAqLzpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFtwYXRoLnNsaWNlKC0xKVswXV0gPSBmcm9tV2lyZVZhbHVlKGV2LmRhdGEudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkFQUExZXCIgLyogQVBQTFkgKi86XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZSA9IHJhd1ZhbHVlLmFwcGx5KHBhcmVudCwgYXJndW1lbnRMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiQ09OU1RSVUNUXCIgLyogQ09OU1RSVUNUICovOlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBuZXcgcmF3VmFsdWUoLi4uYXJndW1lbnRMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSBwcm94eSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkVORFBPSU5UXCIgLyogRU5EUE9JTlQgKi86XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHBvcnQxLCBwb3J0MiB9ID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cG9zZShvYmosIHBvcnQyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSB0cmFuc2Zlcihwb3J0MSwgW3BvcnQxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlJFTEVBU0VcIiAvKiBSRUxFQVNFICovOlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVyblZhbHVlID0geyB2YWx1ZSwgW3Rocm93TWFya2VyXTogMCB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBQcm9taXNlLnJlc29sdmUocmV0dXJuVmFsdWUpXHJcbiAgICAgICAgICAgIC5jYXRjaCgodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWUsIFt0aHJvd01hcmtlcl06IDAgfTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigocmV0dXJuVmFsdWUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgW3dpcmVWYWx1ZSwgdHJhbnNmZXJhYmxlc10gPSB0b1dpcmVWYWx1ZShyZXR1cm5WYWx1ZSk7XHJcbiAgICAgICAgICAgIGVwLnBvc3RNZXNzYWdlKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgd2lyZVZhbHVlKSwgeyBpZCB9KSwgdHJhbnNmZXJhYmxlcyk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcIlJFTEVBU0VcIiAvKiBSRUxFQVNFICovKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBkZXRhY2ggYW5kIGRlYWN0aXZlIGFmdGVyIHNlbmRpbmcgcmVsZWFzZSByZXNwb25zZSBhYm92ZS5cclxuICAgICAgICAgICAgICAgIGVwLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgIGNsb3NlRW5kUG9pbnQoZXApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGlmIChlcC5zdGFydCkge1xyXG4gICAgICAgIGVwLnN0YXJ0KCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaXNNZXNzYWdlUG9ydChlbmRwb2ludCkge1xyXG4gICAgcmV0dXJuIGVuZHBvaW50LmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiTWVzc2FnZVBvcnRcIjtcclxufVxyXG5mdW5jdGlvbiBjbG9zZUVuZFBvaW50KGVuZHBvaW50KSB7XHJcbiAgICBpZiAoaXNNZXNzYWdlUG9ydChlbmRwb2ludCkpXHJcbiAgICAgICAgZW5kcG9pbnQuY2xvc2UoKTtcclxufVxyXG5mdW5jdGlvbiB3cmFwKGVwLCB0YXJnZXQpIHtcclxuICAgIHJldHVybiBjcmVhdGVQcm94eShlcCwgW10sIHRhcmdldCk7XHJcbn1cclxuZnVuY3Rpb24gdGhyb3dJZlByb3h5UmVsZWFzZWQoaXNSZWxlYXNlZCkge1xyXG4gICAgaWYgKGlzUmVsZWFzZWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcm94eSBoYXMgYmVlbiByZWxlYXNlZCBhbmQgaXMgbm90IHVzZWFibGVcIik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlUHJveHkoZXAsIHBhdGggPSBbXSwgdGFyZ2V0ID0gZnVuY3Rpb24gKCkgeyB9KSB7XHJcbiAgICBsZXQgaXNQcm94eVJlbGVhc2VkID0gZmFsc2U7XHJcbiAgICBjb25zdCBwcm94eSA9IG5ldyBQcm94eSh0YXJnZXQsIHtcclxuICAgICAgICBnZXQoX3RhcmdldCwgcHJvcCkge1xyXG4gICAgICAgICAgICB0aHJvd0lmUHJveHlSZWxlYXNlZChpc1Byb3h5UmVsZWFzZWQpO1xyXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gcmVsZWFzZVByb3h5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0UmVzcG9uc2VNZXNzYWdlKGVwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiUkVMRUFTRVwiIC8qIFJFTEVBU0UgKi8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IHBhdGgubWFwKChwKSA9PiBwLnRvU3RyaW5nKCkpLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZUVuZFBvaW50KGVwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNQcm94eVJlbGVhc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHByb3AgPT09IFwidGhlblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB0aGVuOiAoKSA9PiBwcm94eSB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHJlcXVlc3RSZXNwb25zZU1lc3NhZ2UoZXAsIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIkdFVFwiIC8qIEdFVCAqLyxcclxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBwYXRoLm1hcCgocCkgPT4gcC50b1N0cmluZygpKSxcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oZnJvbVdpcmVWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gci50aGVuLmJpbmQocik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVByb3h5KGVwLCBbLi4ucGF0aCwgcHJvcF0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0KF90YXJnZXQsIHByb3AsIHJhd1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRocm93SWZQcm94eVJlbGVhc2VkKGlzUHJveHlSZWxlYXNlZCk7XHJcbiAgICAgICAgICAgIC8vIEZJWE1FOiBFUzYgUHJveHkgSGFuZGxlciBgc2V0YCBtZXRob2RzIGFyZSBzdXBwb3NlZCB0byByZXR1cm4gYVxyXG4gICAgICAgICAgICAvLyBib29sZWFuLiBUbyBzaG93IGdvb2Qgd2lsbCwgd2UgcmV0dXJuIHRydWUgYXN5bmNocm9ub3VzbHkgwq9cXF8o44OEKV8vwq9cclxuICAgICAgICAgICAgY29uc3QgW3ZhbHVlLCB0cmFuc2ZlcmFibGVzXSA9IHRvV2lyZVZhbHVlKHJhd1ZhbHVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3RSZXNwb25zZU1lc3NhZ2UoZXAsIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiU0VUXCIgLyogU0VUICovLFxyXG4gICAgICAgICAgICAgICAgcGF0aDogWy4uLnBhdGgsIHByb3BdLm1hcCgocCkgPT4gcC50b1N0cmluZygpKSxcclxuICAgICAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgICAgICB9LCB0cmFuc2ZlcmFibGVzKS50aGVuKGZyb21XaXJlVmFsdWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXBwbHkoX3RhcmdldCwgX3RoaXNBcmcsIHJhd0FyZ3VtZW50TGlzdCkge1xyXG4gICAgICAgICAgICB0aHJvd0lmUHJveHlSZWxlYXNlZChpc1Byb3h5UmVsZWFzZWQpO1xyXG4gICAgICAgICAgICBjb25zdCBsYXN0ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAobGFzdCA9PT0gY3JlYXRlRW5kcG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0UmVzcG9uc2VNZXNzYWdlKGVwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJFTkRQT0lOVFwiIC8qIEVORFBPSU5UICovLFxyXG4gICAgICAgICAgICAgICAgfSkudGhlbihmcm9tV2lyZVZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBXZSBqdXN0IHByZXRlbmQgdGhhdCBgYmluZCgpYCBkaWRu4oCZdCBoYXBwZW4uXHJcbiAgICAgICAgICAgIGlmIChsYXN0ID09PSBcImJpbmRcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVByb3h5KGVwLCBwYXRoLnNsaWNlKDAsIC0xKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgW2FyZ3VtZW50TGlzdCwgdHJhbnNmZXJhYmxlc10gPSBwcm9jZXNzQXJndW1lbnRzKHJhd0FyZ3VtZW50TGlzdCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0UmVzcG9uc2VNZXNzYWdlKGVwLCB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcIkFQUExZXCIgLyogQVBQTFkgKi8sXHJcbiAgICAgICAgICAgICAgICBwYXRoOiBwYXRoLm1hcCgocCkgPT4gcC50b1N0cmluZygpKSxcclxuICAgICAgICAgICAgICAgIGFyZ3VtZW50TGlzdCxcclxuICAgICAgICAgICAgfSwgdHJhbnNmZXJhYmxlcykudGhlbihmcm9tV2lyZVZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnN0cnVjdChfdGFyZ2V0LCByYXdBcmd1bWVudExpc3QpIHtcclxuICAgICAgICAgICAgdGhyb3dJZlByb3h5UmVsZWFzZWQoaXNQcm94eVJlbGVhc2VkKTtcclxuICAgICAgICAgICAgY29uc3QgW2FyZ3VtZW50TGlzdCwgdHJhbnNmZXJhYmxlc10gPSBwcm9jZXNzQXJndW1lbnRzKHJhd0FyZ3VtZW50TGlzdCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0UmVzcG9uc2VNZXNzYWdlKGVwLCB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcIkNPTlNUUlVDVFwiIC8qIENPTlNUUlVDVCAqLyxcclxuICAgICAgICAgICAgICAgIHBhdGg6IHBhdGgubWFwKChwKSA9PiBwLnRvU3RyaW5nKCkpLFxyXG4gICAgICAgICAgICAgICAgYXJndW1lbnRMaXN0LFxyXG4gICAgICAgICAgICB9LCB0cmFuc2ZlcmFibGVzKS50aGVuKGZyb21XaXJlVmFsdWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBwcm94eTtcclxufVxyXG5mdW5jdGlvbiBteUZsYXQoYXJyKSB7XHJcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJyKTtcclxufVxyXG5mdW5jdGlvbiBwcm9jZXNzQXJndW1lbnRzKGFyZ3VtZW50TGlzdCkge1xyXG4gICAgY29uc3QgcHJvY2Vzc2VkID0gYXJndW1lbnRMaXN0Lm1hcCh0b1dpcmVWYWx1ZSk7XHJcbiAgICByZXR1cm4gW3Byb2Nlc3NlZC5tYXAoKHYpID0+IHZbMF0pLCBteUZsYXQocHJvY2Vzc2VkLm1hcCgodikgPT4gdlsxXSkpXTtcclxufVxyXG5jb25zdCB0cmFuc2ZlckNhY2hlID0gbmV3IFdlYWtNYXAoKTtcclxuZnVuY3Rpb24gdHJhbnNmZXIob2JqLCB0cmFuc2ZlcnMpIHtcclxuICAgIHRyYW5zZmVyQ2FjaGUuc2V0KG9iaiwgdHJhbnNmZXJzKTtcclxuICAgIHJldHVybiBvYmo7XHJcbn1cclxuZnVuY3Rpb24gcHJveHkob2JqKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmosIHsgW3Byb3h5TWFya2VyXTogdHJ1ZSB9KTtcclxufVxyXG5mdW5jdGlvbiB3aW5kb3dFbmRwb2ludCh3LCBjb250ZXh0ID0gc2VsZiwgdGFyZ2V0T3JpZ2luID0gXCIqXCIpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcG9zdE1lc3NhZ2U6IChtc2csIHRyYW5zZmVyYWJsZXMpID0+IHcucG9zdE1lc3NhZ2UobXNnLCB0YXJnZXRPcmlnaW4sIHRyYW5zZmVyYWJsZXMpLFxyXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGNvbnRleHQuYWRkRXZlbnRMaXN0ZW5lci5iaW5kKGNvbnRleHQpLFxyXG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGNvbnRleHQucmVtb3ZlRXZlbnRMaXN0ZW5lci5iaW5kKGNvbnRleHQpLFxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB0b1dpcmVWYWx1ZSh2YWx1ZSkge1xyXG4gICAgZm9yIChjb25zdCBbbmFtZSwgaGFuZGxlcl0gb2YgdHJhbnNmZXJIYW5kbGVycykge1xyXG4gICAgICAgIGlmIChoYW5kbGVyLmNhbkhhbmRsZSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgY29uc3QgW3NlcmlhbGl6ZWRWYWx1ZSwgdHJhbnNmZXJhYmxlc10gPSBoYW5kbGVyLnNlcmlhbGl6ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJIQU5ETEVSXCIgLyogSEFORExFUiAqLyxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZXJpYWxpemVkVmFsdWUsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmZXJhYmxlcyxcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdHlwZTogXCJSQVdcIiAvKiBSQVcgKi8sXHJcbiAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdHJhbnNmZXJDYWNoZS5nZXQodmFsdWUpIHx8IFtdLFxyXG4gICAgXTtcclxufVxyXG5mdW5jdGlvbiBmcm9tV2lyZVZhbHVlKHZhbHVlKSB7XHJcbiAgICBzd2l0Y2ggKHZhbHVlLnR5cGUpIHtcclxuICAgICAgICBjYXNlIFwiSEFORExFUlwiIC8qIEhBTkRMRVIgKi86XHJcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2ZlckhhbmRsZXJzLmdldCh2YWx1ZS5uYW1lKS5kZXNlcmlhbGl6ZSh2YWx1ZS52YWx1ZSk7XHJcbiAgICAgICAgY2FzZSBcIlJBV1wiIC8qIFJBVyAqLzpcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnZhbHVlO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlcXVlc3RSZXNwb25zZU1lc3NhZ2UoZXAsIG1zZywgdHJhbnNmZXJzKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICBjb25zdCBpZCA9IGdlbmVyYXRlVVVJRCgpO1xyXG4gICAgICAgIGVwLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGZ1bmN0aW9uIGwoZXYpIHtcclxuICAgICAgICAgICAgaWYgKCFldi5kYXRhIHx8ICFldi5kYXRhLmlkIHx8IGV2LmRhdGEuaWQgIT09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXAucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgbCk7XHJcbiAgICAgICAgICAgIHJlc29sdmUoZXYuZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGVwLnN0YXJ0KSB7XHJcbiAgICAgICAgICAgIGVwLnN0YXJ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVwLnBvc3RNZXNzYWdlKE9iamVjdC5hc3NpZ24oeyBpZCB9LCBtc2cpLCB0cmFuc2ZlcnMpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKCkge1xyXG4gICAgcmV0dXJuIG5ldyBBcnJheSg0KVxyXG4gICAgICAgIC5maWxsKDApXHJcbiAgICAgICAgLm1hcCgoKSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikudG9TdHJpbmcoMTYpKVxyXG4gICAgICAgIC5qb2luKFwiLVwiKTtcclxufVxuXG5leHBvcnQgeyBjcmVhdGVFbmRwb2ludCwgZXhwb3NlLCBwcm94eSwgcHJveHlNYXJrZXIsIHJlbGVhc2VQcm94eSwgdHJhbnNmZXIsIHRyYW5zZmVySGFuZGxlcnMsIHdpbmRvd0VuZHBvaW50LCB3cmFwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21saW5rLm1qcy5tYXBcbiIsIlxuaW1wb3J0ICogYXMgQ29tbGluayBmcm9tICdjb21saW5rJztcblxuaW1wb3J0IHsgUGxvdExheWVyV29ya2VyIH0gZnJvbSAnLi9QbG90TGF5ZXIud29ya2VyJztcbmltcG9ydCB7IE1hcFR5cGUgfSBmcm9tICcuL01hcCc7XG5cbmNvbnN0IHdvcmtlciA9IG5ldyBXb3JrZXIobmV3IFVSTCgnLi9QbG90TGF5ZXIud29ya2VyJywgaW1wb3J0Lm1ldGEudXJsKSk7XG5jb25zdCBsYXllcl93b3JrZXIgPSBDb21saW5rLndyYXA8UGxvdExheWVyV29ya2VyPih3b3JrZXIpO1xuXG5hYnN0cmFjdCBjbGFzcyBQbG90Q29tcG9uZW50IHtcbiAgICBhYnN0cmFjdCBvbkFkZChtYXA6IE1hcFR5cGUsIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIDogUHJvbWlzZTx2b2lkPjtcbiAgICBhYnN0cmFjdCByZW5kZXIoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgbWF0cml4OiBudW1iZXJbXSkgOiB2b2lkO1xufVxuXG5leHBvcnQgeyBQbG90Q29tcG9uZW50LCBsYXllcl93b3JrZXIgfTsiLCJcbmNvbnN0IGhleDJyZ2JhID0gKGhleHN0cjogc3RyaW5nLCBvdXRfdHlwZT86IHN0cmluZykgOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSA9PiB7XG4gICAgb3V0X3R5cGUgPSBvdXRfdHlwZSA9PT0gdW5kZWZpbmVkID8gJ2Zsb2F0JyA6IG91dF90eXBlO1xuXG4gICAgY29uc3QgbWF0Y2ggPSBoZXhzdHIubWF0Y2goLyMoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pPy9pKTtcbiAgICBpZiAobWF0Y2ggPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgYEdvdCAnJHtoZXhzdHJ9JyBpbiBoZXgycmdiYSwgd2hpY2ggZG9lcyBub3QgbG9vayBsaWtlIGEgaGV4IGNvbG9yYDtcbiAgICB9XG5cbiAgICBsZXQgcmdiYSA9IG1hdGNoLnNsaWNlKDEpLmZpbHRlcihjID0+IGMgIT09IHVuZGVmaW5lZCkubWFwKGMgPT4gcGFyc2VJbnQoYywgMTYpKTtcblxuICAgIGlmIChvdXRfdHlwZSA9PSAnZmxvYXQnKSB7XG4gICAgICAgIHJnYmEgPSByZ2JhLm1hcChjID0+IGMgLyAyNTUpO1xuICAgIH1cblxuICAgIHJldHVybiByZ2JhWzNdID09PSB1bmRlZmluZWQgPyBbcmdiYVswXSwgcmdiYVsxXSwgcmdiYVsyXSwgMV0gOiBbcmdiYVswXSwgcmdiYVsxXSwgcmdiYVsyXSwgcmdiYVszXV07XG59XG5cbmNvbnN0IHJnYmEyaGV4ID0gKHJnYmE6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdLCBpbl90eXBlPzogc3RyaW5nKSA6IHN0cmluZyA9PiB7XG4gICAgaW5fdHlwZSA9IGluX3R5cGUgPT09IHVuZGVmaW5lZCA/ICdmbG9hdCcgOiBpbl90eXBlO1xuXG4gICAgbGV0IHJnYmFfID0gcmdiYSBhcyBudW1iZXJbXTtcbiAgICBpZiAoaW5fdHlwZSA9PSAnZmxvYXQnKSB7XG4gICAgICAgIHJnYmFfID0gcmdiYV8ubWFwKGMgPT4gTWF0aC5yb3VuZChjICogMjU1KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICcjJyArIHJnYmFfLm1hcChjID0+IGMudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykudG9VcHBlckNhc2UoKSkuam9pbignJyk7XG59XG5cbmNvbnN0IGhleDJyZ2IgPSAoaGV4c3RyOiBzdHJpbmcsIG91dF90eXBlPzogc3RyaW5nKSA6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSA9PiB7XG4gICAgY29uc3RbciwgZywgYiwgYV0gPSBoZXgycmdiYShoZXhzdHIsIG91dF90eXBlKTtcbiAgICByZXR1cm4gW3IsIGcsIGJdO1xufVxuXG5jb25zdCByZ2IyaGV4ID0gKHJnYjogW251bWJlciwgbnVtYmVyLCBudW1iZXJdLCBpbl90eXBlPzogc3RyaW5nKSA6IHN0cmluZyA9PiB7XG4gICAgY29uc3QgW3IsIGcsIGJdID0gcmdiO1xuICAgIHJldHVybiByZ2JhMmhleChbciwgZywgYiwgMF0sIGluX3R5cGUpLnNsaWNlKDAsIC0yKTtcbn1cblxuY29uc3QgcmdiMmhzdiA9IChyZ2I6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSkgOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0gPT4ge1xuICAgIGNvbnN0IFtyLCBnLCBiXSA9IHJnYjtcblxuICAgIGNvbnN0IENtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICBjb25zdCBDbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgY29uc3QgRGVsdGEgPSBDbWF4IC0gQ21pbjtcbiAgICBcbiAgICBsZXQgSDogbnVtYmVyO1xuICAgIGlmIChEZWx0YSA9PSAwKSB7XG4gICAgICAgIEggPSAwO1xuICAgIH1cbiAgICBlbHNlIGlmIChDbWF4ID09IHIpIHtcbiAgICAgICAgSCA9IDYwICogKChnIC0gYikgLyBEZWx0YSkgJSA2O1xuICAgIH1cbiAgICBlbHNlIGlmIChDbWF4ID09IGcpIHtcbiAgICAgICAgSCA9IDYwICogKChiIC0gcikgLyBEZWx0YSArIDIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChDbWF4ID09IGIpIHtcbiAgICAgICAgSCA9IDYwICogKChyIC0gZykgLyBEZWx0YSArIDQpO1xuICAgIH1cblxuICAgIGxldCBTID0gQ21heCA9PSAwID8gMCA6IERlbHRhIC8gQ21heDtcbiAgICBsZXQgViA9IENtYXg7XG5cbiAgICByZXR1cm4gW0gsIFMsIFZdO1xufVxuXG5jb25zdCBoc3YycmdiID0gKGhzdjogW251bWJlciwgbnVtYmVyLCBudW1iZXJdKSA6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSA9PiB7XG4gICAgY29uc3QgW0gsIFMsIFZdID0gaHN2O1xuXG4gICAgY29uc3QgQyA9IFYgKiBTO1xuICAgIGNvbnN0IFggPSBDICogKDEgLSBNYXRoLmFicyhIIC8gNjAgJSAyIC0gMSkpO1xuICAgIGNvbnN0IG0gPSBWIC0gQztcblxuICAgIGxldCByX3ByaW1lLCBnX3ByaW1lLCBiX3ByaW1lO1xuICAgIGlmICgwIDw9IEggJiYgSCA8IDYwKSB7XG4gICAgICAgIHJfcHJpbWUgPSBDOyBnX3ByaW1lID0gWCwgYl9wcmltZSA9IDA7XG4gICAgfVxuICAgIGVsc2UgaWYgKDYwIDw9IEggJiYgSCA8IDEyMCkge1xuICAgICAgICByX3ByaW1lID0gWDsgZ19wcmltZSA9IEMsIGJfcHJpbWUgPSAwO1xuICAgIH1cbiAgICBlbHNlIGlmICgxMjAgPD0gSCAmJiBIIDwgMTgwKSB7XG4gICAgICAgIHJfcHJpbWUgPSAwOyBnX3ByaW1lID0gQywgYl9wcmltZSA9IFg7XG4gICAgfVxuICAgIGVsc2UgaWYgKDE4MCA8PSBIICYmIEggPCAyNDApIHtcbiAgICAgICAgcl9wcmltZSA9IDA7IGdfcHJpbWUgPSBYLCBiX3ByaW1lID0gQztcbiAgICB9XG4gICAgZWxzZSBpZiAoMjQwIDw9IEggJiYgSCA8IDMwMCkge1xuICAgICAgICByX3ByaW1lID0gWDsgZ19wcmltZSA9IDAsIGJfcHJpbWUgPSBDO1xuICAgIH1cbiAgICBlbHNlIGlmICgzMDAgPD0gSCAmJiBIIDwgMzYwKSB7XG4gICAgICAgIHJfcHJpbWUgPSBDOyBnX3ByaW1lID0gMCwgYl9wcmltZSA9IFg7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtyX3ByaW1lICsgbSwgZ19wcmltZSArIG0sIGJfcHJpbWUgKyBtXTtcbn1cblxuZnVuY3Rpb24gZ2V0TWluWm9vbShqbGF0OiBudW1iZXIsIGlsb246IG51bWJlciwgdGhpbl9mYWNfYmFzZTogbnVtYmVyKSB7XG4gICAgY29uc3Qgem9vbV9iYXNlID0gMTtcblxuICAgIGxldCB6b29tID0gem9vbV9iYXNlO1xuICAgIGxldCB0aGluX2ZhYyA9IHRoaW5fZmFjX2Jhc2U7XG5cbiAgICB3aGlsZSAoKChqbGF0ICUgdGhpbl9mYWMpICE9IDApIHx8ICgoaWxvbiAlIHRoaW5fZmFjKSAhPSAwKSkge1xuICAgICAgICB6b29tICs9IDE7XG4gICAgICAgIHRoaW5fZmFjIC89IDI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHpvb207XG59XG5cbmZ1bmN0aW9uKiB6aXAoLi4uYXJnczogYW55W10pIHtcblx0Y29uc3QgaXRlcmF0b3JzID0gYXJncy5tYXAoeCA9PiB4W1N5bWJvbC5pdGVyYXRvcl0oKSk7XG5cdHdoaWxlICh0cnVlKSB7XG5cdFx0Y29uc3QgY3VycmVudCA9IGl0ZXJhdG9ycy5tYXAoeCA9PiB4Lm5leHQoKSk7XG5cdFx0aWYgKGN1cnJlbnQuc29tZSh4ID0+IHguZG9uZSkpIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHR5aWVsZCBjdXJyZW50Lm1hcCh4ID0+IHgudmFsdWUpO1xuXHR9XG59XG5cbmV4cG9ydCB7aGV4MnJnYmEsIHJnYmEyaGV4LCBoZXgycmdiLCByZ2IyaGV4LCByZ2IyaHN2LCBoc3YycmdiLCB6aXAsIGdldE1pblpvb219OyIsIlxuLyoqXG4gKiBAbW9kdWxlIHdnbC9XZWJHTEJ1ZmZlclxuICogTW9kdWxlIGNvbnRhaW5pbmcgYSBoZWxwZXIgY2xhc3MgZm9yIFdlYkdMIGRhdGEgYnVmZmVyc1xuICovXG5cbi8qKiBBIGNsYXNzIHJlcHJlc2VudGluZyBhIFdlYkdMIGRhdGEgYnVmZmVyICovXG5jbGFzcyBXR0xCdWZmZXIge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICByZWFkb25seSBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHJlYWRvbmx5IG5fY29vcmRzX3Blcl92ZXJ0OiBudW1iZXI7XG5cbiAgICAvKiogQGludGVybmFsICovXG4gICAgcmVhZG9ubHkgZHR5cGU6IG51bWJlcjtcblxuICAgIHJlYWRvbmx5IG5fdmVydHM6IG51bWJlcjtcbiAgICByZWFkb25seSBkcmF3X21vZGU6IEdMZW51bTtcblxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICByZWFkb25seSBidWZmZXI6IFdlYkdMQnVmZmVyO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgV2ViR0wgYnVmZmVyIGFuZCBwdXQgc29tZSBkYXRhIGluIGl0XG4gICAgICogQHBhcmFtIGdsICAgICAgICAgICAgICAgICAtIFRoZSBXZWJHTCByZW5kZXJpbmcgY29udGV4dFxuICAgICAqIEBwYXJhbSB2ZXJ0cyAgICAgICAgICAgICAgLSBUaGUgdmVydGV4IGRhdGEgdG8gdXNlIGZvciB0aGlzIGJ1ZmZlclxuICAgICAqIEBwYXJhbSBuX2Nvb3Jkc19wZXJfdmVydCAgLSBUaGUgbnVtYmVyIG9mIGNvb3JkaW5hdGVzIGZvciBlYWNoIHZlcnRleCBpbiB0aGUgZGF0YSBidWZmZXJcbiAgICAgKiBAcGFyYW0gZHJhd19tb2RlICAgICAgICAgIC0gVGhlIGRyYXcgbW9kZSB0byB1c2UgZm9yIHRoaXMgYnVmZmVyLiBTaG91bGQgYmUgb25lIG9mIGdsLlRSSUFOR0xFX1NUUklQLCBldGMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdmVydHM6IEZsb2F0MzJBcnJheSwgbl9jb29yZHNfcGVyX3ZlcnQ6IG51bWJlciwgZHJhd19tb2RlOiBHTGVudW0pIHtcbiAgICAgICAgY29uc3QgRFRZUEVTOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge1xuICAgICAgICAgICAgJ0Zsb2F0MzJBcnJheSc6IGdsLkZMT0FULFxuICAgICAgICAgICAgJ1VpbnQ4QXJyYXknOiBnbC5VTlNJR05FRF9CWVRFLFxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLm5fY29vcmRzX3Blcl92ZXJ0ID0gbl9jb29yZHNfcGVyX3ZlcnQ7XG4gICAgICAgIHRoaXMuZHR5cGUgPSBEVFlQRVNbdmVydHMuY29uc3RydWN0b3IubmFtZV07XG5cbiAgICAgICAgdGhpcy5uX3ZlcnRzID0gdmVydHMubGVuZ3RoIC8gbl9jb29yZHNfcGVyX3ZlcnQ7XG4gICAgICAgIHRoaXMuZHJhd19tb2RlID0gZHJhd19tb2RlO1xuXG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpXG4gICAgICAgIGlmIChidWZmZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IFwiQ291bGQgbm90IGNyZWF0ZSBXZWJHTCBidWZmZXJcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5idWZmZXIpO1xuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgdmVydHMsIGdsLlNUQVRJQ19EUkFXKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCaW5kIHRoaXMgYnVmZmVyIHRvIGEgbG9jYXRpb24gaW4gYSBzaGFkZXIgcHJvZ3JhbVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSBwcm9nX2F0dHJfbG9jYXRpb24gLSBUaGUgbG9jYXRpb24gb2YgdGhlIHZhcmlhYmxlIGluIHRoZSBzaGFkZXIgcHJvZ3JhbSAocmV0dXJuZWQgZnJvbSBnbC5nZXRBdHRyaWJMb2NhdGlvbigpKVxuICAgICAqL1xuICAgIGJpbmRUb1Byb2dyYW0ocHJvZ19hdHRyX2xvY2F0aW9uOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLmJ1ZmZlcik7XG4gICAgICAgIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkocHJvZ19hdHRyX2xvY2F0aW9uKTtcbiAgICAgICAgdGhpcy5nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHByb2dfYXR0cl9sb2NhdGlvbiwgdGhpcy5uX2Nvb3Jkc19wZXJfdmVydCwgdGhpcy5kdHlwZSwgZmFsc2UsIDAsIDApO1xuICAgIH1cbn1cblxuZXhwb3J0IHtXR0xCdWZmZXJ9OyIsIlxuLyoqXG4gKiBAbW9kdWxlIHdnbC9XZWJHTFRleHR1cmVcbiAqIEEgbW9kdWxlIGNvbnRhaW5pbmcgYSBoZWxwZXIgY2xhc3MgZm9yIFdlYkdMIHRleHR1cmVzXG4gKi9cblxuaW50ZXJmYWNlIFdHTFRleHR1cmVTcGVjIHtcbiAgICBmb3JtYXQ6IEdMZW51bTtcbiAgICB0eXBlOiBHTGVudW07XG4gICAgd2lkdGg/OiBudW1iZXI7XG4gICAgaGVpZ2h0PzogbnVtYmVyO1xuICAgIG1hZ19maWx0ZXI/OiBHTGVudW07XG4gICAgaW1hZ2U6IGFueTtcbn1cblxuLyoqIENsYXNzIHJlcHJlc2VudGluZyBhIFdlYkdMIHRleHR1cmUgKi9cbmNsYXNzIFdHTFRleHR1cmUge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICByZWFkb25seSBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHJlYWRvbmx5IHRleHR1cmU6IFdlYkdMVGV4dHVyZTtcblxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICB0ZXhfbnVtOiBudW1iZXIgfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIGdsICAgICAgICAgICAgICAgLSBUaGUgV2ViR0wgcmVuZGVyaW5nIGNvbnRleHRcbiAgICAgKiBAcGFyYW0gaW1hZ2UgICAgICAgICAgICAtIFRoZSBzcGVjaWZpY2F0aW9uIGZvciB0aGUgaW1hZ2VcbiAgICAgKiBAcGFyYW0gaW1hZ2UuZm9ybWF0ICAgICAtIFRoZSBmb3JtYXQgZm9yIHRoZSBpbWFnZSAoZS5nLiwgd2hpY2ggY29sb3IgY2hhbm5lbHMgYXJlIHByZXNlbnQ/KS4gU2hvdWxkIGJlIG9uZSBvZiBnbC5SR0JBLCBnbC5SR0IsIGV0Yy5cbiAgICAgKiBAcGFyYW0gaW1hZ2UudHlwZSAgICAgICAtIFRoZSBkYXRhIHR5cGUgZm9yIHRoZSBpbWFnZS4gU2hvdWxkIGJlIG9uZSBvZiBnbC5GTE9BVCwgZ2wuVU5TSUdORURfQllURSwgZXRjLlxuICAgICAqIEBwYXJhbSBpbWFnZS53aWR0aCAgICAgIC0gVGhlIHdpZHRoIG9mIHRoZSB0ZXh0dXJlXG4gICAgICogQHBhcmFtIGltYWdlLmhlaWdodCAgICAgLSBUaGUgaGVpZ2h0IG9mIHRoZSB0ZXh0dXJlXG4gICAgICogQHBhcmFtIGltYWdlLm1hZ19maWx0ZXIgLSBUaGUgbWFnbmlmaWNhdGlvbiBmaWx0ZXIgdG8gdXNlIGZvciB0aGUgdGV4dHVyZS4gU2hvdWxkIGJlIG9uZSBvZiBnbC5MSU5FQVIsIGdsLk5FQVJFU1QsIGV0Yy5cbiAgICAgKiBAcGFyYW0gaW1hZ2UuaW1hZ2UgICAgICAtIFRoZSBpbWFnZSB0byB1c2UgZm9yIHRoZSB0ZXh0dXJlLiBDYW4gYmUgbnVsbCB0byBhbGxvY2F0ZSBzcGFjZSB3aXRob3V0IGZpbGxpbmcgaXQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgaW1hZ2U6IFdHTFRleHR1cmVTcGVjKSB7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcblxuICAgICAgICBjb25zdCB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICAgICAgICBpZiAodGV4dHVyZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgXCJDb3VsZCBub3QgY3JlYXRlIFdlYkdMIHRleHR1cmVcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudGV4dHVyZSA9IHRleHR1cmU7XG4gICAgICAgIHRoaXMudGV4X251bSA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5zZXRJbWFnZURhdGEoaW1hZ2UpO1xuXG4gICAgICAgIGNvbnN0IG1hZ19maWx0ZXIgPSBpbWFnZVsnbWFnX2ZpbHRlciddID09PSB1bmRlZmluZWQgPyBnbC5MSU5FQVIgOiBpbWFnZVsnbWFnX2ZpbHRlciddO1xuXG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLkxJTkVBUik7XG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBtYWdfZmlsdGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgaW1hZ2UgZGF0YSBpbiB0aGlzIHRleHR1cmVcbiAgICAgKiBAcGFyYW0gaW1hZ2UgICAgICAgIC0gVGhlIHNwZWNpZmljYXRpb24gZm9yIHRoZSBpbWFnZVxuICAgICAqIEBwYXJhbSBpbWFnZS5mb3JtYXQgLSBUaGUgZm9ybWF0IGZvciB0aGUgaW1hZ2UgKGUuZy4sIHdoaWNoIGNvbG9yIGNoYW5uZWxzIGFyZSBwcmVzZW50PykuIFNob3VsZCBiZSBvbmUgb2YgZ2wuUkdCQSwgZ2wuUkdCLCBldGMuXG4gICAgICogQHBhcmFtIGltYWdlLnR5cGUgICAtIFRoZSBkYXRhIHR5cGUgZm9yIHRoZSBpbWFnZS4gU2hvdWxkIGJlIG9uZSBvZiBnbC5GTE9BVCwgZ2wuVU5TSUdORURfQllURSwgZXRjLlxuICAgICAqIEBwYXJhbSBpbWFnZS53aWR0aCAgLSBUaGUgd2lkdGggb2YgdGhlIHRleHR1cmVcbiAgICAgKiBAcGFyYW0gaW1hZ2UuaGVpZ2h0IC0gVGhlIGhlaWdodCBvZiB0aGUgdGV4dHVyZVxuICAgICAqIEBwYXJhbSBpbWFnZS5pbWFnZSAgLSBUaGUgaW1hZ2UgdG8gdXNlIGZvciB0aGUgdGV4dHVyZS4gQ2FuIGJlIG51bGwgdG8gYWxsb2NhdGUgc3BhY2Ugd2l0aG91dCBmaWxsaW5nIGl0LlxuICAgICAqL1xuICAgIHNldEltYWdlRGF0YShpbWFnZTogV0dMVGV4dHVyZVNwZWMpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuXG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMudGV4dHVyZSk7XG5cbiAgICAgICAgaWYgKGltYWdlWyd3aWR0aCddICE9PSB1bmRlZmluZWQgJiYgaW1hZ2VbJ2hlaWdodCddICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgaW1hZ2VbJ2Zvcm1hdCddLCBpbWFnZVsnd2lkdGgnXSwgaW1hZ2VbJ2hlaWdodCddLCAwLCBcbiAgICAgICAgICAgICAgICBpbWFnZVsnZm9ybWF0J10sIGltYWdlWyd0eXBlJ10sIGltYWdlWydpbWFnZSddKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgaW1hZ2VbJ2Zvcm1hdCddLCBcbiAgICAgICAgICAgICAgICBpbWFnZVsnZm9ybWF0J10sIGltYWdlWyd0eXBlJ10sIGltYWdlWydpbWFnZSddKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJpbmQgdGhpcyB0ZXh0dXJlIHRvIGEgbG9jYXRpb24gaW4gYSBzaGFkZXIgcHJvZ3JhbVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSBwcm9nX3VuaV9sb2NhdGlvbiAtIFRoZSBsb2NhdGlvbiBvZiB0aGUgc2FtcGxlciB1bmlmb3JtIHZhbHVlIChyZXR1cm5lZCBmcm9tIGdsLmdldFVuaWZvcm0oKSkgaW4gdGhlIHNoYWRlciBwcm9ncmFtLlxuICAgICAqIEBwYXJhbSBnbF90ZXhfbnVtICAgICAgICAtIFRoZSB0ZXh0dXJlIG51bWJlciB0byBiaW5kIHRoaXMgdGV4dHVyZSB0by5cbiAgICAgKi9cbiAgICBiaW5kVG9Qcm9ncmFtKHByb2dfdW5pX2xvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbiwgZ2xfdGV4X251bTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYWN0aXZhdGUoZ2xfdGV4X251bSk7XG4gICAgICAgIHRoaXMuZ2wudW5pZm9ybTFpKHByb2dfdW5pX2xvY2F0aW9uLCBnbF90ZXhfbnVtKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCaW5kIHRoaXMgdGV4dHVyZSB0byBhIGdpdmVuIHRleHR1cmUgbnVtYmVyXG4gICAgICogQHBhcmFtIGdsX3RleF9udW0gLSBUaGUgdGV4dHVyZSBudW1iZXIgdG8gYmluZCB0aGlzIHRleHR1cmUgdG8uXG4gICAgICovXG4gICAgYWN0aXZhdGUoZ2xfdGV4X251bTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMudGV4X251bSA9IGdsX3RleF9udW07XG4gICAgICAgIHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUwICsgdGhpcy50ZXhfbnVtKTtcbiAgICAgICAgdGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRoaXMudGV4dHVyZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVW5iaW5kIHRoaXMgdGV4dHVyZSBmcm9tIHRoZSB0ZXh0dXJlIG51bWJlciBpdCB3YXMgbW9zdCByZWNlbnRseSBib3VuZCB0by5cbiAgICAgKi9cbiAgICBkZWFjdGl2YXRlKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy50ZXhfbnVtID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCArIHRoaXMudGV4X251bSk7XG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCBudWxsKTtcbiAgICAgICAgdGhpcy50ZXhfbnVtID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgdGhpcyB0ZXh0dXJlLlxuICAgICAqL1xuICAgIGRlbGV0ZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5nbC5kZWxldGVUZXh0dXJlKHRoaXMudGV4dHVyZSk7XG4gICAgICAgIHRoaXMudGV4X251bSA9IG51bGw7XG4gICAgfVxufVxuXG5leHBvcnQge1dHTFRleHR1cmV9O1xuZXhwb3J0IHR5cGUge1dHTFRleHR1cmVTcGVjfSIsIlxuaW1wb3J0IHsgV0dMQnVmZmVyIH0gZnJvbSBcIi4vV0dMQnVmZmVyXCI7XG5pbXBvcnQgeyBXR0xUZXh0dXJlIH0gZnJvbSBcIi4vV0dMVGV4dHVyZVwiO1xuXG4vKipcbiAqIEBtb2R1bGUgd2dsL1dlYkdMUHJvZ3JhbVxuICogTW9kdWxlIGNvbnRhaW5pbmcgYSBoZWxwZXIgY2xhc3MgZm9yIFdlYkdMIHByb2dyYW1zXG4gKi9cblxuLyoqXG4gKiBDb21waWxlIGFuZCBsaW5rIGEgc2hhZGVyIHByb2dyYW1cbiAqIEBwYXJhbSBnbCAgICAgICAgICAgICAgICAtIFRoZSBXZWJHTCByZW5kZXJpbmcgY29udGV4dFxuICogQHBhcmFtIHZlcnRleF9zaGFkZXJfc3JjIC0gVGhlIHNvdXJjZSBjb2RlIGZvciB0aGUgdmVydGV4IHNoYWRlclxuICogQHBhcmFtIGZyYWdfc2hhZGVyX3NyYyAgIC0gVGhlIHNvdXJjZSBjb2RlIGZvciB0aGUgZnJhZ21lbnQgc2hhZGVyXG4gKiBAcmV0dXJucyAgICAgICAgICAgICAgICAgICBBIGNvbXBpbGVkIGFuZCBsaW5rZWQgV2ViR0wgcHJvZ3JhbVxuICovXG5jb25zdCBjb21waWxlQW5kTGlua1NoYWRlcnMgPSAoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdmVydGV4X3NoYWRlcl9zcmM6IHN0cmluZywgZnJhZ19zaGFkZXJfc3JjOiBzdHJpbmcpOiBXZWJHTFByb2dyYW0gPT4ge1xuICAgIC8vIGNyZWF0ZSBhIHZlcnRleCBzaGFkZXJcbiAgICBjb25zdCB2ZXJ0ZXhTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuVkVSVEVYX1NIQURFUik7XG4gICAgaWYgKHZlcnRleFNoYWRlciA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBcIkNvdWxkIG5vdCBjcmVhdGUgdmVydGV4IHNoYWRlclwiO1xuICAgIH1cblxuICAgIGdsLnNoYWRlclNvdXJjZSh2ZXJ0ZXhTaGFkZXIsIHZlcnRleF9zaGFkZXJfc3JjKTtcbiAgICBnbC5jb21waWxlU2hhZGVyKHZlcnRleFNoYWRlcik7XG5cbiAgICBjb25zdCB2ZXJ0ZXhDb21waWxlZCA9IGdsLmdldFNoYWRlclBhcmFtZXRlcih2ZXJ0ZXhTaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKTtcblxuICAgIGlmICghdmVydGV4Q29tcGlsZWQpIHtcbiAgICAgICAgY29uc3QgY29tcGlsYXRpb25Mb2cgPSBnbC5nZXRTaGFkZXJJbmZvTG9nKHZlcnRleFNoYWRlcik7XG4gICAgICAgIGNvbnNvbGUubG9nKCdWZXJ0ZXggc2hhZGVyIGNvbXBpbGVyIGxvZzogJyArIGNvbXBpbGF0aW9uTG9nKTtcbiAgICB9XG4gICAgXG4gICAgLy8gY3JlYXRlIGEgZnJhZ21lbnQgc2hhZGVyXG4gICAgY29uc3QgZnJhZ21lbnRTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSKTtcbiAgICBpZiAoZnJhZ21lbnRTaGFkZXIgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgXCJDb3VsZCBub3QgY3JlYXRlIGZyYWdtZW50IHNoYWRlclwiO1xuICAgIH1cblxuICAgIGdsLnNoYWRlclNvdXJjZShmcmFnbWVudFNoYWRlciwgZnJhZ19zaGFkZXJfc3JjKTtcbiAgICBnbC5jb21waWxlU2hhZGVyKGZyYWdtZW50U2hhZGVyKTtcblxuICAgIGNvbnN0IGZyYWdtZW50Q29tcGlsZWQgPSBnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoZnJhZ21lbnRTaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKTtcblxuICAgIGlmICghZnJhZ21lbnRDb21waWxlZCkge1xuICAgICAgICBjb25zdCBjb21waWxhdGlvbkxvZyA9IGdsLmdldFNoYWRlckluZm9Mb2coZnJhZ21lbnRTaGFkZXIpO1xuICAgICAgICBjb25zb2xlLmxvZygnRnJhZ21lbnQgc2hhZGVyIGNvbXBpbGVyIGxvZzogJyArIGNvbXBpbGF0aW9uTG9nKTtcbiAgICB9XG5cbiAgICAvLyBsaW5rIHRoZSB0d28gc2hhZGVycyBpbnRvIGEgV2ViR0wgcHJvZ3JhbVxuICAgIGNvbnN0IHByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG4gICAgaWYgKHByb2dyYW0gPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgXCJDb3VsZCBub3QgY3JlYXRlIHNoYWRlciBwcm9ncmFtXCI7XG4gICAgfVxuXG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRleFNoYWRlcik7XG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcbiAgICBnbC5saW5rUHJvZ3JhbShwcm9ncmFtKTtcblxuICAgIGNvbnN0IGxpbmtlZCA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuTElOS19TVEFUVVMpO1xuXG4gICAgaWYgKCFsaW5rZWQpIHtcbiAgICAgICAgY29uc3QgbGlua0xvZyA9IGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pO1xuICAgICAgICBjb25zb2xlLmxvZygnTGlua2VyIGxvZzogJyArIGxpbmtMb2cpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9ncmFtO1xufVxuXG4vKiogQ2xhc3MgcmVwcmVzZW50aW5nIGEgV2ViR0wgc2hhZGVyIHByb2dyYW0gKi9cbmNsYXNzIFdHTFByb2dyYW0ge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICByZWFkb25seSBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHJlYWRvbmx5IHByb2c6IFdlYkdMUHJvZ3JhbTtcblxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICByZWFkb25seSBhdHRyaWJ1dGVzOiBSZWNvcmQ8c3RyaW5nLCB7IHR5cGU6IHN0cmluZzsgbG9jYXRpb246IG51bWJlcjsgfT5cblxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICByZWFkb25seSB1bmlmb3JtczogUmVjb3JkPHN0cmluZywgeyB0eXBlOiBzdHJpbmc7IGxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgfT5cblxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBuX3ZlcnRzOiBudW1iZXIgfCBudWxsO1xuXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGRyYXdfbW9kZTogbnVtYmVyIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbmQgY29tcGlsZSBhIHNoYWRlciBwcm9ncmFtIGZyb20gc291cmNlXG4gICAgICogQHBhcmFtIGdsICAgICAgICAgICAgICAgICAgLSBUaGUgV2ViR0wgcmVuZGVyaW5nIGNvbnRleHRcbiAgICAgKiBAcGFyYW0gdmVydGV4X3NoYWRlcl9zcmMgICAtIFRoZSB2ZXJ0ZXggc2hhZGVyIHNvdXJjZSBjb2RlXG4gICAgICogQHBhcmFtIGZyYWdtZW50X3NoYWRlcl9zcmMgLSBUaGUgZnJhZ21lbnQgc2hhZGVyIHNvdXJjZSBjb2RlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdmVydGV4X3NoYWRlcl9zcmM6IHN0cmluZywgZnJhZ21lbnRfc2hhZGVyX3NyYzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy5wcm9nID0gY29tcGlsZUFuZExpbmtTaGFkZXJzKGdsLCB2ZXJ0ZXhfc2hhZGVyX3NyYywgZnJhZ21lbnRfc2hhZGVyX3NyYyk7XG5cbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSB7fTtcblxuICAgICAgICB0aGlzLm5fdmVydHMgPSBudWxsO1xuICAgICAgICB0aGlzLmRyYXdfbW9kZSA9IG51bGw7XG5cbiAgICAgICAgY29uc3QgcmVtb3ZlX2NvbW1lbnRzID0gKGxpbmU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29tbWVudF9pZHggPSBsaW5lLmluZGV4T2YoJy8vJyk7XG4gICAgICAgICAgICBpZiAoY29tbWVudF9pZHggPj0gMCkge1xuICAgICAgICAgICAgICAgIGxpbmUgPSBsaW5lLnNsaWNlKDAsIGNvbW1lbnRfaWR4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsaW5lO1xuICAgICAgICB9XG5cbiAgICAgICAgdmVydGV4X3NoYWRlcl9zcmMgPSB2ZXJ0ZXhfc2hhZGVyX3NyYy5zcGxpdCgnXFxuJykubWFwKHJlbW92ZV9jb21tZW50cykuam9pbignXFxuJyk7XG4gICAgICAgIGZyYWdtZW50X3NoYWRlcl9zcmMgPSBmcmFnbWVudF9zaGFkZXJfc3JjLnNwbGl0KCdcXG4nKS5tYXAocmVtb3ZlX2NvbW1lbnRzKS5qb2luKCdcXG4nKTtcblxuICAgICAgICBmb3IgKGNvbnN0IG1hdGNoIG9mIHZlcnRleF9zaGFkZXJfc3JjLm1hdGNoQWxsKC9hdHRyaWJ1dGUgKyhbXFx3IF0rPykgKyhbXFx3X10rKTtbXFxzXSokL21nKSkge1xuICAgICAgICAgICAgY29uc3QgW2Z1bGxfbWF0Y2gsIHR5cGUsIGFfbmFtZV0gPSBtYXRjaDtcbiAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlc1thX25hbWVdID0geyd0eXBlJzogdHlwZSwgJ2xvY2F0aW9uJzogZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5wcm9nLCBhX25hbWUpfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgbWF0Y2ggb2YgdmVydGV4X3NoYWRlcl9zcmMubWF0Y2hBbGwoL3VuaWZvcm0gKyhbXFx3IF0rPykgKyhbXFx3X10rKTtbXFxzXSokL21nKSkge1xuICAgICAgICAgICAgY29uc3QgW2Z1bGxfbWF0Y2gsIHR5cGUsIHVfbmFtZV0gPSBtYXRjaDtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVfcGFydHMgPSB0eXBlLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IHVuaWZvcm1fbG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMucHJvZywgdV9uYW1lKTtcbiAgICAgICAgICAgIGlmICh1bmlmb3JtX2xvYyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IGBDb3VsZCBub3QgZ2V0IHZlcnRleCBzaGFkZXIgdW5pZm9ybSBsb2NhdGlvbiBmb3IgJyR7dV9uYW1lfSdgO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnVuaWZvcm1zW3VfbmFtZV0gPSB7J3R5cGUnOiB0eXBlX3BhcnRzW3R5cGVfcGFydHMubGVuZ3RoIC0gMV0sICdsb2NhdGlvbic6IHVuaWZvcm1fbG9jfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgbWF0Y2ggb2YgZnJhZ21lbnRfc2hhZGVyX3NyYy5tYXRjaEFsbCgvdW5pZm9ybSArKFtcXHcgXSs/KSArKFtcXHdfXSspO1tcXHNdKiQvbWcpKSB7XG4gICAgICAgICAgICBjb25zdCBbZnVsbF9tYXRjaCwgdHlwZSwgdV9uYW1lXSA9IG1hdGNoO1xuICAgICAgICAgICAgY29uc3QgdHlwZV9wYXJ0cyA9IHR5cGUuc3BsaXQoJyAnKTtcblxuICAgICAgICAgICAgY29uc3QgdW5pZm9ybV9sb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5wcm9nLCB1X25hbWUpO1xuICAgICAgICAgICAgaWYgKHVuaWZvcm1fbG9jID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgYENvdWxkIG5vdCBnZXQgZnJhZ21lbnQgc2hhZGVyIHVuaWZvcm0gbG9jYXRpb24gZm9yICcke3VfbmFtZX0nYDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy51bmlmb3Jtc1t1X25hbWVdID0geyd0eXBlJzogdHlwZV9wYXJ0c1t0eXBlX3BhcnRzLmxlbmd0aCAtIDFdLCAnbG9jYXRpb24nOiB1bmlmb3JtX2xvY307XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgdGhpcyBwcm9ncmFtIGZvciByZW5kZXJpbmcgYW5kIG9wdGlvbmFsbHkgYmluZCBhdHRyaWJ1dGUsIHVuaWZvcm0sIGFuZCB0ZXh0dXJlIHZhbHVlcy4gVGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIFxuICAgICAqIHtAbGluayBXR0xQcm9ncmFtLmJpbmRBdHRyaWJ1dGVzfSwge0BsaW5rIFdHTFByb2dyYW0uc2V0VW5pZm9ybXN9LCBvciB7QGxpbmsgV0dMUHJvZ3JhbS5iaW5kVGV4dHVyZXN9IG9uIGEgZ2l2ZW4gcmVuZGVyaW5nIHBhc3MuXG4gICAgICogQHBhcmFtIGF0dHJpYnV0ZV9idWZmZXJzIC0gQW4gb2JqZWN0IHdpdGggdGhlIGtleXMgYmVpbmcgdGhlIGF0dHJpYnV0ZSB2YXJpYWJsZSBuYW1lcyBhbmQgdGhlIHZhbHVlcyBiZWluZyB0aGUgYnVmZmVycyB0byBhc3NvY2lhdGUgd2l0aCBlYWNoIHZhcmlhYmxlXG4gICAgICogQHBhcmFtIHVuaWZvcm1fdmFsdWVzICAgIC0gQW4gb2JqZWN0IHdpdGggdGhlIGtleXMgYmVpbmcgdGhlIHVuaWZvcm0gdmFyaWFibGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYmVpbmcgdGhlIHVuaWZvcm0gdmFsdWVzXG4gICAgICogQHBhcmFtIHRleHR1cmVzICAgICAgICAgIC0gQW4gb2JqZWN0IHdpdGggdGhlIGtleXMgYmVpbmcgdGhlIHNhbXBsZXIgbmFtZXMgaW4gdGhlIHNvdXJjZSBjb2RlIGFuZCB0aGUgdmFsdWVzIGJlaW5nIHRoZSB0ZXh0dXJlcyB0byBhc3NvY2lhdGUgd2l0aCBlYWNoIHNhbXBsZXJcbiAgICAgKi9cbiAgICB1c2UoYXR0cmlidXRlX2J1ZmZlcnM/OiBSZWNvcmQ8c3RyaW5nLCBXR0xCdWZmZXI+LCB1bmlmb3JtX3ZhbHVlcz86IFJlY29yZDxzdHJpbmcsIChudW1iZXIgfCBudW1iZXJbXSk+LCB0ZXh0dXJlcz86IFJlY29yZDxzdHJpbmcsIFdHTFRleHR1cmU+KTogdm9pZCB7XG4gICAgICAgIHRoaXMuZ2wudXNlUHJvZ3JhbSh0aGlzLnByb2cpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5kcmF3X21vZGUgPSBudWxsO1xuICAgICAgICB0aGlzLm5fdmVydHMgPSBudWxsO1xuXG4gICAgICAgIGlmIChhdHRyaWJ1dGVfYnVmZmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRBdHRyaWJ1dGVzKGF0dHJpYnV0ZV9idWZmZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1bmlmb3JtX3ZhbHVlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFVuaWZvcm1zKHVuaWZvcm1fdmFsdWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0ZXh0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRUZXh0dXJlcyh0ZXh0dXJlcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCaW5kIGF0dHJpYnV0ZSBidWZmZXJzIHRvIHZhcmlhYmxlcyBpbiB0aGlzIHNoYWRlciBwcm9ncmFtLiBXaGVuIHJlbmRyaW5nLCBjYWxsIHtAbGluayBXR0xQcm9ncmFtLnVzZX0gYmVmb3JlIGNhbGxpbmcgdGhpcyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0gYXR0cmlidXRlX2J1ZmZlcnMgLSBBbiBvYmplY3Qgd2l0aCB0aGUga2V5cyBiZWluZyB0aGUgYXR0cmlidXRlIHZhcmlhYmxlIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGJlaW5nIHRoZSBidWZmZXJzIHRvIGFzc29jaWF0ZSB3aXRoIGVhY2ggdmFyaWFibGVcbiAgICAgKi9cbiAgICBiaW5kQXR0cmlidXRlcyhhdHRyaWJ1dGVfYnVmZmVyczogUmVjb3JkPHN0cmluZywgV0dMQnVmZmVyPik6IHZvaWQge1xuICAgICAgICBPYmplY3QuZW50cmllcyhhdHRyaWJ1dGVfYnVmZmVycykuZm9yRWFjaCgoW2FfbmFtZSwgYnVmZmVyXSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlc1thX25hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFNraXBwaW5nIGF0dHJpYnV0ZSBidWZmZXIgcHJvdmlkZWQgZm9yICcke2FfbmFtZX0nIGJlY2F1c2UgdGhlIGF0dHJpYnV0ZSB3YXMgbm90IGZvdW5kIGluIHRoZSBwcm9ncmFtLmApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5uX3ZlcnRzID0gdGhpcy5uX3ZlcnRzID09PSBudWxsID8gYnVmZmVyLm5fdmVydHMgOiB0aGlzLm5fdmVydHM7XG4gICAgICAgICAgICB0aGlzLmRyYXdfbW9kZSA9IHRoaXMuZHJhd19tb2RlID09PSBudWxsID8gYnVmZmVyLmRyYXdfbW9kZSA6IHRoaXMuZHJhd19tb2RlO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5kcmF3X21vZGUgIT0gYnVmZmVyLmRyYXdfbW9kZSB8fCB0aGlzLm5fdmVydHMgIT0gYnVmZmVyLm5fdmVydHMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBgVW5leHBlY3RlZCBkcmF3IG1vZGUgb3IgbnVtYmVyIG9mIHZlcnRpY2VzLmA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHt0eXBlLCBsb2NhdGlvbn0gPSB0aGlzLmF0dHJpYnV0ZXNbYV9uYW1lXTtcbiAgICAgICAgICAgIGJ1ZmZlci5iaW5kVG9Qcm9ncmFtKGxvY2F0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHVuaWZvcm0gdmFsdWVzIGluIHRoaXMgc2hhZGVyIHByb2dyYW0uIFdoZW4gcmVuZGVyaW5nLCBjYWxsIHtAbGluayBXR0xQcm9ncmFtLnVzZX0gYmVmb3JlIGNhbGxpbmcgdGhpcyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0gdW5pZm9ybV92YWx1ZXMgLSBBbiBvYmplY3Qgd2l0aCB0aGUga2V5cyBiZWluZyB0aGUgdW5pZm9ybSB2YXJpYWJsZSBuYW1lcyBhbmQgdGhlIHZhbHVlcyBiZWluZyB0aGUgdW5pZm9ybSB2YWx1ZXNcbiAgICAgKi9cbiAgICBzZXRVbmlmb3Jtcyh1bmlmb3JtX3ZhbHVlczogUmVjb3JkPHN0cmluZywgKG51bWJlciB8IG51bWJlcltdKT4pOiB2b2lkIHtcbiAgICAgICAgT2JqZWN0LmVudHJpZXModW5pZm9ybV92YWx1ZXMpLmZvckVhY2goKFt1X25hbWUsIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMudW5pZm9ybXNbdV9uYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBTa2lwcGluZyB1bmlmb3JtIHZhbHVlIHByb3ZpZGVkIGZvciAnJHt1X25hbWV9JyBiZWNhdXNlIHRoZSB1bmlmb3JtIHdhcyBub3QgZm91bmQgaW4gdGhlIHByb2dyYW0uYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB7dHlwZSwgbG9jYXRpb259ID0gdGhpcy51bmlmb3Jtc1t1X25hbWVdO1xuXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2ludCcgJiYgdHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC51bmlmb3JtMWkobG9jYXRpb24sIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdmbG9hdCcgJiYgdHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC51bmlmb3JtMWYobG9jYXRpb24sIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICd2ZWMyJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC51bmlmb3JtMmZ2KGxvY2F0aW9uLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlID09PSAndmVjMycgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wudW5pZm9ybTNmdihsb2NhdGlvbiwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ3ZlYzQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnVuaWZvcm00ZnYobG9jYXRpb24sIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdtYXQ0JyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC51bmlmb3JtTWF0cml4NGZ2KGxvY2F0aW9uLCBmYWxzZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgYENvdWxkIG5vdCBmaWd1cmUgb3V0IHVuaWZvcm0gZnVuY3Rpb24gZm9yIHR5cGUgJyR7dHlwZX0nIGFuZCB2YWx1ZSAnJHtTdHJpbmcodmFsdWUpfSdgO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCaW5kIHRleHR1cmVzIHRvIHNhbXBsZXJzIGluIHRoaXMgc2hhZGVyIHByb2dyYW0uIFdoZW4gcmVuZHJpbmcsIGNhbGwge0BsaW5rIFdHTFByb2dyYW0udXNlfSBiZWZvcmUgY2FsbGluZyB0aGlzIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB0ZXh0dXJlcyAtIEFuIG9iamVjdCB3aXRoIHRoZSBrZXlzIGJlaW5nIHRoZSBzYW1wbGVyIG5hbWVzIGluIHRoZSBzb3VyY2UgY29kZSBhbmQgdGhlIHZhbHVlcyBiZWluZyB0aGUgdGV4dHVyZXMgdG8gYXNzb2NpYXRlIHdpdGggZWFjaCBzYW1wbGVyXG4gICAgICovXG4gICAgYmluZFRleHR1cmVzKHRleHR1cmVzOiBSZWNvcmQ8c3RyaW5nLCBXR0xUZXh0dXJlPikge1xuICAgICAgICBPYmplY3QuZW50cmllcyh0ZXh0dXJlcykuZm9yRWFjaCgoW3NhbXBsZXJfbmFtZSwgdGV4dHVyZV0sIGdsX3RleF9udW0pID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnVuaWZvcm1zW3NhbXBsZXJfbmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgU2tpcHBpbmcgdGV4dHVyZSBwcm92aWRlZCBmb3Igc2FtcGxlciAnJHtzYW1wbGVyX25hbWV9JyBiZWNhdXNlIHRoZSBzYW1wbGVyIHdhcyBub3QgZm91bmQgaW4gdGhlIHByb2dyYW0uYClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHt0eXBlLCBsb2NhdGlvbn0gPSB0aGlzLnVuaWZvcm1zW3NhbXBsZXJfbmFtZV07XG4gICAgICAgICAgICB0ZXh0dXJlLmJpbmRUb1Byb2dyYW0obG9jYXRpb24sIGdsX3RleF9udW0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSdW4gdGhpcyBzaGFkZXIgcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBkcmF3KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5kcmF3X21vZGUgPT09IG51bGwgfHwgdGhpcy5uX3ZlcnRzID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBcIkNhbm5vdCBkcmF3IHdpdGhvdXQgYmluZGluZyBhdHRyaWJ1dGUgYnVmZmVyc1wiO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5nbC5kcmF3QXJyYXlzKHRoaXMuZHJhd19tb2RlLCAwLCB0aGlzLm5fdmVydHMpO1xuICAgIH1cbn1cblxuZXhwb3J0IHtXR0xQcm9ncmFtfTsiLCJcbmltcG9ydCB7IFdHTFRleHR1cmUgfSBmcm9tIFwiLi9XR0xUZXh0dXJlXCI7XG5cbi8qKlxuICogQG1vZHVsZSB3Z2wvV2ViR0xGcmFtZWJ1ZmZlclxuICogTW9kdWxlIGNvbnRhaW5pbmcgaGVscGVyIGNsYXNzZXMgZm9yIFdlYkdMIEZyYW1lYnVmZmVyc1xuICovXG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgV2ViR0wgZnJhbWVidWZmZXJzXG4gKi9cbmNsYXNzIFdHTEZyYW1lYnVmZmVyQmFzZSB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBudWxsO1xuXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHJlYWRvbmx5IGZyYW1lYnVmZmVyOiBXZWJHTEZyYW1lYnVmZmVyIHwgbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKGdsOiAoV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgbnVsbCksIGZyYW1lYnVmZmVyOiAoV2ViR0xGcmFtZWJ1ZmZlciB8IG51bGwpKSB7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy5mcmFtZWJ1ZmZlciA9IGZyYW1lYnVmZmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFyIHRoZSBmcmFtZWJ1ZmZlciB0byBhIHBhcnRpY3VsYXIgY29sb3JcbiAgICAgKiBAcGFyYW0gY29sb3IgLSBUaGUgY29sb3IgdG8gdXNlIHdoZW4gY2xlYXJpbmcgdGhlIGZyYW1lYnVmZmVyIGFzIGEgZmxvYXQgUkdCQSB0dXBsZVxuICAgICAqL1xuICAgIGNsZWFyKGNvbG9yOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSk6IHZvaWQge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGlmIChnbCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgXCJSZWdpc3RlciBXZWJHTCBkcmF3aW5nIGNvbnRleHQgdXNpbmcgcmVnaXN0ZXJHTENvbnRleHQoKSBmaXJzdFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2wuY2xlYXJDb2xvciguLi5jb2xvcik7XG4gICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5mcmFtZWJ1ZmZlcik7XG4gICAgICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlciB0byBhIHBvcnRpb24gb2YgdGhpcyBmcmFtZWJ1ZmZlclxuICAgICAqIEBwYXJhbSB4ICAgICAgLSBUaGUgeCBjb29yZGluYXRlIG9mIHRoZSBzdGFydGluZyBwb2ludCBmb3IgdGhlIHZpZXdwb3J0XG4gICAgICogQHBhcmFtIHkgICAgICAtIFRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIHN0YXJ0aW5nIHBvaW50IGZvciB0aGUgdmlld3BvcnRcbiAgICAgKiBAcGFyYW0gd2lkdGggIC0gVGhlIHdpZHRoIG9mIHRoZSB2aWV3cG9ydFxuICAgICAqIEBwYXJhbSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHRoZSB2aWV3cG9ydFxuICAgICAqL1xuICAgIHJlbmRlclRvKHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGlmIChnbCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgXCJSZWdpc3RlciBXZWJHTCBkcmF3aW5nIGNvbnRleHQgdXNpbmcgcmVnaXN0ZXJHTENvbnRleHQoKSBmaXJzdFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB0aGlzLmZyYW1lYnVmZmVyKTtcbiAgICAgICAgZ2wudmlld3BvcnQoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29weSB0aGUgY29udGVudHMgb2YgdGhpcyBmcmFtZWJ1ZmZlciB0byBhbm90aGVyIHRleHR1cmVcbiAgICAgKiBAcGFyYW0gdGV4dHVyZSAtIFRoZSBkZXN0aW5hdGlvbiB0ZXh0dXJlIGZvciB0aGUgY29weVxuICAgICAqIEBwYXJhbSB4ICAgICAgIC0gVGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgc3RhcnQgb2YgdGhlIHNvdXJjZSByZWN0YW5nbGVcbiAgICAgKiBAcGFyYW0geSAgICAgICAtIFRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIHN0YXJ0IG9mIHRoZSBzb3VyY2UgcmVjdGFuZ2xlXG4gICAgICogQHBhcmFtIHdpZHRoICAgLSBUaGUgd2lkdGggb2YgdGhlIHNvdXJjZSByZWN0YW5nbGVcbiAgICAgKiBAcGFyYW0gaGVpZ2h0ICAtIFRoZSBoZWlnaHQgb2YgdGhlIHNvdXJjZSByZWN0YW5nbGVcbiAgICAgKi9cbiAgICBjb3B5VG9UZXh0dXJlKHRleHR1cmU6IFdHTFRleHR1cmUsIHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGlmIChnbCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgXCJSZWdpc3RlciBXZWJHTCBkcmF3aW5nIGNvbnRleHQgdXNpbmcgcmVnaXN0ZXJHTENvbnRleHQoKSBmaXJzdFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB0aGlzLmZyYW1lYnVmZmVyKTtcbiAgICAgICAgdGV4dHVyZS5hY3RpdmF0ZSgwKTtcblxuICAgICAgICBnbC5jb3B5VGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCAwKTtcbiAgICB9XG59XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIHRoZSBzY3JlZW4gYnVmZmVyXG4gKiBAZXh0ZW5kcyBXR0xGcmFtZWJ1ZmZlckJhc2VcbiAqL1xuY2xhc3MgV0dMU2NyZWVuYnVmZmVyIGV4dGVuZHMgV0dMRnJhbWVidWZmZXJCYXNlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHNjcmVlbiBidWZmZXIuIFVzZSB0aGUge0BsaW5rIFdHTEZyYW1lYnVmZmVyLnNjcmVlbn0gc3RhdGljIHZhcmlhYmxlIG9mIHtAbGluayBXR0xGcmFtZWJ1ZmZlcn0gaW5zdGVhZCBvZiBjcmVhdGluZyB5b3VyIG93biBzY3JlZW5idWZmZXIuXG4gICAgICovXG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIobnVsbCwgbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgdGhlIFdlYkdMIHJlbmRlcmluZyBjb250ZXh0IGZvciBsYXRlciB1c2VcbiAgICAgKiBAcGFyYW0gZ2wgLSBUaGUgV2ViR0wgcmVuZGVyaW5nIGNvbnRleHRcbiAgICAgKi9cbiAgICByZWdpc3RlckdMQ29udGV4dChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICB9XG59XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgV2ViR0wgZnJhbWVidWZmZXJcbiAqIEBleHRlbmRzIFdHTEZyYW1lYnVmZmVyQmFzZVxuICovXG5jbGFzcyBXR0xGcmFtZWJ1ZmZlciBleHRlbmRzIFdHTEZyYW1lYnVmZmVyQmFzZSB7XG4gICAgcmVhZG9ubHkgdGV4dHVyZTogV0dMVGV4dHVyZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGZyYW1lYnVmZmVyIGFzc29jaWF0ZWQgd2l0aCBhIHRleHR1cmVcbiAgICAgKiBAcGFyYW0gZ2wgICAgICAtIFRoZSBXZWJHTCByZW5kZXJpbmcgY29udGV4dFxuICAgICAqIEBwYXJhbSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUgb2JqZWN0IHRvIGFzc29jaWF0ZSB3aXRoIHRoaXMgZnJhbWVidWZmZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB0ZXh0dXJlOiBXR0xUZXh0dXJlKSB7XG4gICAgICAgIGNvbnN0IGZyYW1lYnVmZmVyID0gIGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG4gICAgICAgIGlmIChmcmFtZWJ1ZmZlciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgXCJDb3VsZCBub3QgY3JlYXRlIFdlYkdMIEZyYW1lYnVmZmVyXCI7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlcihnbCwgZnJhbWVidWZmZXIpO1xuICAgICAgICB0aGlzLnRleHR1cmUgPSB0ZXh0dXJlXG5cbiAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB0aGlzLmZyYW1lYnVmZmVyKTtcbiAgICAgICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5URVhUVVJFXzJELCB0ZXh0dXJlWyd0ZXh0dXJlJ10sIDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2NyZWVuIGJ1ZmZlciBvYmplY3QgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIHNjcmVlblxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBzdGF0aWMgc2NyZWVuOiBXR0xTY3JlZW5idWZmZXIgPSBuZXcgV0dMU2NyZWVuYnVmZmVyKCk7XG59XG5cbi8qKiBcbiAqIFBlcmZvcm0gc2V2ZXJhbCByZW5kZXJpbmcgcGFzc2VzLCBmbGlwLWZsb3BwaW5nIGJldHdlZW4gdHdvIGZyYW1lYnVmZmVyc1xuICogQHBhcmFtIG5fcGFzc2VzICAtIFRoZSBudW1iZXIgb2YgcmVuZGVyaW5nIHBhc3NlcyB0byBkb1xuICogQHBhcmFtIHNvdXJjZV9mYiAtIFRoZSBmcmFtZWJ1ZmZlciBjb250YWluaW5nIHRoZSBpbml0aWFsIGRhdGEgZm9yIHRoZSByZW5kZXJpbmdcbiAqIEBwYXJhbSBhdXhfZmIgICAgLSBUaGUgYXV4aWxhcnkgcmVuZGVyaW5nIGZyYW1lYnVmZmVycyAoc2hvdWxkIGJlIDIgb2YgdGhlbSlcbiAqIEBwYXJhbSBkb19yZW5kZXIgLSBBIG1ldGhvZCB0aGF0IGRvZXMgdGhlIGFjdHVhbCByZW5kZXJpbmcgcGFzc1xuICovXG5jb25zdCBmbGlwRmxvcEJ1ZmZlcnMgPSAobl9wYXNzZXM6IG51bWJlciwgc291cmNlX2ZiOiBXR0xGcmFtZWJ1ZmZlciwgYXV4X2ZiOiBXR0xGcmFtZWJ1ZmZlcltdLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICBkb19yZW5kZXI6IChzcmM6IFdHTEZyYW1lYnVmZmVyLCBkZXN0OiBXR0xGcmFtZWJ1ZmZlciwgaXBhc3M/OiBudW1iZXIpID0+IHZvaWQpOiBXR0xGcmFtZWJ1ZmZlciA9PiB7XG5cbiAgICAvLyBmYjEgaXMgdGhlIHNvdXJjZSBhbmQgZmIyIGlzIHRoZSB0YXJnZXQgZm9yIGVhY2ggcGFzc1xuICAgIGxldCBmYjE6IFdHTEZyYW1lYnVmZmVyID0gc291cmNlX2ZiLCBmYjI6IFdHTEZyYW1lYnVmZmVyID0gYXV4X2ZiWzBdO1xuXG4gICAgZm9yIChsZXQgaXBhc3MgPSAwOyBpcGFzcyA8IG5fcGFzc2VzOyBpcGFzcysrKSB7XG4gICAgICAgIC8vIENsZWFyIGFuZCB1bmJpbmQgZGVzdGluYXRpb24gdGV4dHVyZVxuICAgICAgICBmYjIuY2xlYXIoWzAuLCAwLiwgMC4sIDEuXSk7XG4gICAgICAgIGZiMi50ZXh0dXJlLmRlYWN0aXZhdGUoKTtcblxuICAgICAgICAvLyBEbyB3aGF0ZXZlciByZW5kZXJpbmcgdGFzayB3ZSB3YW50IHRvIGRvXG4gICAgICAgIGRvX3JlbmRlcihmYjEsIGZiMiwgaXBhc3MpO1xuXG4gICAgICAgIGlmIChpcGFzcyA+IDApIHtcbiAgICAgICAgICAgIC8vIEZsaXAgdGhlIGZyYW1lYnVmZmVycyBzbyB0aGUgZGVzdGluYXRpb24gb24gdGhpcyBwYXNzIGJlY29tZXMgdGhlIHNvdXJjZSBvbiB0aGUgbmV4dCBwYXNzIGFuZCB2aWNlLXZlcnNhXG4gICAgICAgICAgICBhdXhfZmIucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIFtmYjEsIGZiMl0gPSBhdXhfZmI7XG4gICAgfVxuXG4gICAgLy8gVGhlIG1vc3QgcmVjZW50IHRhcmdldCBpcyBmYjIsIGJ1dCB0aGUgdHdvIGZyYW1lYnVmZmVycyBnb3QgZmxpcHBlZCBhdCB0aGUgZW5kIG9mIHRoZSBsb29wLCBzbyB0aGUgZGF0YSB3ZSB3YW50IGFyZSBpbiBmYjEuXG4gICAgcmV0dXJuIGZiMTtcbn1cblxuZXhwb3J0IHtXR0xGcmFtZWJ1ZmZlciwgV0dMU2NyZWVuYnVmZmVyLCBmbGlwRmxvcEJ1ZmZlcnN9OyIsIlxuaW1wb3J0IHsgTWFwVHlwZSB9IGZyb20gJy4vTWFwJztcbmltcG9ydCB7IFBsb3RDb21wb25lbnQsIGxheWVyX3dvcmtlciB9IGZyb20gJy4vUGxvdENvbXBvbmVudCc7XG5pbXBvcnQgeyBSYXdTY2FsYXJGaWVsZCB9IGZyb20gJy4vUmF3RmllbGQnO1xuaW1wb3J0IHsgaGV4MnJnYmEgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IFdHTEJ1ZmZlciwgV0dMUHJvZ3JhbSwgV0dMVGV4dHVyZSB9IGZyb20gJy4vd2dsJztcblxuaW50ZXJmYWNlIENvbnRvdXJPcHRpb25zIHtcbiAgICAvKiogXG4gICAgICogVGhlIGNvbG9yIG9mIHRoZSBjb250b3VycyBhcyBhIGhleCBjb2xvciBzdHJpbmcgXG4gICAgICogQGRlZmF1bHQgJyMwMDAwMDAnXG4gICAgICovXG4gICAgY29sb3I/OiBzdHJpbmc7XG5cbiAgICAvKiogXG4gICAgICogVGhlIGNvbnRvdXIgaW50ZXJ2YWwgXG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuICAgIGludGVydmFsPzogbnVtYmVyO1xuXG4gICAgLyoqIFxuICAgICAqIEEgZnVuY3Rpb24gdG8gdGhpbiB0aGUgY29udG91cnMgYmFzZWQgb24gem9vbSBsZXZlbC4gVGhlIGZ1bmN0aW9uIHNob3VsZCB0YWtlIGEgem9vbSBsZXZlbCBhbmQgcmV0dXJuIGEgbnVtYmVyIGBuYCB0aGF0IG1lYW5zIHRvIG9ubHkgc2hvdyBldmVyeSBcbiAgICAgKiBgbmB0aCBjb250b3VyLlxuICAgICAqIEBkZWZhdWx0IERvbid0IHRoaW4gdGhlIGNvbnRvdXJzIG9uIGFueSB6b29tIGxldmVsXG4gICAgICovXG4gICAgdGhpbm5lcj86ICh6b29tOiBudW1iZXIpID0+IG51bWJlcjtcbn1cblxuLyoqIFxuICogQSBmaWVsZCBvZiBjb250b3VyZWQgZGF0YS4gVGhlIGNvbnRvdXJzIGNhbiBvcHRpb25hbGx5IGJlIHRoaW5uZWQgYmFzZWQgb24gbWFwIHpvb20gbGV2ZWwuXG4gKiBAZXhhbXBsZVxuICogLy8gQ3JlYXRlIGEgY29udG91cmVkIGhlaWdodCBmaWVsZCwgd2l0aCBibGFjayBjb250b3VycyBldmVyeSAzMCBtIChhc3N1bWluZyB0aGUgaGVpZ2h0IGZpZWxkIGlzIGluIFxuICogLy8gbWV0ZXJzKSBhbmQgb25seSB1c2luZyBldmVyeSBvdGhlciBjb250b3VyIHdoZW4gdGhlIG1hcCB6b29tIGxldmVsIGlzIGxlc3MgdGhhbiA1LlxuICogY29uc3QgY29udG91cnMgPSBuZXcgQ29udG91cihoZWlnaHRfZmllbGQsIHtjb2xvcjogJyMwMDAwMDAnLCBpbnRlcnZhbDogMzAsIFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaW5uZXI6IHpvb20gPT4gem9vbSA8IDUgPyAyIDogMX0pO1xuICovXG5jbGFzcyBDb250b3VyIGV4dGVuZHMgUGxvdENvbXBvbmVudCB7XG4gICAgcmVhZG9ubHkgZmllbGQ6IFJhd1NjYWxhckZpZWxkO1xuICAgIHJlYWRvbmx5IGNvbG9yOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG4gICAgcmVhZG9ubHkgaW50ZXJ2YWw6IG51bWJlcjtcbiAgICByZWFkb25seSB0aGlubmVyOiAoem9vbTogbnVtYmVyKSA9PiBudW1iZXI7XG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICBtYXA6IE1hcFR5cGUgfCBudWxsO1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHByb2dyYW06IFdHTFByb2dyYW0gfCBudWxsO1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHZlcnRpY2VzOiBXR0xCdWZmZXIgfCBudWxsO1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIGxhdGl0dWRlczogV0dMQnVmZmVyIHwgbnVsbDtcbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICBmaWxsX3RleHR1cmU6IFdHTFRleHR1cmUgfCBudWxsO1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRleGNvb3JkczogV0dMQnVmZmVyIHwgbnVsbDtcbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICBncmlkX3NwYWNpbmc6IG51bWJlciB8IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0ZXhfd2lkdGg6IG51bWJlciB8IG51bGw7XG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGV4X2hlaWdodDogbnVtYmVyIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNvbnRvdXJlZCBmaWVsZFxuICAgICAqIEBwYXJhbSBmaWVsZCAtIFRoZSBmaWVsZCB0byBjb250b3VyXG4gICAgICogQHBhcmFtIG9wdHMgIC0gT3B0aW9ucyBmb3IgY3JlYXRpbmcgdGhlIGNvbnRvdXJzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZmllbGQ6IFJhd1NjYWxhckZpZWxkLCBvcHRzOiBDb250b3VyT3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcblxuICAgICAgICB0aGlzLmludGVydmFsID0gb3B0cy5pbnRlcnZhbCB8fCAxO1xuXG4gICAgICAgIGNvbnN0IGNvbG9yID0gaGV4MnJnYmEob3B0cy5jb2xvciB8fCAnIzAwMDAwMCcpO1xuICAgICAgICB0aGlzLmNvbG9yID0gW2NvbG9yWzBdLCBjb2xvclsxXSwgY29sb3JbMl1dO1xuXG4gICAgICAgIHRoaXMudGhpbm5lciA9IG9wdHMudGhpbm5lciB8fCAoKCkgPT4gMSk7XG5cbiAgICAgICAgdGhpcy5tYXAgPSBudWxsO1xuICAgICAgICB0aGlzLnByb2dyYW0gPSBudWxsO1xuICAgICAgICB0aGlzLnZlcnRpY2VzID0gbnVsbDtcbiAgICAgICAgdGhpcy5sYXRpdHVkZXMgPSBudWxsO1xuICAgICAgICB0aGlzLmZpbGxfdGV4dHVyZSA9IG51bGw7XG4gICAgICAgIHRoaXMudGV4Y29vcmRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5ncmlkX3NwYWNpbmcgPSBudWxsO1xuXG4gICAgICAgIHRoaXMudGV4X3dpZHRoID0gbnVsbDtcbiAgICAgICAgdGhpcy50ZXhfaGVpZ2h0ID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBBZGQgdGhlIGNvbnRvdXJzIHRvIGEgbWFwXG4gICAgICovXG4gICAgYXN5bmMgb25BZGQobWFwOiBNYXBUeXBlLCBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XG4gICAgICAgIC8vIEJhc2ljIHByb2NlZHVyZSBmb3IgdGhlc2UgY29udG91cnMgZnJvbSBodHRwczovL3d3dy5zaGFkZXJ0b3kuY29tL3ZpZXcvbGx0QldNXG4gICAgICAgIHRoaXMubWFwID0gbWFwO1xuXG4gICAgICAgIGdsLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfZmxvYXQnKTtcbiAgICAgICAgZ2wuZ2V0RXh0ZW5zaW9uKCdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInKTtcbiAgICAgICAgZ2wuZ2V0RXh0ZW5zaW9uKCdPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMnKTtcblxuICAgICAgICBjb25zdCB2ZXJ0ZXhTb3VyY2UgPSBgXG4gICAgICAgIHVuaWZvcm0gbWF0NCB1X21hdHJpeDtcblxuICAgICAgICBhdHRyaWJ1dGUgdmVjMiBhX3BvcztcbiAgICAgICAgYXR0cmlidXRlIHZlYzIgYV90ZXhfY29vcmQ7XG4gICAgICAgIGF0dHJpYnV0ZSBmbG9hdCBhX2xhdGl0dWRlO1xuXG4gICAgICAgIHZhcnlpbmcgaGlnaHAgdmVjMiB2X3RleF9jb29yZDtcbiAgICAgICAgdmFyeWluZyBoaWdocCBmbG9hdCB2X21hcF9zY2FsZV9mYWM7XG5cbiAgICAgICAgdm9pZCBtYWluKCkge1xuICAgICAgICAgICAgZ2xfUG9zaXRpb24gPSB1X21hdHJpeCAqIHZlYzQoYV9wb3MsIDAuMCwgMS4wKTtcbiAgICAgICAgICAgIHZfdGV4X2Nvb3JkID0gYV90ZXhfY29vcmQ7XG4gICAgICAgICAgICB2X21hcF9zY2FsZV9mYWMgPSBjb3MoYV9sYXRpdHVkZSAqIDMuMTQxNTkyNjU0IC8gMTgwLik7XG4gICAgICAgIH1gO1xuICAgICAgICBcbiAgICAgICAgLy8gY3JlYXRlIEdMU0wgc291cmNlIGZvciBmcmFnbWVudCBzaGFkZXJcbiAgICAgICAgY29uc3QgZnJhZ21lbnRTb3VyY2UgPSBgXG4gICAgICAgICNleHRlbnNpb24gR0xfT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzIDogZW5hYmxlXG4gICAgICAgIHZhcnlpbmcgaGlnaHAgdmVjMiB2X3RleF9jb29yZDtcbiAgICAgICAgdmFyeWluZyBoaWdocCBmbG9hdCB2X21hcF9zY2FsZV9mYWM7XG5cbiAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgdV9maWxsX3NhbXBsZXI7XG4gICAgICAgIHVuaWZvcm0gaGlnaHAgZmxvYXQgdV9jb250b3VyX2ludGVydmFsO1xuICAgICAgICB1bmlmb3JtIGxvd3AgZmxvYXQgdV9saW5lX2N1dG9mZjtcbiAgICAgICAgdW5pZm9ybSBsb3dwIHZlYzMgdV9jb2xvcjtcbiAgICAgICAgdW5pZm9ybSBsb3dwIHZlYzIgdV9zdGVwX3NpemU7XG4gICAgICAgIHVuaWZvcm0gbG93cCBmbG9hdCB1X3pvb21fZmFjO1xuICAgICAgICB1bmlmb3JtIGhpZ2hwIGZsb2F0IHVfZ3JpZF9zcGFjaW5nO1xuXG4gICAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICAgIGhpZ2hwIGZsb2F0IGZpZWxkX3ZhbCA9IHRleHR1cmUyRCh1X2ZpbGxfc2FtcGxlciwgdl90ZXhfY29vcmQpLnI7XG5cbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGdyYWRpZW50IG1hZ25pdHVkZSBvZiB0aGUgZ3JpZCAodGhlIHkgY29tcG9uZW50IGRpdmlkZXMgYnkgMiB0byBjaGVhdCBmb3IgaGlnaCBsYXRpdHVkZXMpXG4gICAgICAgICAgICBsb3dwIHZlYzIgaWhhdCA9IHZlYzIodV9zdGVwX3NpemUueCwgMC4wKTtcbiAgICAgICAgICAgIGxvd3AgdmVjMiBqaGF0ID0gdmVjMigwLjAsIHVfc3RlcF9zaXplLnkpO1xuICAgICAgICAgICAgaGlnaHAgZmxvYXQgZnZfeHAxID0gdGV4dHVyZTJEKHVfZmlsbF9zYW1wbGVyLCB2X3RleF9jb29yZCArIGloYXQpLnI7XG4gICAgICAgICAgICBoaWdocCBmbG9hdCBmdl94bTEgPSB0ZXh0dXJlMkQodV9maWxsX3NhbXBsZXIsIHZfdGV4X2Nvb3JkIC0gaWhhdCkucjtcbiAgICAgICAgICAgIGhpZ2hwIGZsb2F0IGZ2X3lwMSA9IHRleHR1cmUyRCh1X2ZpbGxfc2FtcGxlciwgdl90ZXhfY29vcmQgKyBqaGF0KS5yO1xuICAgICAgICAgICAgaGlnaHAgZmxvYXQgZnZfeW0xID0gdGV4dHVyZTJEKHVfZmlsbF9zYW1wbGVyLCB2X3RleF9jb29yZCAtIGpoYXQpLnI7XG4gICAgICAgICAgICBoaWdocCBmbG9hdCBmd2lkdGhfZmllbGQgPSBzcXJ0KChmdl94cDEgLSBmdl94bTEpICogKGZ2X3hwMSAtIGZ2X3htMSkgKyAoZnZfeXAxIC0gZnZfeW0xKSAqIChmdl95cDEgLSBmdl95bTEpICogdl9tYXBfc2NhbGVfZmFjICogdl9tYXBfc2NhbGVfZmFjKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvICgyLiAqIHVfZ3JpZF9zcGFjaW5nKTtcblxuICAgICAgICAgICAgLy9nbF9GcmFnQ29sb3IgPSB2ZWM0KGZ3aWR0aF9maWVsZCwgZndpZHRoX2ZpZWxkLCBmd2lkdGhfZmllbGQsIDEuMCk7XG5cbiAgICAgICAgICAgIGxvd3AgZmxvYXQgcGxvdF92YWwgPSBmcmFjdChmaWVsZF92YWwgLyB1X2NvbnRvdXJfaW50ZXJ2YWwpO1xuICAgICAgICAgICAgaWYgKHBsb3RfdmFsID4gMC41KSBwbG90X3ZhbCA9IDEuMCAtIHBsb3RfdmFsO1xuICAgICAgICAgICAgcGxvdF92YWwgPSBwbG90X3ZhbCAvIChtYXgoMC4wMDEsIGZ3aWR0aF9maWVsZCAvICh1X3pvb21fZmFjICogMC4xMjUpKSk7XG5cbiAgICAgICAgICAgIGlmIChwbG90X3ZhbCA+IHVfbGluZV9jdXRvZmYpIGRpc2NhcmQ7XG5cbiAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQodV9jb2xvciwgMS4gLSAocGxvdF92YWwgKiBwbG90X3ZhbCAvICh1X2xpbmVfY3V0b2ZmICogdV9saW5lX2N1dG9mZikpKTtcbiAgICAgICAgfWA7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnByb2dyYW0gPSBuZXcgV0dMUHJvZ3JhbShnbCwgdmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZSk7XG5cbiAgICAgICAgY29uc3Qge2xhdHM6IGZpZWxkX2xhdHMsIGxvbnM6IGZpZWxkX2xvbnN9ID0gdGhpcy5maWVsZC5ncmlkLmdldENvb3JkcygpO1xuICAgICAgICBjb25zdCB7d2lkdGg6IHRleF93aWR0aCwgaGVpZ2h0OiB0ZXhfaGVpZ2h0LCBkYXRhOiB0ZXhfZGF0YX0gPSB0aGlzLmZpZWxkLmdldFBhZGRlZERhdGEoKTtcblxuICAgICAgICBjb25zdCB2ZXJ0c190ZXhfY29vcmRzID0gYXdhaXQgbGF5ZXJfd29ya2VyLm1ha2VEb21haW5WZXJ0aWNlc0FuZFRleENvb3JkcyhmaWVsZF9sYXRzLCBmaWVsZF9sb25zLCB0ZXhfd2lkdGgsIHRleF9oZWlnaHQpO1xuICAgICAgICBjb25zdCBsYXRpdHVkZXMgPSBuZXcgRmxvYXQzMkFycmF5KFsuLi5maWVsZF9sYXRzXS5tYXAobGF0ID0+IFtsYXQsIGxhdF0pLmZsYXQoKSk7XG4gICAgICAgIHRoaXMuZ3JpZF9zcGFjaW5nID0gTWF0aC5hYnMobGF0aXR1ZGVzWzJdIC0gbGF0aXR1ZGVzWzBdKTtcblxuICAgICAgICB0aGlzLnZlcnRpY2VzID0gbmV3IFdHTEJ1ZmZlcihnbCwgdmVydHNfdGV4X2Nvb3Jkc1sndmVydGljZXMnXSwgMiwgZ2wuVFJJQU5HTEVfU1RSSVApO1xuICAgICAgICB0aGlzLmxhdGl0dWRlcyA9IG5ldyBXR0xCdWZmZXIoZ2wsIGxhdGl0dWRlcywgMSwgZ2wuVFJJQU5HTEVfU1RSSVApO1xuXG4gICAgICAgIHRoaXMudGV4X3dpZHRoID0gdGV4X3dpZHRoO1xuICAgICAgICB0aGlzLnRleF9oZWlnaHQgPSB0ZXhfaGVpZ2h0O1xuXG4gICAgICAgIGNvbnN0IGZpbGxfaW1hZ2UgPSB7J2Zvcm1hdCc6IGdsLkxVTUlOQU5DRSwgJ3R5cGUnOiBnbC5GTE9BVCwgXG4gICAgICAgICAgICAnd2lkdGgnOiB0ZXhfd2lkdGgsICdoZWlnaHQnOiB0ZXhfaGVpZ2h0LCAnaW1hZ2UnOiB0ZXhfZGF0YSxcbiAgICAgICAgICAgICdtYWdfZmlsdGVyJzogZ2wuTElORUFSLFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZmlsbF90ZXh0dXJlID0gbmV3IFdHTFRleHR1cmUoZ2wsIGZpbGxfaW1hZ2UpO1xuICAgICAgICB0aGlzLnRleGNvb3JkcyA9IG5ldyBXR0xCdWZmZXIoZ2wsIHZlcnRzX3RleF9jb29yZHNbJ3RleF9jb29yZHMnXSwgMiwgZ2wuVFJJQU5HTEVfU1RSSVApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIFJlbmRlciB0aGUgY29udG91cnNcbiAgICAgKi9cbiAgICByZW5kZXIoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgbWF0cml4OiBudW1iZXJbXSkge1xuICAgICAgICBpZiAodGhpcy5tYXAgPT09IG51bGwgfHwgdGhpcy5wcm9ncmFtID09PSBudWxsIHx8IHRoaXMudmVydGljZXMgPT09IG51bGwgfHwgdGhpcy5sYXRpdHVkZXMgPT09IG51bGwgfHwgXG4gICAgICAgICAgICB0aGlzLmZpbGxfdGV4dHVyZSA9PT0gbnVsbCB8fCB0aGlzLnRleGNvb3JkcyA9PT0gbnVsbCB8fCB0aGlzLmdyaWRfc3BhY2luZyA9PT0gbnVsbCB8fCB0aGlzLnRleF93aWR0aCA9PT0gbnVsbCB8fCB0aGlzLnRleF9oZWlnaHQgPT09IG51bGwpIHJldHVybjtcblxuICAgICAgICBjb25zdCB6b29tID0gdGhpcy5tYXAuZ2V0Wm9vbSgpO1xuICAgICAgICBjb25zdCBpbnR2ID0gdGhpcy50aGlubmVyKHpvb20pICogdGhpcy5pbnRlcnZhbDtcbiAgICAgICAgY29uc3QgY3V0b2ZmID0gMC41IC8gaW50djtcbiAgICAgICAgY29uc3Qgc3RlcF9zaXplID0gWzAuMjUgLyB0aGlzLnRleF93aWR0aCwgMC4yNSAvIHRoaXMudGV4X2hlaWdodF07XG4gICAgICAgIGNvbnN0IHpvb21fZmFjID0gTWF0aC5wb3coMiwgem9vbSk7XG5cbiAgICAgICAgdGhpcy5wcm9ncmFtLnVzZShcbiAgICAgICAgICAgIHsnYV9wb3MnOiB0aGlzLnZlcnRpY2VzLCAnYV9sYXRpdHVkZSc6IHRoaXMubGF0aXR1ZGVzLCAnYV90ZXhfY29vcmQnOiB0aGlzLnRleGNvb3Jkc30sXG4gICAgICAgICAgICB7J3VfY29udG91cl9pbnRlcnZhbCc6IGludHYsICd1X2xpbmVfY3V0b2ZmJzogY3V0b2ZmLCAndV9jb2xvcic6IHRoaXMuY29sb3IsICd1X3N0ZXBfc2l6ZSc6IHN0ZXBfc2l6ZSwgJ3Vfem9vbV9mYWMnOiB6b29tX2ZhYyxcbiAgICAgICAgICAgICAndV9ncmlkX3NwYWNpbmcnOiB0aGlzLmdyaWRfc3BhY2luZywgJ3VfbWF0cml4JzogbWF0cml4fSxcbiAgICAgICAgICAgIHsndV9maWxsX3NhbXBsZXInOiB0aGlzLmZpbGxfdGV4dHVyZX1cbiAgICAgICAgKTtcblxuICAgICAgICBnbC5lbmFibGUoZ2wuQkxFTkQpO1xuICAgICAgICBnbC5ibGVuZEZ1bmNTZXBhcmF0ZShnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG5cbiAgICAgICAgdGhpcy5wcm9ncmFtLmRyYXcoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRvdXI7XG5leHBvcnQgdHlwZSB7Q29udG91ck9wdGlvbnN9OyIsImltcG9ydCB7IGhleDJyZ2IsIGhzdjJyZ2IsIHJnYjJoZXgsIHJnYjJoc3YgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5pbnRlcmZhY2UgQ29sb3Ige1xuICAgIC8qKiBUaGUgY29sb3IgYXMgYSBoZXggY29sb3Igc3RyaW5nICovXG4gICAgY29sb3I6IHN0cmluZztcblxuICAgIC8qKiBUaGUgb3BhY2l0eSBhcyBhIG51bWJlciBmcm9tIDAgdG8gMSAqL1xuICAgIG9wYWNpdHk6IG51bWJlcjtcbn1cblxuLyoqIEEgbWFwcGluZyBmcm9tIHZhbHVlcyB0byBjb2xvcnMgKi9cbmNsYXNzIENvbG9yTWFwIHtcbiAgICByZWFkb25seSBsZXZlbHM6IG51bWJlcltdO1xuICAgIHJlYWRvbmx5IGNvbG9yczogQ29sb3JbXTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNvbG9yIG1hcFxuICAgICAqIEBwYXJhbSBsZXZlbHMgLSBUaGUgbGlzdCBvZiBsZXZlbHMuIFRoZSBudW1iZXIgb2YgbGV2ZWxzIHNob3VsZCBhbHdheXMgYmUgb25lIG1vcmUgdGhhbiB0aGUgbnVtYmVyIG9mIGNvbG9ycy5cbiAgICAgKiBAcGFyYW0gY29sb3JzIC0gQSBsaXN0IG9mIGNvbG9yc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxldmVsczogbnVtYmVyW10sIGNvbG9yczogQ29sb3JbXSkge1xuICAgICAgICBpZiAobGV2ZWxzLmxlbmd0aCAhPSBjb2xvcnMubGVuZ3RoICsgMSkge1xuICAgICAgICAgICAgdGhyb3cgYE1pc21hdGNoIGJldHdlZW4gbnVtYmVyIG9mIGxldmVscyAoJHtsZXZlbHMubGVuZ3RofSkgYW5kIG51bWJlciBvZiBjb2xvcnMgKCR7Y29sb3JzLmxlbmd0aH07IGV4cGVjdGVkICR7bGV2ZWxzLmxlbmd0aCAtIDF9KWA7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxldmVscyA9IGxldmVscztcbiAgICAgICAgdGhpcy5jb2xvcnMgPSBjb2xvcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYW4gYXJyYXkgb2YgaGV4IGNvbG9yIHN0cmluZ3NcbiAgICAgKi9cbiAgICBnZXRDb2xvcnMoKSA6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sb3JzLm1hcChzID0+IHNbJ2NvbG9yJ10pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGFuIGFycmF5IG9mIG9wYWNpdGllcywgb25lIGZvciBlYWNoIGNvbG9yIGluIHRoZSBjb2xvciBtYXBcbiAgICAgKi9cbiAgICBnZXRPcGFjaXRpZXMoKSA6IG51bWJlcltdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sb3JzLm1hcChzID0+IHNbJ29wYWNpdHknXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZGl2ZXJnaW5nIGNvbG9yIG1hcCB1c2luZyB0d28gaW5wdXQgY29sb3JzXG4gICAgICogQHBhcmFtIGNvbG9yMSAgICAtIFRoZSBjb2xvciBjb3JyZXNwb25kaW5nIHRvIHRoZSBsb3dlc3QgdmFsdWUgaW4gdGhlIGNvbG9yIG1hcFxuICAgICAqIEBwYXJhbSBjb2xvcjIgICAgLSBUaGUgY29sb3IgY29ycmVzcG9uZGluZyB0byB0aGUgaGlnaGVzdCB2YWx1ZSBpbiB0aGUgY29sb3IgbWFwXG4gICAgICogQHBhcmFtIGxldmVsX21pbiAtIFRoZSBsb3dlc3QgdmFsdWUgaW4gdGhlIGNvbG9yIG1hcFxuICAgICAqIEBwYXJhbSBsZXZlbF9tYXggLSBUaGUgaGlnaGVzdCB2YWx1ZSBpbiB0aGUgY29sb3IgbWFwXG4gICAgICogQHBhcmFtIG5fY29sb3JzICAtIFRoZSBudW1iZXIgb2YgY29sb3JzIHRvIHVzZVxuICAgICAqIEByZXR1cm5zIGEgQ29sb3JtYXAgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIGRpdmVyZ2luZyhjb2xvcjE6IHN0cmluZywgY29sb3IyOiBzdHJpbmcsIGxldmVsX21pbjogbnVtYmVyLCBsZXZlbF9tYXg6IG51bWJlciwgbl9jb2xvcnM6IG51bWJlcikge1xuICAgICAgICBjb25zdCBzdG9wczogQ29sb3JbXSA9IFtdO1xuICAgICAgICBjb25zdCBsZXZlbHM6IG51bWJlcltdID0gW107XG5cbiAgICAgICAgY29uc3QgbGV2ZWxfc3RlcCA9IChsZXZlbF9tYXggLSBsZXZlbF9taW4pIC8gKG5fY29sb3JzIC0gMSk7XG4gICAgICAgIGNvbnN0IGNyb3Nzb3ZlciA9IChsZXZlbF9tYXggKyBsZXZlbF9taW4pIC8gMjtcbiAgICAgICAgY29uc3QgY3Jvc3NvdmVyX2hzdjogW251bWJlciwgbnVtYmVyLCBudW1iZXJdID0gWzAsIDAsIDAuOV07XG5cbiAgICAgICAgY29uc3QgY29sb3IxX2hzdiA9IHJnYjJoc3YoaGV4MnJnYihjb2xvcjEpKTtcbiAgICAgICAgY29uc3QgY29sb3IyX2hzdiA9IHJnYjJoc3YoaGV4MnJnYihjb2xvcjIpKTtcblxuICAgICAgICBmb3IgKGxldCBpc3RvcCA9IDA7IGlzdG9wIDwgbl9jb2xvcnM7IGlzdG9wKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxldmVsID0gbGV2ZWxfbWluICsgaXN0b3AgKiBsZXZlbF9zdGVwO1xuICAgICAgICAgICAgbGV0IGgsIHMsIHY7XG4gICAgICAgICAgICBsZXQgaW50ZXJwX2ZhYztcbiAgICAgICAgICAgIGlmIChsZXZlbCA8IGNyb3Nzb3Zlcikge1xuICAgICAgICAgICAgICAgIGludGVycF9mYWMgPSAoY3Jvc3NvdmVyIC0gbGV2ZWwpIC8gKGNyb3Nzb3ZlciAtIGxldmVsX21pbik7XG5cbiAgICAgICAgICAgICAgICBbaCwgcywgdl0gPSBbXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yMV9oc3ZbMF0sIFxuICAgICAgICAgICAgICAgICAgICBjcm9zc292ZXJfaHN2WzFdICsgKGNvbG9yMV9oc3ZbMV0gLSBjcm9zc292ZXJfaHN2WzFdKSAqIGludGVycF9mYWMsXG4gICAgICAgICAgICAgICAgICAgIGNyb3Nzb3Zlcl9oc3ZbMl0gKyAoY29sb3IxX2hzdlsyXSAtIGNyb3Nzb3Zlcl9oc3ZbMl0pICogaW50ZXJwX2ZhY11cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGxldmVsID49IGNyb3Nzb3Zlcikge1xuICAgICAgICAgICAgICAgIGludGVycF9mYWMgPSAobGV2ZWwgLSBjcm9zc292ZXIpIC8gKGxldmVsX21heCAtIGNyb3Nzb3Zlcik7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgW2gsIHMsIHZdID0gW1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjJfaHN2WzBdLCBcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3NvdmVyX2hzdlsxXSArIChjb2xvcjJfaHN2WzFdIC0gY3Jvc3NvdmVyX2hzdlsxXSkgKiBpbnRlcnBfZmFjLFxuICAgICAgICAgICAgICAgICAgICBjcm9zc292ZXJfaHN2WzJdICsgKGNvbG9yMl9oc3ZbMl0gLSBjcm9zc292ZXJfaHN2WzJdKSAqIGludGVycF9mYWNdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb2xvciA9IHJnYjJoZXgoaHN2MnJnYihbaCwgcywgdl0pKTtcbiAgICAgICAgICAgIHN0b3BzLnB1c2goeydjb2xvcic6IGNvbG9yLCAnb3BhY2l0eSc6IE1hdGgubWluKDIgKiBpbnRlcnBfZmFjLCAxKX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaWxldiA9IDA7IGlsZXYgPD0gbl9jb2xvcnM7IGlsZXYrKykge1xuICAgICAgICAgICAgY29uc3QgbGV2ZWxfc3RlcCA9IChsZXZlbF9tYXggLSBsZXZlbF9taW4pIC8gbl9jb2xvcnM7XG4gICAgICAgICAgICBsZXZlbHMucHVzaChsZXZlbF9taW4gKyBpbGV2ICogbGV2ZWxfc3RlcCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IENvbG9yTWFwKGxldmVscywgc3RvcHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGRpdmVyZ2luZyByZWQvYmx1ZSBjb2xvcm1hcCwgd2hlcmUgcmVkIGNvcnJlc3BvbmRzIHRvIHRoZSBsb3dlc3QgdmFsdWUgYW5kIGJsdWUgY29ycmVzcG9uZHMgdG8gdGhlIGhpZ2hlc3QgdmFsdWVcbiAgICAgKiBAcGFyYW0gbGV2ZWxfbWluIC0gVGhlIGxvd2VzdCB2YWx1ZSBpbiB0aGUgY29sb3IgbWFwXG4gICAgICogQHBhcmFtIGxldmVsX21heCAtIFRoZSBoaWdoZXN0IHZhbHVlIGluIHRoZSBjb2xvciBtYXBcbiAgICAgKiBAcGFyYW0gbl9jb2xvcnMgIC0gVGhlIG51bWJlciBvZiBjb2xvcnNcbiAgICAgKiBAcmV0dXJucyBhIENvbG9ybWFwIG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyByZWRibHVlKGxldmVsX21pbjogbnVtYmVyLCBsZXZlbF9tYXg6IG51bWJlciwgbl9jb2xvcnM6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gQ29sb3JNYXAuZGl2ZXJnaW5nKCcjZmYwMDAwJywgJyMwMDAwZmYnLCBsZXZlbF9taW4sIGxldmVsX21heCwgbl9jb2xvcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGRpdmVyZ2luZyBibHVlL3JlZCBjb2xvcm1hcCwgd2hlcmUgYmx1ZSBjb3JyZXNwb25kcyB0byB0aGUgbG93ZXN0IHZhbHVlIGFuZCByZWQgY29ycmVzcG9uZHMgdG8gdGhlIGhpZ2hlc3QgdmFsdWVcbiAgICAgKiBAcGFyYW0gbGV2ZWxfbWluIC0gVGhlIGxvd2VzdCB2YWx1ZSBpbiB0aGUgY29sb3IgbWFwXG4gICAgICogQHBhcmFtIGxldmVsX21heCAtIFRoZSBoaWdoZXN0IHZhbHVlIGluIHRoZSBjb2xvciBtYXBcbiAgICAgKiBAcGFyYW0gbl9jb2xvcnMgIC0gVGhlIG51bWJlciBvZiBjb2xvcnNcbiAgICAgKiBAcmV0dXJucyBhIENvbG9ybWFwIG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBibHVlcmVkKGxldmVsX21pbjogbnVtYmVyLCBsZXZlbF9tYXg6IG51bWJlciwgbl9jb2xvcnM6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gQ29sb3JNYXAuZGl2ZXJnaW5nKCcjMDAwMGZmJywgJyNmZjAwMDAnLCBsZXZlbF9taW4sIGxldmVsX21heCwgbl9jb2xvcnMpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBNYWtlIGEgY2FudmFzIGltYWdlIGNvcnJlc3BvbmRpbmcgdG8gYSBjb2xvciBtYXBcbiAqIEBwYXJhbSBjb2xvcm1hcCAtIFRoZSBjb2xvciBtYXAgdG8gdXNlXG4gKiBAcmV0dXJucyBBIGNhbnZhcyBlbGVtZW50IGNvbnRhaW5pbmcgZWFjaCBjb2xvciBvZiB0aGUgY29sb3IgbWFwXG4gKi9cbmZ1bmN0aW9uIG1ha2VUZXh0dXJlSW1hZ2UoY29sb3JtYXA6IENvbG9yTWFwKSB7XG4gICAgY29uc3QgY21hcF9pbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNtYXBfaW1hZ2Uud2lkdGggPSBjb2xvcm1hcC5jb2xvcnMubGVuZ3RoO1xuICAgIGNtYXBfaW1hZ2UuaGVpZ2h0ID0gMTtcblxuICAgIGxldCBjdHggPSBjbWFwX2ltYWdlLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICBjb2xvcm1hcC5jb2xvcnMuZm9yRWFjaCgoc3RvcCwgaXN0b3ApID0+IHtcbiAgICAgICAgaWYgKGN0eCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgXCJDb3VsZCBub3QgZ2V0IHJlbmRlcmluZyBjb250ZXh0IGZvciBjb2xvcm1hcCBpbWFnZSBjYW52YXNcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBzdG9wWydjb2xvciddICsgTWF0aC5yb3VuZChzdG9wWydvcGFjaXR5J10gKiAyNTUpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgY3R4LmZpbGxSZWN0KGlzdG9wLCAwLCAxLCAxKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjbWFwX2ltYWdlO1xufVxuXG50eXBlIENvbG9yYmFyT3JpZW50YXRpb24gPSAnaG9yaXpvbnRhbCcgfCAndmVydGljYWwnO1xudHlwZSBDb2xvcmJhclRpY2tEaXJlY3Rpb24gPSAndG9wJyB8ICdib3R0b20nIHwgJ2xlZnQnIHwgJ3JpZ2h0JztcbmludGVyZmFjZSBDb2xvckJhck9wdGlvbnMge1xuICAgIC8qKiBUaGUgbGFiZWwgdG8gcGxhY2UgYWxvbmcgdGhlIGNvbG9yIGJhciAqL1xuICAgIGxhYmVsPzogc3RyaW5nO1xuXG4gICAgLyoqIFxuICAgICAqIEFuIGFycmF5IG9mIG51bWJlcnMgdG8gdXNlIGFzIHRoZSB0aWNrIGxvY2F0aW9ucy4gXG4gICAgICogQGRlZmF1bHQgVXNlIGFsbCB0aGUgbGV2ZWxzIGluIHRoZSBjb2xvciBtYXAgcHJvdmlkZWQgdG8ge0BsaW5rIG1ha2VDb2xvckJhcn0uXG4gICAgICovXG4gICAgdGlja3M/OiBudW1iZXJbXTtcblxuICAgIC8qKiBcbiAgICAgKiBUaGUgZGlyZWN0aW9uIHRoZSB0aWNrcyBzaG91bGQgZmFjZS4gVmFsaWQgdmFsdWVzIGFyZSAnbGVmdCcgYW5kICdyaWdodCcgaWYgb3JpZW50YXRpb24gaXMgJ3ZlcnRpY2FsJyBhbmQgJ3RvcCcgYW5kIFxuICAgICAqICdib3R0b20nIGlmIG9yaWVudGF0aW9uIGlzICdob3Jpem9udGFsJy5cbiAgICAgKiBAZGVmYXVsdCAnbGVmdCcgaWYgb3JpZW50YXRpb24gaXMgJ3ZlcnRpY2FsJyBhbmQgJ2JvdHRvbScgaWYgb3JpZW50YXRpb24gaXMgJ2hvcml6b250YWwnXG4gICAgICovXG4gICAgdGlja19kaXJlY3Rpb24/OiBDb2xvcmJhclRpY2tEaXJlY3Rpb247XG5cbiAgICAvKiogXG4gICAgICogVGhlIG9yaWVudGF0aW9uIGZvciB0aGUgY29sb3IgYmFyLiBWYWxpZCB2YWx1ZXMgYXJlICdob3Jpem9udGFsJyBhbmQgJ3ZlcnRpY2FsJy5cbiAgICAgKiBAZGVmYXVsdCAndmVydGljYWwnXG4gICAgICovXG4gICAgb3JpZW50YXRpb24/OiBDb2xvcmJhck9yaWVudGF0aW9uO1xuXG4gICAgLyoqIFxuICAgICAqIEEgZm9udCBmYWNlIHRvIHVzZSBmb3IgdGhlIGxhYmVsIGFuZCB0aWNrIHZhbHVlcy5cbiAgICAgKiBAZGVmYXVsdCAnc2Fucy1zZXJpZidcbiAgICAgKi9cbiAgICBmb250ZmFjZT86IHN0cmluZztcbn07XG5cbi8qKlxuICogTWFrZSBhbiBTVkcgY29udGFpbmluZyBhIGNvbG9yIGJhci4gVGhlIGNvbG9yIGJhciBjYW4gZWl0aGVyIGJlIG9yaWVudGVkIGhvcml6b250YWwgb3IgdmVydGljYWwsIGFuZCBhIGxhYmVsIGNhbiBiZSBwcm92aWRlZC5cbiAqIEBwYXJhbSBjb2xvcm1hcCAtIFRoZSBjb2xvciBtYXAgdG8gdXNlXG4gKiBAcGFyYW0gb3B0cyAgICAgLSBUaGUgb3B0aW9ucyBmb3IgY3JlYXRpbmcgdGhlIGNvbG9yIGJhclxuICogQHJldHVybnMgQW4gU1ZHRWxlbWVudCBjb250YWluaW5nIHRoZSBjb2xvciBiYXIgaW1hZ2UuXG4gKiBAZXhhbXBsZVxuICogLy8gQ3JlYXRlIHRoZSBjb2xvciBiYXJcbiAqIGNvbnN0IHN2ZyA9IG1ha2VDb2xvckJhcihjb2xvcl9tYXAsIHtsYWJlbDogJ1dpbmQgU3BlZWQgKGt0cyknLCBvcmllbnRhdGlvbjogJ2hvcml6b250YWwnLCBcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250ZmFjZTogJ1RyZWJ1Y2hldCBNUyd9KTtcbiAqIFxuICogLy8gQWRkIGNvbG9yYmFyIHRvIHRoZSBwYWdlXG4gKiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29sb3JiYXItY29udGFpbmVyJykuYXBwZW5kQ2hpbGQoc3ZnKTtcbiAqL1xuZnVuY3Rpb24gbWFrZUNvbG9yQmFyKGNvbG9ybWFwOiBDb2xvck1hcCwgb3B0czogQ29sb3JCYXJPcHRpb25zKSB7XG4gICAgY29uc3QgbGFiZWwgPSBvcHRzLmxhYmVsIHx8IFwiXCI7XG4gICAgY29uc3QgdGlja3MgPSBvcHRzLnRpY2tzIHx8IGNvbG9ybWFwLmxldmVscztcbiAgICBjb25zdCBvcmllbnRhdGlvbiA9IG9wdHMub3JpZW50YXRpb24gfHwgJ3ZlcnRpY2FsJztcbiAgICBjb25zdCBmb250ZmFjZSA9IG9wdHMuZm9udGZhY2UgfHwgJ3NhbnMtc2VyaWYnO1xuXG4gICAgY29uc3QgdGlja19kaXIgPSBvcHRzLnRpY2tfZGlyZWN0aW9uIHx8IChvcmllbnRhdGlvbiA9PSAndmVydGljYWwnID8gJ2xlZnQnIDogJ2JvdHRvbScpO1xuXG4gICAgaWYgKG9yaWVudGF0aW9uID09ICd2ZXJ0aWNhbCcgJiYgKHRpY2tfZGlyID09ICd0b3AnIHx8IHRpY2tfZGlyID09ICdib3R0b20nKSB8fFxuICAgICAgICBvcmllbnRhdGlvbiA9PSAnaG9yaXpvbnRhbCcgJiYgKHRpY2tfZGlyID09ICdsZWZ0JyB8fCB0aWNrX2RpciA9PSAncmlnaHQnKSkge1xuICAgICAgICB0aHJvdyBgdGlja19kaXJlY3Rpb24gb2YgJyR7dGlja19kaXJ9IGRvZXNuJ3QgbWF0Y2ggYW4gb3JpZW50YXRpb24gb2YgJHtvcmllbnRhdGlvbn1gO1xuICAgIH1cblxuICAgIGNvbnN0IGNyZWF0ZUVsZW1lbnQgPSAodGFnbmFtZTogc3RyaW5nLCBhdHRyaWJ1dGVzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyPiwgcGFyZW50PzogU1ZHRWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIHRhZ25hbWUpO1xuXG4gICAgICAgIGlmIChhdHRyaWJ1dGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGF0dHJpYnV0ZXMpLmZvckVhY2goKFtrLCB2XSkgPT4ge1xuICAgICAgICAgICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKGssIHYudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGVsZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgfTtcblxuICAgIGNvbnN0IGJhcl9sb25nX3NpemUgPSA2MDA7XG4gICAgY29uc3QgYmFyX2Nyb3NzX3NpemUgPSBiYXJfbG9uZ19zaXplIC8gOTtcbiAgICBjb25zdCBiYXJfbG9uZ19wYWQgPSAxMTtcbiAgICBjb25zdCBiYXJfY3Jvc3NfcGFkID0gMztcbiAgICBjb25zdCBiYXJfdGhpY2tuZXNzID0gMTA7XG5cbiAgICBsZXQgaGVpZ2h0OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGJhcl9sZWZ0OiBudW1iZXIsIGJhcl90b3A6IG51bWJlciwgYmFyX3dpZHRoOiBudW1iZXIsIGJhcl9oZWlnaHQ6IG51bWJlcjtcblxuICAgIGlmIChvcmllbnRhdGlvbiA9PSAndmVydGljYWwnKSB7XG4gICAgICAgIGhlaWdodCA9IGJhcl9sb25nX3NpemU7XG4gICAgICAgIHdpZHRoID0gYmFyX2Nyb3NzX3NpemU7XG5cbiAgICAgICAgYmFyX2xlZnQgPSB0aWNrX2RpciA9PSAnbGVmdCcgPyBiYXJfY3Jvc3Nfc2l6ZSAtIGJhcl9jcm9zc19wYWQgLSBiYXJfdGhpY2tuZXNzIDogYmFyX2Nyb3NzX3BhZDtcbiAgICAgICAgYmFyX3RvcCA9IGJhcl9sb25nX3BhZDtcbiAgICAgICAgYmFyX3dpZHRoID0gYmFyX3RoaWNrbmVzcztcbiAgICAgICAgYmFyX2hlaWdodCA9IGJhcl9sb25nX3NpemUgLSAyICogYmFyX2xvbmdfcGFkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgd2lkdGggPSBiYXJfbG9uZ19zaXplO1xuICAgICAgICBoZWlnaHQgPSBiYXJfY3Jvc3Nfc2l6ZSAtIDY7XG5cbiAgICAgICAgYmFyX2xlZnQgPSBiYXJfbG9uZ19wYWQ7XG4gICAgICAgIGJhcl90b3AgPSB0aWNrX2RpciA9PSAnYm90dG9tJyA/IGJhcl9jcm9zc19wYWQgOiBiYXJfY3Jvc3Nfc2l6ZSAtIDYgLSBiYXJfY3Jvc3NfcGFkIC0gYmFyX3RoaWNrbmVzcztcbiAgICAgICAgYmFyX2hlaWdodCA9IGJhcl90aGlja25lc3M7XG4gICAgICAgIGJhcl93aWR0aCA9IGJhcl9sb25nX3NpemUgLSAyICogYmFyX2xvbmdfcGFkO1xuICAgIH1cblxuICAgIGNvbnN0IG5fY29sb3JzID0gY29sb3JtYXAuY29sb3JzLmxlbmd0aDtcblxuICAgIGNvbnN0IHJvb3QgPSBjcmVhdGVFbGVtZW50KCdzdmcnLCB7d2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodH0pO1xuICAgIGNvbnN0IGdiYXIgPSBjcmVhdGVFbGVtZW50KCdnJywge30sIHJvb3QpO1xuXG4gICAgbGV0IGd0aWNrYXR0cnM7XG4gICAgaWYgKG9yaWVudGF0aW9uID09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgZ3RpY2thdHRycyA9IHRpY2tfZGlyID09ICdsZWZ0JyA/IHsndGV4dC1hbmNob3InOiAnZW5kJywgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7YmFyX2xlZnR9LCAke2Jhcl90b3B9KWB9IDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7YmFyX2xlZnQgKyBiYXJfd2lkdGh9LCAke2Jhcl90b3B9KWB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBndGlja2F0dHJzID0gdGlja19kaXIgPT0gJ2JvdHRvbScgPyB7J3RleHQtYW5jaG9yJzogJ21pZGRsZScsIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgke2Jhcl9sZWZ0fSwgJHtiYXJfdG9wICsgYmFyX2hlaWdodH0pYH0gOiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyd0ZXh0LWFuY2hvcic6ICdtaWRkbGUnLCB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHtiYXJfbGVmdH0sICR7YmFyX3RvcH0pYH1cbiAgICB9XG4gICAgY29uc3QgZ3RpY2tzID0gY3JlYXRlRWxlbWVudCgnZycsIGd0aWNrYXR0cnMsIHJvb3QpO1xuXG4gICAgY29sb3JtYXAuY29sb3JzLmZvckVhY2goKGNvbG9yLCBpY29sb3IpID0+IHtcbiAgICAgICAgbGV0IGF0dHJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXI+ID0ge307XG5cbiAgICAgICAgaWYgKG9yaWVudGF0aW9uID09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIGF0dHJzID0ge1xuICAgICAgICAgICAgICAgIHg6IGJhcl9sZWZ0LCB5OiBiYXJfdG9wICsgYmFyX2hlaWdodCAqICgxIC0gKGljb2xvciArIDEpIC8gbl9jb2xvcnMpLCB3aWR0aDogYmFyX3dpZHRoLCBoZWlnaHQ6IGJhcl9oZWlnaHQgLyBuX2NvbG9yc307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhdHRycyA9IHt4OiBiYXJfbGVmdCArIGJhcl93aWR0aCAqIGljb2xvciAvIG5fY29sb3JzLCB5OiBiYXJfdG9wLCB3aWR0aDogYmFyX3dpZHRoIC8gbl9jb2xvcnMsIGhlaWdodDogYmFyX2hlaWdodH07XG4gICAgICAgIH1cblxuICAgICAgICBjcmVhdGVFbGVtZW50KCdyZWN0Jywgey4uLmF0dHJzLCBmaWxsOiBjb2xvci5jb2xvciwgb3BhY2l0eTogY29sb3Iub3BhY2l0eX0sIGdiYXIpO1xuICAgIH0pO1xuXG4gICAgdGlja3MuZm9yRWFjaChsZXZlbCA9PiB7XG4gICAgICAgIGNvbnN0IGlsZXZlbCA9IGNvbG9ybWFwLmxldmVscy5pbmRleE9mKGxldmVsKTtcbiAgICAgICAgY29uc3QgdGlja2F0dHJzID0gb3JpZW50YXRpb24gPT0gJ3ZlcnRpY2FsJyA/IHt0cmFuc2Zvcm06IGB0cmFuc2xhdGUoMCwgJHtiYXJfaGVpZ2h0ICogKDEgLSBpbGV2ZWwgLyBuX2NvbG9ycyl9KWB9IDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7YmFyX3dpZHRoICogaWxldmVsIC8gbl9jb2xvcnN9LCAwKWB9O1xuICAgICAgICBjb25zdCBndGljayA9IGNyZWF0ZUVsZW1lbnQoJ2cnLCB0aWNrYXR0cnMsIGd0aWNrcyk7XG5cbiAgICAgICAgbGV0IGxpbmVhdHRycztcbiAgICAgICAgaWYgKG9yaWVudGF0aW9uID09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIGxpbmVhdHRycyA9IHRpY2tfZGlyID09ICdsZWZ0JyA/IHt4MjogLTZ9IDoge3gyOiA2fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVhdHRycyA9IHRpY2tfZGlyID09ICdib3R0b20nID8ge3kyIDogNn0gOiB7eTI6IC02fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNyZWF0ZUVsZW1lbnQoJ2xpbmUnLCB7Li4ubGluZWF0dHJzLCBzdHJva2U6ICcjMDAwMDAwJywgJ3N0cm9rZS13aWR0aCc6IDEuNX0sIGd0aWNrKTtcblxuICAgICAgICBsZXQgdGV4dGF0dHJzO1xuICAgICAgICBpZiAob3JpZW50YXRpb24gPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgICAgdGV4dGF0dHJzID0gdGlja19kaXIgPT0gJ2xlZnQnID8ge3g6IC05LCBkeTogJzAuMzJlbSd9IDoge3g6IDksIGR5OiAnMC4zMmVtJ307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0ZXh0YXR0cnMgPSB0aWNrX2RpciA9PSAnYm90dG9tJyA/IHt5OiA5LCBkeTogJzAuOGVtJ30gOiB7eTogLTksIGR5OiAnMGVtJ307XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0ZXh0ID0gY3JlYXRlRWxlbWVudCgndGV4dCcsIHsuLi50ZXh0YXR0cnMsIGZpbGw6ICcjMDAwMDAwJywgc3R5bGU6IGBmb250LWZhbWlseTogJHtmb250ZmFjZX07YH0sIGd0aWNrKTtcbiAgICAgICAgdGV4dC50ZXh0Q29udGVudCA9IGxldmVsLnRvU3RyaW5nKCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBvdXRsaW5lX2F0dHJzID0ge1xuICAgICAgICB4OiBiYXJfbGVmdCxcbiAgICAgICAgeTogYmFyX3RvcCxcbiAgICAgICAgd2lkdGg6IGJhcl93aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBiYXJfaGVpZ2h0LFxuICAgICAgICBzdHJva2U6ICcjMDAwMDAwJyxcbiAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDEuNSxcbiAgICAgICAgZmlsbDogJ25vbmUnXG4gICAgfTtcbiAgICBjcmVhdGVFbGVtZW50KCdyZWN0Jywgb3V0bGluZV9hdHRycywgcm9vdCk7XG5cbiAgICBsZXQgbGFiZWxhdHRycztcbiAgICBpZiAob3JpZW50YXRpb24gPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBsYWJlbGF0dHJzID0gdGlja19kaXIgPT0gJ2xlZnQnID8ge3RyYW5zZm9ybTogYHRyYW5zbGF0ZSgxNSwgJHtoZWlnaHQgLyAyfSkgcm90YXRlKC05MClgfSA6IHt0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHt3aWR0aCAtIDZ9LCAke2hlaWdodCAvIDJ9KSByb3RhdGUoLTkwKWB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGFiZWxhdHRycyA9IHRpY2tfZGlyID09ICdib3R0b20nID8ge3RyYW5zZm9ybTogYHRyYW5zbGF0ZSgke3dpZHRoIC8gMn0sICR7aGVpZ2h0IC0gNX0pYH0gOiB7dHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7d2lkdGggLyAyfSwgMTUpYH1cbiAgICB9XG4gICAgY29uc3QgbGFiZWxfZWxlbSA9IGNyZWF0ZUVsZW1lbnQoJ3RleHQnLCB7Li4ubGFiZWxhdHRycywgZmlsbDogJyMwMDAwMDAnLCAndGV4dC1hbmNob3InOiAnbWlkZGxlJywgc3R5bGU6IGBmb250LWZhbWlseTogJHtmb250ZmFjZX07YH0sIHJvb3QpO1xuICAgIGxhYmVsX2VsZW0udGV4dENvbnRlbnQgPSBsYWJlbDtcblxuICAgIHJldHVybiByb290O1xufVxuXG5leHBvcnQge0NvbG9yTWFwLCBtYWtlQ29sb3JCYXIsIG1ha2VUZXh0dXJlSW1hZ2V9XG5leHBvcnQgdHlwZSB7Q29sb3IsIENvbG9yYmFyT3JpZW50YXRpb24sIENvbG9yYmFyVGlja0RpcmVjdGlvbiwgQ29sb3JCYXJPcHRpb25zfTsiLCJcbmltcG9ydCB7IFBsb3RDb21wb25lbnQsIGxheWVyX3dvcmtlciB9IGZyb20gJy4vUGxvdENvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2xvck1hcCwgbWFrZVRleHR1cmVJbWFnZSB9IGZyb20gJy4vQ29sb3JNYXAnO1xuaW1wb3J0IHsgV0dMQnVmZmVyLCBXR0xQcm9ncmFtLCBXR0xUZXh0dXJlIH0gZnJvbSAnLi93Z2wnO1xuaW1wb3J0IHsgUmF3U2NhbGFyRmllbGQgfSBmcm9tICcuL1Jhd0ZpZWxkJztcbmltcG9ydCB7IE1hcFR5cGUgfSBmcm9tICcuL01hcCc7XG5cbmludGVyZmFjZSBDb250b3VyRmlsbE9wdGlvbnMge1xuICAgIC8qKiBUaGUgY29sb3IgbWFwIHRvIHVzZSB3aGVuIGNyZWF0aW5nIHRoZSBmaWxscyAqL1xuICAgIGNtYXA6IENvbG9yTWFwO1xuXG4gICAgLyoqIFxuICAgICAqIFRoZSBvcGFjaXR5IGZvciB0aGUgZmlsbGVkIGNvbnRvdXJzIFxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cbiAgICBvcGFjaXR5PzogbnVtYmVyO1xufVxuXG4vKiogXG4gKiBBIGZpbGxlZCBjb250b3VyZWQgZmllbGQgXG4gKiBAZXhhbXBsZVxuICogLy8gQ3JlYXRlIGEgZmllbGQgb2YgZmlsbGVkIGNvbnRvdXJzIHdpdGggdGhlIHByb3ZpZGVkIGNvbG9yIG1hcFxuICogY29uc3QgZmlsbCA9IG5ldyBDb250b3VyRmlsbCh3aW5kX3NwZWVkX2ZpZWxkLCB7Y21hcDogY29sb3JfbWFwfSk7XG4gKi9cbmNsYXNzIENvbnRvdXJGaWxsIGV4dGVuZHMgUGxvdENvbXBvbmVudCB7XG4gICAgcmVhZG9ubHkgZmllbGQ6IFJhd1NjYWxhckZpZWxkO1xuICAgIHJlYWRvbmx5IGNtYXA6IENvbG9yTWFwO1xuICAgIHJlYWRvbmx5IG9wYWNpdHk6IG51bWJlcjtcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHJlYWRvbmx5IGNtYXBfaW1hZ2U6IEhUTUxDYW52YXNFbGVtZW50O1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHJlYWRvbmx5IGluZGV4X21hcDogRmxvYXQzMkFycmF5O1xuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgcHJvZ3JhbTogV0dMUHJvZ3JhbSB8IG51bGw7XG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdmVydGljZXM6IFdHTEJ1ZmZlciB8IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICBmaWxsX3RleHR1cmU6IFdHTFRleHR1cmUgfCBudWxsO1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRleGNvb3JkczogV0dMQnVmZmVyIHwgbnVsbDtcbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICBjbWFwX3RleHR1cmU6IFdHTFRleHR1cmUgfCBudWxsO1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIGNtYXBfbm9ubGluX3RleHR1cmU6IFdHTFRleHR1cmUgfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZmlsbGVkIGNvbnRvdXJlZCBmaWVsZFxuICAgICAqIEBwYXJhbSBmaWVsZCAtIFRoZSBmaWVsZCB0byBjcmVhdGUgZmlsbGVkIGNvbnRvdXJzIGZyb21cbiAgICAgKiBAcGFyYW0gb3B0cyAgLSBPcHRpb25zIGZvciBjcmVhdGluZyB0aGUgZmlsbGVkIGNvbnRvdXJzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZmllbGQ6IFJhd1NjYWxhckZpZWxkLCBvcHRzOiBDb250b3VyRmlsbE9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmZpZWxkID0gZmllbGQ7XG4gICAgICAgIHRoaXMuY21hcCA9IG9wdHMuY21hcDtcbiAgICAgICAgdGhpcy5vcGFjaXR5ID0gb3B0cy5vcGFjaXR5IHx8IDEuO1xuXG4gICAgICAgIHRoaXMuY21hcF9pbWFnZSA9IG1ha2VUZXh0dXJlSW1hZ2UodGhpcy5jbWFwKTtcblxuICAgICAgICBjb25zdCBsZXZlbHMgPSB0aGlzLmNtYXAubGV2ZWxzO1xuICAgICAgICBjb25zdCBuX2xldiA9IGxldmVscy5sZW5ndGggLSAxO1xuXG4gICAgICAgIC8vIEJ1aWxkIGEgdGV4dHVyZSB0byBhY2NvdW50IGZvciBub25saW5lYXIgY29sb3JtYXBzIChiYXNpY2FsbHkgaW52ZXJ0cyB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW5cbiAgICAgICAgLy8gIHRoZSBub3JtYWxpemVkIGluZGV4IGFuZCB0aGUgbm9ybWFsaXplZCBsZXZlbClcbiAgICAgICAgY29uc3Qgbl9ub25saW4gPSAxMDE7XG4gICAgICAgIGNvbnN0IG1hcF9ub3JtID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbl9ub25saW47IGkrKykge1xuICAgICAgICAgICAgbWFwX25vcm0ucHVzaChpIC8gKG5fbm9ubGluIC0gMSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaW5wdXRfbm9ybSA9IGxldmVscy5tYXAoKGxldiwgaWxldikgPT4gaWxldiAvIG5fbGV2KTtcbiAgICAgICAgY29uc3QgY21hcF9ub3JtID0gbGV2ZWxzLm1hcChsZXYgPT4gKGxldiAtIGxldmVsc1swXSkgLyAobGV2ZWxzW25fbGV2XSAtIGxldmVsc1swXSkpO1xuICAgICAgICBjb25zdCBpbnZfY21hcF9ub3JtID0gbWFwX25vcm0ubWFwKGxldiA9PiB7XG4gICAgICAgICAgICBsZXQgamxldjtcbiAgICAgICAgICAgIGZvciAoamxldiA9IDA7ICEoY21hcF9ub3JtW2psZXZdIDw9IGxldiAmJiBsZXYgPD0gY21hcF9ub3JtW2psZXYgKyAxXSk7IGpsZXYrKykge31cblxuICAgICAgICAgICAgY29uc3QgYWxwaGEgPSAobGV2IC0gY21hcF9ub3JtW2psZXZdKSAvIChjbWFwX25vcm1bamxldiArIDFdIC0gY21hcF9ub3JtW2psZXZdKTtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dF9ub3JtW2psZXZdICogKDEgLSBhbHBoYSkgKyBpbnB1dF9ub3JtW2psZXYgKyAxXSAqIGFscGhhO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmluZGV4X21hcCA9IG5ldyBGbG9hdDMyQXJyYXkoaW52X2NtYXBfbm9ybSk7XG5cbiAgICAgICAgdGhpcy5wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgdGhpcy52ZXJ0aWNlcyA9IG51bGw7XG4gICAgICAgIHRoaXMuZmlsbF90ZXh0dXJlID0gbnVsbDtcbiAgICAgICAgdGhpcy50ZXhjb29yZHMgPSBudWxsO1xuICAgICAgICB0aGlzLmNtYXBfdGV4dHVyZSA9IG51bGw7XG4gICAgICAgIHRoaXMuY21hcF9ub25saW5fdGV4dHVyZSA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICogQWRkIHRoZSBmaWxsZWQgY29udG91cnMgdG8gYSBtYXBcbiAgICAgKi9cbiAgICBhc3luYyBvbkFkZChtYXA6IE1hcFR5cGUsIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgICAgICAgLy8gQmFzaWMgcHJvY2VkdXJlIGZvciB0aGUgZmlsbGVkIGNvbnRvdXJzIGluc3BpcmVkIGJ5IGh0dHBzOi8vYmxvZy5tYnEubWUvd2ViZ2wtd2VhdGhlci1nbG9iZS9cbiAgICAgICAgZ2wuZ2V0RXh0ZW5zaW9uKCdPRVNfdGV4dHVyZV9mbG9hdCcpO1xuICAgICAgICBnbC5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicpO1xuXG4gICAgICAgIGNvbnN0IHZlcnRleFNvdXJjZSA9IGBcbiAgICAgICAgdW5pZm9ybSBtYXQ0IHVfbWF0cml4O1xuXG4gICAgICAgIGF0dHJpYnV0ZSB2ZWMyIGFfcG9zO1xuICAgICAgICBhdHRyaWJ1dGUgdmVjMiBhX3RleF9jb29yZDtcblxuICAgICAgICB2YXJ5aW5nIGhpZ2hwIHZlYzIgdl90ZXhfY29vcmQ7XG5cbiAgICAgICAgdm9pZCBtYWluKCkge1xuICAgICAgICAgICAgZ2xfUG9zaXRpb24gPSB1X21hdHJpeCAqIHZlYzQoYV9wb3MsIDAuMCwgMS4wKTtcbiAgICAgICAgICAgIHZfdGV4X2Nvb3JkID0gYV90ZXhfY29vcmQ7XG4gICAgICAgIH1gO1xuICAgICAgICBcbiAgICAgICAgLy8gY3JlYXRlIEdMU0wgc291cmNlIGZvciBmcmFnbWVudCBzaGFkZXJcbiAgICAgICAgY29uc3QgZnJhZ21lbnRTb3VyY2UgPSBgXG4gICAgICAgIHZhcnlpbmcgaGlnaHAgdmVjMiB2X3RleF9jb29yZDtcblxuICAgICAgICB1bmlmb3JtIHNhbXBsZXIyRCB1X2ZpbGxfc2FtcGxlcjtcbiAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgdV9jbWFwX3NhbXBsZXI7XG4gICAgICAgIHVuaWZvcm0gc2FtcGxlcjJEIHVfY21hcF9ub25saW5fc2FtcGxlcjtcbiAgICAgICAgdW5pZm9ybSBoaWdocCBmbG9hdCB1X2NtYXBfbWluO1xuICAgICAgICB1bmlmb3JtIGhpZ2hwIGZsb2F0IHVfY21hcF9tYXg7XG4gICAgICAgIHVuaWZvcm0gaGlnaHAgZmxvYXQgdV9vcGFjaXR5O1xuICAgICAgICB1bmlmb3JtIGludCB1X25faW5kZXg7XG5cbiAgICAgICAgdm9pZCBtYWluKCkge1xuICAgICAgICAgICAgbG93cCBmbG9hdCBpbmRleF9idWZmZXIgPSAxLiAvICgyLiAqIGZsb2F0KHVfbl9pbmRleCkpO1xuICAgICAgICAgICAgaGlnaHAgZmxvYXQgZmlsbF92YWwgPSB0ZXh0dXJlMkQodV9maWxsX3NhbXBsZXIsIHZfdGV4X2Nvb3JkKS5yO1xuICAgICAgICAgICAgbG93cCBmbG9hdCBub3JtZWRfdmFsID0gKGZpbGxfdmFsIC0gdV9jbWFwX21pbikgLyAodV9jbWFwX21heCAtIHVfY21hcF9taW4pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAobm9ybWVkX3ZhbCA8IDAuMCB8fCBub3JtZWRfdmFsID4gMS4wKSB7XG4gICAgICAgICAgICAgICAgZGlzY2FyZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbm9ybWVkX3ZhbCA9IGluZGV4X2J1ZmZlciArIG5vcm1lZF92YWwgKiAoMS4gLSAyLiAqIGluZGV4X2J1ZmZlcik7IC8vIENob3Agb2ZmIHRoZSBoYWxmIHBpeGVscyBvbiBlaXRoZXIgZW5kIG9mIHRoZSB0ZXh0dXJlXG4gICAgICAgICAgICBoaWdocCBmbG9hdCBub25saW5fdmFsID0gdGV4dHVyZTJEKHVfY21hcF9ub25saW5fc2FtcGxlciwgdmVjMihub3JtZWRfdmFsLCAwLjUpKS5yO1xuICAgICAgICAgICAgbG93cCB2ZWM0IGNvbG9yID0gdGV4dHVyZTJEKHVfY21hcF9zYW1wbGVyLCB2ZWMyKG5vbmxpbl92YWwsIDAuNSkpO1xuICAgICAgICAgICAgY29sb3IuYSA9IGNvbG9yLmEgKiB1X29wYWNpdHk7XG4gICAgICAgICAgICBnbF9GcmFnQ29sb3IgPSBjb2xvcjtcbiAgICAgICAgfWA7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnByb2dyYW0gPSBuZXcgV0dMUHJvZ3JhbShnbCwgdmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZSk7XG5cbiAgICAgICAgY29uc3Qge2xhdHM6IGZpZWxkX2xhdHMsIGxvbnM6IGZpZWxkX2xvbnN9ID0gdGhpcy5maWVsZC5ncmlkLmdldENvb3JkcygpO1xuICAgICAgICBjb25zdCB7d2lkdGg6IHRleF93aWR0aCwgaGVpZ2h0OiB0ZXhfaGVpZ2h0LCBkYXRhOiB0ZXhfZGF0YX0gPSB0aGlzLmZpZWxkLmdldFBhZGRlZERhdGEoKTtcblxuICAgICAgICBjb25zdCB2ZXJ0c190ZXhfY29vcmRzID0gYXdhaXQgbGF5ZXJfd29ya2VyLm1ha2VEb21haW5WZXJ0aWNlc0FuZFRleENvb3JkcyhmaWVsZF9sYXRzLCBmaWVsZF9sb25zLCB0ZXhfd2lkdGgsIHRleF9oZWlnaHQpO1xuXG4gICAgICAgIHRoaXMudmVydGljZXMgPSBuZXcgV0dMQnVmZmVyKGdsLCB2ZXJ0c190ZXhfY29vcmRzWyd2ZXJ0aWNlcyddLCAyLCBnbC5UUklBTkdMRV9TVFJJUCk7XG5cbiAgICAgICAgY29uc3QgZmlsbF9pbWFnZSA9IHsnZm9ybWF0JzogZ2wuTFVNSU5BTkNFLCAndHlwZSc6IGdsLkZMT0FULCBcbiAgICAgICAgICAgICd3aWR0aCc6IHRleF93aWR0aCwgJ2hlaWdodCc6IHRleF9oZWlnaHQsICdpbWFnZSc6IHRleF9kYXRhLFxuICAgICAgICAgICAgJ21hZ19maWx0ZXInOiBnbC5MSU5FQVIsXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5maWxsX3RleHR1cmUgPSBuZXcgV0dMVGV4dHVyZShnbCwgZmlsbF9pbWFnZSk7XG4gICAgICAgIHRoaXMudGV4Y29vcmRzID0gbmV3IFdHTEJ1ZmZlcihnbCwgdmVydHNfdGV4X2Nvb3Jkc1sndGV4X2Nvb3JkcyddLCAyLCBnbC5UUklBTkdMRV9TVFJJUCk7XG5cbiAgICAgICAgY29uc3QgY21hcF9pbWFnZSA9IHsnZm9ybWF0JzogZ2wuUkdCQSwgJ3R5cGUnOiBnbC5VTlNJR05FRF9CWVRFLCAnaW1hZ2UnOiB0aGlzLmNtYXBfaW1hZ2UsICdtYWdfZmlsdGVyJzogZ2wuTkVBUkVTVH07XG4gICAgICAgIHRoaXMuY21hcF90ZXh0dXJlID0gbmV3IFdHTFRleHR1cmUoZ2wsIGNtYXBfaW1hZ2UpO1xuXG4gICAgICAgIGNvbnN0IGNtYXBfbm9ubGluX2ltYWdlID0geydmb3JtYXQnOiBnbC5MVU1JTkFOQ0UsICd0eXBlJzogZ2wuRkxPQVQsIFxuICAgICAgICAgICAgJ3dpZHRoJzogdGhpcy5pbmRleF9tYXAubGVuZ3RoLCAnaGVpZ2h0JzogMSxcbiAgICAgICAgICAgICdpbWFnZSc6IHRoaXMuaW5kZXhfbWFwLCBcbiAgICAgICAgICAgICdtYWdfZmlsdGVyJzogZ2wuTElORUFSXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5jbWFwX25vbmxpbl90ZXh0dXJlID0gbmV3IFdHTFRleHR1cmUoZ2wsIGNtYXBfbm9ubGluX2ltYWdlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBSZW5kZXIgdGhlIGZpbGxlZCBjb250b3Vyc1xuICAgICAqL1xuICAgIHJlbmRlcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBtYXRyaXg6IG51bWJlcltdKSB7XG4gICAgICAgIGlmICh0aGlzLnByb2dyYW0gPT09IG51bGwgfHwgdGhpcy52ZXJ0aWNlcyA9PT0gbnVsbCB8fCB0aGlzLnRleGNvb3JkcyA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgdGhpcy5maWxsX3RleHR1cmUgPT09IG51bGwgfHwgdGhpcy5jbWFwX3RleHR1cmUgPT09IG51bGwgfHwgdGhpcy5jbWFwX25vbmxpbl90ZXh0dXJlID09PSBudWxsKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5wcm9ncmFtLnVzZShcbiAgICAgICAgICAgIHsnYV9wb3MnOiB0aGlzLnZlcnRpY2VzLCAnYV90ZXhfY29vcmQnOiB0aGlzLnRleGNvb3Jkc30sXG4gICAgICAgICAgICB7J3VfY21hcF9taW4nOiB0aGlzLmNtYXAubGV2ZWxzWzBdLCAndV9jbWFwX21heCc6IHRoaXMuY21hcC5sZXZlbHNbdGhpcy5jbWFwLmxldmVscy5sZW5ndGggLSAxXSwgJ3VfbWF0cml4JzogbWF0cml4LCAndV9vcGFjaXR5JzogdGhpcy5vcGFjaXR5LFxuICAgICAgICAgICAgICd1X25faW5kZXgnOiB0aGlzLmluZGV4X21hcC5sZW5ndGh9LFxuICAgICAgICAgICAgeyd1X2ZpbGxfc2FtcGxlcic6IHRoaXMuZmlsbF90ZXh0dXJlLCAndV9jbWFwX3NhbXBsZXInOiB0aGlzLmNtYXBfdGV4dHVyZSwgJ3VfY21hcF9ub25saW5fc2FtcGxlcic6IHRoaXMuY21hcF9ub25saW5fdGV4dHVyZX1cbiAgICAgICAgKTtcblxuICAgICAgICBnbC5lbmFibGUoZ2wuQkxFTkQpO1xuICAgICAgICBnbC5ibGVuZEZ1bmNTZXBhcmF0ZShnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG5cbiAgICAgICAgdGhpcy5wcm9ncmFtLmRyYXcoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRvdXJGaWxsO1xuZXhwb3J0IHR5cGUge0NvbnRvdXJGaWxsT3B0aW9uc307IiwiXG5pbXBvcnQgeyBXR0xCdWZmZXIsIFdHTFByb2dyYW0sIFdHTFRleHR1cmUsIFdHTFRleHR1cmVTcGVjIH0gZnJvbSBcIi4vd2dsXCI7XG5cbmludGVyZmFjZSBCaWxsYm9hcmRTcGVjIHtcbiAgICBwdHM6IEZsb2F0MzJBcnJheTtcbiAgICBvZmZzZXQ6IEZsb2F0MzJBcnJheTtcbiAgICB0ZXhfY29vcmRzOiBGbG9hdDMyQXJyYXk7XG59XG5cbmNsYXNzIEJpbGxib2FyZENvbGxlY3Rpb24ge1xuICAgIHJlYWRvbmx5IHNpemU6IG51bWJlcjtcbiAgICByZWFkb25seSBhc3BlY3Q6IG51bWJlcjtcbiAgICByZWFkb25seSBjb2xvcjogW251bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuXG4gICAgcmVhZG9ubHkgcHJvZ3JhbTogV0dMUHJvZ3JhbTtcbiAgICByZWFkb25seSB2ZXJ0aWNlczogV0dMQnVmZmVyO1xuICAgIHJlYWRvbmx5IG9mZnNldHM6IFdHTEJ1ZmZlcjtcblxuICAgIHJlYWRvbmx5IHRleHR1cmU6IFdHTFRleHR1cmU7XG4gICAgcmVhZG9ubHkgdGV4Y29vcmRzOiBXR0xCdWZmZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBiaWxsYm9hcmRfZWxlbWVudHM6IEJpbGxib2FyZFNwZWMsIGJpbGxib2FyZF9pbWFnZTogV0dMVGV4dHVyZVNwZWMsIGJpbGxib2FyZF9zaXplOiBbbnVtYmVyLCBudW1iZXJdLCBcbiAgICAgICAgICAgICAgICBiaWxsYm9hcmRfY29sb3I6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSkge1xuXG4gICAgICAgIGNvbnN0IFtiaWxsYm9hcmRfd2lkdGgsIGJpbGxib2FyZF9oZWlnaHRdID0gYmlsbGJvYXJkX3NpemU7XG5cbiAgICAgICAgdGhpcy5zaXplID0gYmlsbGJvYXJkX2hlaWdodDtcbiAgICAgICAgdGhpcy5hc3BlY3QgPSBiaWxsYm9hcmRfd2lkdGggLyBiaWxsYm9hcmRfaGVpZ2h0O1xuICAgICAgICB0aGlzLmNvbG9yID0gYmlsbGJvYXJkX2NvbG9yO1xuXG4gICAgICAgIGNvbnN0IHZlcnRleFNvdXJjZSA9IGBcbiAgICAgICAgdW5pZm9ybSBtYXQ0IHVfbWF0cml4O1xuXG4gICAgICAgIGF0dHJpYnV0ZSB2ZWMzIGFfcG9zOyAgICAvLyBIYXMgcG9zaXRpb24gYW5kIHpvb20gaW5mb1xuICAgICAgICBhdHRyaWJ1dGUgdmVjMiBhX29mZnNldDsgLy8gSGFzIGNvcm5lciBhbmQgb3JpZW50YXRpb24gaW5mb1xuICAgICAgICBhdHRyaWJ1dGUgdmVjMiBhX3RleF9jb29yZDtcbiAgICAgICAgdW5pZm9ybSBsb3dwIGZsb2F0IHVfYmlsbGJvYXJkX3NpemU7XG4gICAgICAgIHVuaWZvcm0gbG93cCBmbG9hdCB1X2JpbGxib2FyZF9hc3BlY3Q7XG4gICAgICAgIHVuaWZvcm0gbG93cCBmbG9hdCB1X21hcF9hc3BlY3Q7XG4gICAgICAgIHVuaWZvcm0gbG93cCBmbG9hdCB1X3pvb207XG4gICAgICAgIHVuaWZvcm0gaGlnaHAgZmxvYXQgdV9tYXBfYmVhcmluZztcblxuICAgICAgICB2YXJ5aW5nIGhpZ2hwIHZlYzIgdl90ZXhfY29vcmQ7XG5cbiAgICAgICAgbWF0NCBzY2FsaW5nTWF0cml4KGZsb2F0IHhfc2NhbGUsIGZsb2F0IHlfc2NhbGUsIGZsb2F0IHpfc2NhbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXQ0KHhfc2NhbGUsIDAuMCwgICAgIDAuMCwgICAgIDAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAuMCwgICAgIHlfc2NhbGUsIDAuMCwgICAgIDAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAuMCwgICAgIDAuMCwgICAgIHpfc2NhbGUsIDAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAuMCwgICAgIDAuMCwgICAgIDAuMCwgICAgIDEuMCk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXQ0IHJvdGF0aW9uWk1hdHJpeChmbG9hdCBhbmdsZSkge1xuICAgICAgICAgICAgZmxvYXQgcyA9IHNpbihhbmdsZSk7XG4gICAgICAgICAgICBmbG9hdCBjID0gY29zKGFuZ2xlKTtcblxuICAgICAgICAgICAgcmV0dXJuIG1hdDQoIGMsICBzLCAgMC4sIDAuLFxuICAgICAgICAgICAgICAgICAgICAgICAgLXMsICBjLCAgMC4sIDAuLFxuICAgICAgICAgICAgICAgICAgICAgICAgIDAuLCAwLiwgMS4sIDAuLFxuICAgICAgICAgICAgICAgICAgICAgICAgIDAuLCAwLiwgMC4sIDEuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hdDQgcm90YXRpb25YTWF0cml4KGZsb2F0IGFuZ2xlKSB7XG4gICAgICAgICAgICBmbG9hdCBzID0gc2luKGFuZ2xlKTtcbiAgICAgICAgICAgIGZsb2F0IGMgPSBjb3MoYW5nbGUpO1xuXG4gICAgICAgICAgICByZXR1cm4gbWF0NCggMS4sICAwLiwgMC4sIDAuLFxuICAgICAgICAgICAgICAgICAgICAgICAgIDAuLCAgYywgIHMsICAwLixcbiAgICAgICAgICAgICAgICAgICAgICAgICAwLiwgLXMsICBjLCAgMC4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgMC4sICAwLiwgMC4sIDEuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICAgIHZlYzQgcGl2b3RfcG9zID0gdV9tYXRyaXggKiB2ZWM0KGFfcG9zLnh5LCAwLjAsIDEuMCk7XG4gICAgICAgICAgICBsb3dwIGZsb2F0IG1pbl96b29tID0gYV9wb3MuejtcblxuICAgICAgICAgICAgbG93cCBmbG9hdCBjb3JuZXIgPSBhX29mZnNldC54O1xuICAgICAgICAgICAgbG93cCBmbG9hdCBhbmcgPSByYWRpYW5zKDE4MC4wIC0gYV9vZmZzZXQueSk7XG5cbiAgICAgICAgICAgIHZlYzQgb2Zmc2V0ID0gdmVjNCgwLjAsIDAuMCwgMC4wLCAwLjApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodV96b29tID49IG1pbl96b29tKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvcm5lciA8IDAuNSkge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB2ZWM0KC11X2JpbGxib2FyZF9zaXplLCB1X2JpbGxib2FyZF9zaXplLCAwLiwgMC4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjb3JuZXIgPCAxLjUpIHtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gdmVjNCh1X2JpbGxib2FyZF9zaXplLCB1X2JpbGxib2FyZF9zaXplLCAwLiwgMC4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjb3JuZXIgPCAyLjUpIHtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gdmVjNCgtdV9iaWxsYm9hcmRfc2l6ZSwgLXVfYmlsbGJvYXJkX3NpemUgKiAoMi4gLyB1X2JpbGxib2FyZF9hc3BlY3QgLSAxLiksIDAuLCAwLik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvcm5lciA8IDMuNSkge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB2ZWM0KHVfYmlsbGJvYXJkX3NpemUsIC11X2JpbGxib2FyZF9zaXplICogKDIuIC8gdV9iaWxsYm9hcmRfYXNwZWN0IC0gMS4pLCAwLiwgMC4pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG1hdDQgYmFyYl9yb3RhdGlvbiA9IHJvdGF0aW9uWk1hdHJpeChhbmcgKyByYWRpYW5zKHVfbWFwX2JlYXJpbmcpKTtcbiAgICAgICAgICAgICAgICBtYXQ0IG1hcF9zdHJldGNoX21hdHJpeCA9IHNjYWxpbmdNYXRyaXgoMS4wLCAxLiAvIHVfbWFwX2FzcGVjdCwgMS4wKTtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBtYXBfc3RyZXRjaF9tYXRyaXggKiBiYXJiX3JvdGF0aW9uICogb2Zmc2V0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnbF9Qb3NpdGlvbiA9IHBpdm90X3BvcyArIG9mZnNldDtcbiAgICAgICAgICAgIHZfdGV4X2Nvb3JkID0gYV90ZXhfY29vcmQ7XG4gICAgICAgIH1gO1xuXG4gICAgICAgIGNvbnN0IGZyYWdtZW50U291cmNlID0gYFxuICAgICAgICB2YXJ5aW5nIGhpZ2hwIHZlYzIgdl90ZXhfY29vcmQ7XG5cbiAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgdV9zYW1wbGVyO1xuICAgICAgICB1bmlmb3JtIGxvd3AgdmVjMyB1X2JpbGxib2FyZF9jb2xvcjtcblxuICAgICAgICB2b2lkIG1haW4oKSB7XG4gICAgICAgICAgICBsb3dwIHZlYzQgdGV4X2NvbG9yID0gdGV4dHVyZTJEKHVfc2FtcGxlciwgdl90ZXhfY29vcmQpO1xuICAgICAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCh1X2JpbGxib2FyZF9jb2xvciwgdGV4X2NvbG9yLmEpOyAvL21peCh2ZWM0KDEuMCwgMC4wLCAwLjAsIDAuNSksIHRleF9jb2xvciwgdGV4X2NvbG9yLmEpO1xuICAgICAgICB9YDtcblxuICAgICAgICB0aGlzLnByb2dyYW0gPSBuZXcgV0dMUHJvZ3JhbShnbCwgdmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZSk7XG5cbiAgICAgICAgdGhpcy52ZXJ0aWNlcyA9IG5ldyBXR0xCdWZmZXIoZ2wsIGJpbGxib2FyZF9lbGVtZW50c1sncHRzJ10sIDMsIGdsLlRSSUFOR0xFX1NUUklQKTtcbiAgICAgICAgdGhpcy5vZmZzZXRzID0gbmV3IFdHTEJ1ZmZlcihnbCwgYmlsbGJvYXJkX2VsZW1lbnRzWydvZmZzZXQnXSwgMiwgZ2wuVFJJQU5HTEVfU1RSSVApO1xuXG4gICAgICAgIHRoaXMudGV4Y29vcmRzID0gbmV3IFdHTEJ1ZmZlcihnbCwgYmlsbGJvYXJkX2VsZW1lbnRzWyd0ZXhfY29vcmRzJ10sIDIsIGdsLlRSSUFOR0xFX1NUUklQKTtcbiAgICAgICAgdGhpcy50ZXh0dXJlID0gbmV3IFdHTFRleHR1cmUoZ2wsIGJpbGxib2FyZF9pbWFnZSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIG1hdHJpeDogbnVtYmVyW10sIFttYXBfd2lkdGgsIG1hcF9oZWlnaHRdOiBbbnVtYmVyLCBudW1iZXJdLCBtYXBfem9vbTogbnVtYmVyLCBtYXBfYmVhcmluZzogbnVtYmVyLCBtYXBfcGl0Y2g6IG51bWJlcikge1xuICAgICAgICB0aGlzLnByb2dyYW0udXNlKFxuICAgICAgICAgICAgeydhX3Bvcyc6IHRoaXMudmVydGljZXMsICdhX29mZnNldCc6IHRoaXMub2Zmc2V0cywgJ2FfdGV4X2Nvb3JkJzogdGhpcy50ZXhjb29yZHN9LFxuICAgICAgICAgICAgeyd1X2JpbGxib2FyZF9zaXplJzogdGhpcy5zaXplICogKG1hcF9oZWlnaHQgLyBtYXBfd2lkdGgpLCAndV9iaWxsYm9hcmRfYXNwZWN0JzogdGhpcy5hc3BlY3QsICd1X2JpbGxib2FyZF9jb2xvcic6IHRoaXMuY29sb3IsXG4gICAgICAgICAgICAgJ3VfbWF0cml4JzogbWF0cml4LCAndV9tYXBfYXNwZWN0JzogbWFwX2hlaWdodCAvIG1hcF93aWR0aCwgJ3Vfem9vbSc6IG1hcF96b29tLCAndV9tYXBfYmVhcmluZyc6IG1hcF9iZWFyaW5nfSxcbiAgICAgICAgICAgIHsndV9zYW1wbGVyJzogdGhpcy50ZXh0dXJlfVxuICAgICAgICApO1xuXG4gICAgICAgIGdsLmVuYWJsZShnbC5CTEVORCk7XG4gICAgICAgIGdsLmJsZW5kRnVuY1NlcGFyYXRlKGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSwgZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblxuICAgICAgICB0aGlzLnByb2dyYW0uZHJhdygpO1xuICAgIH1cbn1cblxuZXhwb3J0IHtCaWxsYm9hcmRDb2xsZWN0aW9ufTtcbmV4cG9ydCB0eXBlIHtCaWxsYm9hcmRTcGVjfTsiLCJcbmltcG9ydCB7IFBsb3RDb21wb25lbnQsIGxheWVyX3dvcmtlciB9IGZyb20gXCIuL1Bsb3RDb21wb25lbnRcIjtcbmltcG9ydCB7IEJpbGxib2FyZENvbGxlY3Rpb24gfSBmcm9tICcuL0JpbGxib2FyZENvbGxlY3Rpb24nO1xuaW1wb3J0IHsgaGV4MnJnYmEgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IFJhd1ZlY3RvckZpZWxkIH0gZnJvbSBcIi4vUmF3RmllbGRcIjtcbmltcG9ydCB7IE1hcFR5cGUgfSBmcm9tIFwiLi9NYXBcIjtcblxuY29uc3QgQkFSQl9ESU1TID0ge1xuICAgIEJBUkJfV0lEVEg6IDg1LFxuICAgIEJBUkJfSEVJR0hUOiAyNTYsXG4gICAgQkFSQl9URVhfV1JBUDogNjAsXG4gICAgQkFSQl9URVhfV0lEVEg6IDEwMjQsXG4gICAgQkFSQl9URVhfSEVJR0hUOiAxMDI0LFxuICAgIE1BWF9CQVJCOiAyMzVcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUJhcmJUZXh0dXJlKCkgOiBIVE1MQ2FudmFzRWxlbWVudCB7XG4gICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuXG4gICAgY2FudmFzLndpZHRoID0gQkFSQl9ESU1TLkJBUkJfVEVYX1dJRFRIO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBCQVJCX0RJTVMuQkFSQl9URVhfSEVJR0hUO1xuICAgIFxuICAgIGZ1bmN0aW9uIGRyYXdXaW5kQmFyYihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgdGlweDogbnVtYmVyLCB0aXB5OiBudW1iZXIsIG1hZzogbnVtYmVyKSA6IHZvaWQge1xuICAgICAgICBjb25zdCBlbGVtX2Z1bGxfc2l6ZSA9IEJBUkJfRElNUy5CQVJCX1dJRFRIIC8gMiAtIDQ7XG4gICAgICAgIC8vY29uc3Qgc3RhZmZfbGVuZ3RoID0gQkFSQl9ESU1TLkJBUkJfSEVJR0hUIC0gMTMgLSBCQVJCX0RJTVMuQkFSQl9XSURUSCAvIDIgLSBlbGVtX2Z1bGxfc2l6ZSAvIDI7XG4gICAgICAgIGNvbnN0IGVsZW1fc3BhY2luZyA9IGVsZW1fZnVsbF9zaXplIC8gMjtcbiAgICAgICAgXG4gICAgICAgIGlmIChtYWcgPCAyLjUpIHtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5hcmModGlweCwgdGlweSwgZWxlbV9mdWxsX3NpemUgLyAyLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgZWxlbV9wb3MgPSAwO1xuICAgICAgICAgICAgbGV0IG1hZ19jb3VudGRvd24gPSBtYWc7XG5cbiAgICAgICAgICAgIGxldCBzdGFmZl9sZW5ndGggPSAwO1xuICAgICAgICAgICAgY29uc3Qgbl9mbGFncyA9IE1hdGguZmxvb3IoKG1hZ19jb3VudGRvd24gKyAyLjUpIC8gNTApXG4gICAgICAgICAgICBzdGFmZl9sZW5ndGggKz0gbl9mbGFncyAqIGVsZW1fZnVsbF9zaXplIC8gMiArIGVsZW1fc3BhY2luZyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAobl9mbGFncyAtIDEpICogZWxlbV9zcGFjaW5nIC8gMjtcbiAgICAgICAgICAgIG1hZ19jb3VudGRvd24gLT0gbl9mbGFncyAqIDUwO1xuICAgICAgICAgICAgY29uc3Qgbl9mdWxsX2JhcmJzID0gTWF0aC5mbG9vcigobWFnX2NvdW50ZG93biArIDIuNSkgLyAxMClcbiAgICAgICAgICAgIHN0YWZmX2xlbmd0aCArPSBuX2Z1bGxfYmFyYnMgKiBlbGVtX3NwYWNpbmc7XG4gICAgICAgICAgICBtYWdfY291bnRkb3duIC09IG5fZnVsbF9iYXJicyAqIDEwO1xuICAgICAgICAgICAgY29uc3Qgbl9oYWxmX2JhcmJzID0gTWF0aC5mbG9vcigobWFnX2NvdW50ZG93biArIDIuNSkgLyA1KTtcbiAgICAgICAgICAgIHN0YWZmX2xlbmd0aCArPSBuX2hhbGZfYmFyYnMgKiBlbGVtX3NwYWNpbmc7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChtYWcgPCA3LjUpIHtcbiAgICAgICAgICAgICAgICBzdGFmZl9sZW5ndGggKz0gZWxlbV9zcGFjaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBzdGFmZl9sZW5ndGggPSBNYXRoLm1heCgxMjAsIHN0YWZmX2xlbmd0aCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIHN0YWZmXG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHRpcHgsIHRpcHkpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh0aXB4LCB0aXB5ICsgc3RhZmZfbGVuZ3RoKTtcblxuICAgICAgICAgICAgbWFnX2NvdW50ZG93biA9IG1hZztcblxuICAgICAgICAgICAgZWxlbV9wb3MgPSB0aXB5ICsgc3RhZmZfbGVuZ3RoO1xuICAgICAgICAgICAgbGV0IGxhc3Rfd2FzX2ZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCBmaXJzdF9lbGVtID0gdHJ1ZTtcbiAgICAgICAgXG4gICAgICAgICAgICB3aGlsZSAobWFnX2NvdW50ZG93biA+IDQ3LjUpIHtcbiAgICAgICAgICAgICAgICBpZiAobGFzdF93YXNfZmxhZykgZWxlbV9wb3MgKz0gZWxlbV9zcGFjaW5nIC8gMjtcbiAgICAgICAgICAgICAgICAvLyBmbGFnXG4gICAgICAgICAgICAgICAgaWYgKCFmaXJzdF9lbGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8odGlweCwgZWxlbV9wb3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdHgubGluZVRvKHRpcHggLSBlbGVtX2Z1bGxfc2l6ZSwgZWxlbV9wb3MpO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lVG8odGlweCwgZWxlbV9wb3MgLSBlbGVtX2Z1bGxfc2l6ZSAvIDIpXG5cbiAgICAgICAgICAgICAgICBlbGVtX3BvcyAtPSBlbGVtX2Z1bGxfc2l6ZSAvIDIgKyBlbGVtX3NwYWNpbmc7XG4gICAgICAgICAgICAgICAgbWFnX2NvdW50ZG93biAtPSA1MDtcbiAgICAgICAgICAgICAgICBsYXN0X3dhc19mbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmaXJzdF9lbGVtID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgd2hpbGUgKG1hZ19jb3VudGRvd24gPiA3LjUpIHtcbiAgICAgICAgICAgICAgICAvLyBmdWxsIGJhcmJcbiAgICAgICAgICAgICAgICBpZiAoIWZpcnN0X2VsZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyh0aXB4LCBlbGVtX3Bvcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0eC5saW5lVG8odGlweCAtIGVsZW1fZnVsbF9zaXplLCBlbGVtX3BvcyArIGVsZW1fZnVsbF9zaXplIC8gMik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBlbGVtX3BvcyAtPSBlbGVtX3NwYWNpbmc7XG4gICAgICAgICAgICAgICAgbWFnX2NvdW50ZG93biAtPSAxMDtcbiAgICAgICAgICAgICAgICBmaXJzdF9lbGVtID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChtYWcgPCA3LjUpIHtcbiAgICAgICAgICAgICAgICBlbGVtX3BvcyAtPSBlbGVtX3NwYWNpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgd2hpbGUgKG1hZ19jb3VudGRvd24gPiAyLjUpIHtcbiAgICAgICAgICAgICAgICAvLyBoYWxmIGJhcmJcbiAgICAgICAgICAgICAgICBjdHgubW92ZVRvKHRpcHgsIGVsZW1fcG9zKTtcbiAgICAgICAgICAgICAgICBjdHgubGluZVRvKHRpcHggLSBlbGVtX2Z1bGxfc2l6ZSAvIDIsIGVsZW1fcG9zICsgZWxlbV9mdWxsX3NpemUgLyA0KTtcbiAgICAgICAgICAgICAgICBtYWdfY291bnRkb3duIC09IDU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgaWYgKGN0eCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBcIkNvdWxkIG5vdCBnZXQgcmVuZGVyaW5nIGNvbnRleHQgZm9yIHRoZSB3aW5kIGJhcmIgY2FudmFzXCI7XG4gICAgfVxuXG4gICAgY3R4LmxpbmVXaWR0aCA9IDg7XG4gICAgY3R4Lm1pdGVyTGltaXQgPSA0O1xuICAgIFxuICAgIGZvciAobGV0IGliYXJiID0gMDsgaWJhcmIgPD0gQkFSQl9ESU1TLk1BWF9CQVJCOyBpYmFyYiArPSA1KSB7XG4gICAgICAgIGNvbnN0IHhfcG9zID0gKGliYXJiICUgQkFSQl9ESU1TLkJBUkJfVEVYX1dSQVApIC8gNSAqIEJBUkJfRElNUy5CQVJCX1dJRFRIICsgQkFSQl9ESU1TLkJBUkJfV0lEVEggLyAyO1xuICAgICAgICBjb25zdCB5X3BvcyA9IE1hdGguZmxvb3IoaWJhcmIgLyBCQVJCX0RJTVMuQkFSQl9URVhfV1JBUCkgKiBCQVJCX0RJTVMuQkFSQl9IRUlHSFQgKyBCQVJCX0RJTVMuQkFSQl9XSURUSCAvIDI7XG4gICAgICAgIGRyYXdXaW5kQmFyYihjdHgsIHhfcG9zLCB5X3BvcywgaWJhcmIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYW52YXM7XG59XG5cbmNvbnN0IEJBUkJfVEVYVFVSRSA9IF9jcmVhdGVCYXJiVGV4dHVyZSgpO1xuXG5pbnRlcmZhY2UgQmFyYnNPcHRpb25zIHtcbiAgICAvKiogXG4gICAgICogVGhlIGNvbG9yIHRvIHVzZSBmb3IgdGhlIGJhcmJzIGFzIGEgaGV4IGNvbG9yIHN0cmluZzsuXG4gICAgICogQGRlZmF1bHQgJyMwMDAwMDAnXG4gICAgICovXG4gICAgY29sb3I/OiBzdHJpbmc7XG5cbiAgICAvKiogXG4gICAgICogSG93IG11Y2ggdG8gdGhpbiB0aGUgYmFyYnMgYXQgem9vbSBsZXZlbCAxIG9uIHRoZSBtYXAuIFRoaXMgZWZmZWN0aXZlbHkgbWVhbnMgdG8gcGxvdCBldmVyeSBgbmB0aCBiYXJiIGluIHRoZSBpIGFuZCBqIGRpcmVjdGlvbnMsIHdoZXJlIGBuYCA9IFxuICAgICAqIGB0aGluX2ZhY2AuIGB0aGluX2ZhY2Agc2hvdWxkIGJlIGEgcG93ZXIgb2YgMi4gXG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuICAgIHRoaW5fZmFjPzogbnVtYmVyO1xufVxuXG4vKiogXG4gKiBBIGNsYXNzIHJlcHJlc2VudGluZyBhIGZpZWxkIG9mIHdpbmQgYmFyYnMuIFRoZSBiYXJicyBhcmUgYXV0b21hdGljYWxseSB0aGlubmVkIGJhc2VkIG9uIHRoZSB6b29tIGxldmVsIG9uIHRoZSBtYXA7IHRoZSB1c2VyIG9ubHkgaGFzIHRvIHByb3ZpZGUgYVxuICogdGhpbm5pbmcgZmFjdG9yIGF0IHpvb20gbGV2ZWwgMS5cbiAqIEBleGFtcGxlXG4gKiAvLyBDcmVhdGUgYSBiYXJiIGZpZWxkIHdpdGggYmxhY2sgYmFyYnMgYW5kIHBsb3R0aW5nIGV2ZXJ5IDE2dGggd2luZCBiYXJiIGluIGJvdGggaSBhbmQgaiBhdCB6b29tIGxldmVsIDFcbiAqIGNvbnN0IHZlY3Rvcl9maWVsZCA9IHt1OiB1X2ZpZWxkLCB2OiB2X2ZpZWxkfTtcbiAqIGNvbnN0IGJhcmJzID0gbmV3IEJhcmJzKHZlY3Rvcl9maWVsZCwge2NvbG9yOiAnIzAwMDAwMCcsIHRoaW5fZmFjOiAxNn0pO1xuICovXG5jbGFzcyBCYXJicyBleHRlbmRzIFBsb3RDb21wb25lbnQge1xuICAgIC8qKiBUaGUgdmVjdG9yIGZpZWxkICovXG4gICAgcmVhZG9ubHkgZmllbGRzOiBSYXdWZWN0b3JGaWVsZDtcbiAgICByZWFkb25seSBjb2xvcjogW251bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuICAgIHJlYWRvbmx5IHRoaW5fZmFjOiBudW1iZXI7XG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICBtYXA6IE1hcFR5cGUgfCBudWxsO1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIGJhcmJfYmlsbGJvYXJkczogQmlsbGJvYXJkQ29sbGVjdGlvbiB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBmaWVsZCBvZiB3aW5kIGJhcmJzXG4gICAgICogQHBhcmFtIGZpZWxkcyAtIFRoZSB1IGFuZCB2IGZpZWxkcyB0byB1c2UgYXMgYW4gb2JqZWN0XG4gICAgICogQHBhcmFtIG9wdHMgICAtIE9wdGlvbnMgZm9yIGNyZWF0aW5nIHRoZSB3aW5kIGJhcmJzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZmllbGRzOiBSYXdWZWN0b3JGaWVsZCwgb3B0czogQmFyYnNPcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5maWVsZHMgPSBmaWVsZHM7XG5cbiAgICAgICAgY29uc3QgY29sb3IgPSBoZXgycmdiYShvcHRzLmNvbG9yIHx8ICcjMDAwMDAwJyk7XG4gICAgICAgIHRoaXMuY29sb3IgPSBbY29sb3JbMF0sIGNvbG9yWzFdLCBjb2xvclsyXV07XG4gICAgICAgIHRoaXMudGhpbl9mYWMgPSBvcHRzLnRoaW5fZmFjIHx8IDE7XG5cbiAgICAgICAgdGhpcy5tYXAgPSBudWxsO1xuICAgICAgICB0aGlzLmJhcmJfYmlsbGJvYXJkcyA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGludGVybmFsIFxuICAgICAqIEFkZCB0aGUgYmFyYiBmaWVsZCB0byBhIG1hcFxuICAgICAqL1xuICAgIGFzeW5jIG9uQWRkKG1hcDogTWFwVHlwZSwgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcblxuICAgICAgICBjb25zdCB7bG9uczogZmllbGRfbG9ucywgbGF0czogZmllbGRfbGF0c30gPSB0aGlzLmZpZWxkc1sndSddLmdyaWQuZ2V0Q29vcmRzKCk7XG5cbiAgICAgICAgY29uc3QgYmFyYl9lbGVtZW50cyA9IGF3YWl0IGxheWVyX3dvcmtlci5tYWtlQmFyYkVsZW1lbnRzKGZpZWxkX2xhdHMsIGZpZWxkX2xvbnMsIHRoaXMuZmllbGRzLnUuZGF0YSwgdGhpcy5maWVsZHMudi5kYXRhLCB0aGlzLnRoaW5fZmFjLCBCQVJCX0RJTVMpO1xuICAgICAgICBjb25zdCBiYXJiX2ltYWdlID0ge2Zvcm1hdDogZ2wuUkdCQSwgdHlwZTogZ2wuVU5TSUdORURfQllURSwgaW1hZ2U6IEJBUkJfVEVYVFVSRSwgbWFnX2ZpbHRlcjogZ2wuTkVBUkVTVH07XG5cbiAgICAgICAgY29uc3QgYmFyYl9oZWlnaHQgPSAyNy41O1xuICAgICAgICBjb25zdCBiYXJiX2FzcGVjdCA9IEJBUkJfRElNUy5CQVJCX1dJRFRIIC8gQkFSQl9ESU1TLkJBUkJfSEVJR0hUO1xuICAgICAgICBjb25zdCBiYXJiX3dpZHRoID0gYmFyYl9oZWlnaHQgKiBiYXJiX2FzcGVjdDtcblxuICAgICAgICB0aGlzLmJhcmJfYmlsbGJvYXJkcyA9IG5ldyBCaWxsYm9hcmRDb2xsZWN0aW9uKGdsLCBiYXJiX2VsZW1lbnRzLCBiYXJiX2ltYWdlLCBcbiAgICAgICAgICAgIFtiYXJiX3dpZHRoLCBiYXJiX2hlaWdodF0sIHRoaXMuY29sb3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbCBcbiAgICAgKiBSZW5kZXIgdGhlIGJhcmIgZmllbGRcbiAgICAgKi9cbiAgICByZW5kZXIoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgbWF0cml4OiBudW1iZXJbXSkge1xuICAgICAgICBpZiAodGhpcy5tYXAgPT09IG51bGwgfHwgdGhpcy5iYXJiX2JpbGxib2FyZHMgPT09IG51bGwpIHJldHVybjtcblxuICAgICAgICBjb25zdCB6b29tID0gdGhpcy5tYXAuZ2V0Wm9vbSgpO1xuICAgICAgICBjb25zdCBtYXBfd2lkdGggPSB0aGlzLm1hcC5nZXRDYW52YXMoKS53aWR0aDtcbiAgICAgICAgY29uc3QgbWFwX2hlaWdodCA9IHRoaXMubWFwLmdldENhbnZhcygpLmhlaWdodDtcbiAgICAgICAgY29uc3QgYmVhcmluZyA9IHRoaXMubWFwLmdldEJlYXJpbmcoKTtcbiAgICAgICAgY29uc3QgcGl0Y2ggPSB0aGlzLm1hcC5nZXRQaXRjaCgpO1xuXG4gICAgICAgIHRoaXMuYmFyYl9iaWxsYm9hcmRzLnJlbmRlcihnbCwgbWF0cml4LCBbbWFwX3dpZHRoLCBtYXBfaGVpZ2h0XSwgem9vbSwgYmVhcmluZywgcGl0Y2gpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmFyYnM7XG5leHBvcnQgdHlwZSB7QmFyYnNPcHRpb25zfTsiLCJcbmltcG9ydCB7IFdHTEJ1ZmZlciwgV0dMUHJvZ3JhbSwgV0dMVGV4dHVyZSwgV0dMVGV4dHVyZVNwZWMgfSBmcm9tIFwiLi93Z2xcIjtcbmltcG9ydCB7IFBvbHlsaW5lU3BlYywgTGluZVNwZWMgfSBmcm9tIFwiLi9BdXR1bW5UeXBlc1wiO1xuXG5jbGFzcyBQb2x5bGluZUNvbGxlY3Rpb24ge1xuICAgIHJlYWRvbmx5IHdpZHRoOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgc2NhbGU6IG51bWJlcjtcblxuICAgIHJlYWRvbmx5IHByb2dyYW06IFdHTFByb2dyYW07XG4gICAgcmVhZG9ubHkgb3JpZ2luOiBXR0xCdWZmZXI7XG4gICAgcmVhZG9ubHkgb2Zmc2V0OiBXR0xCdWZmZXI7XG4gICAgcmVhZG9ubHkgZXh0cnVzaW9uOiBXR0xCdWZmZXI7XG4gICAgcmVhZG9ubHkgbWluX3pvb206IFdHTEJ1ZmZlcjtcblxuICAgIHJlYWRvbmx5IHRleHR1cmU6IFdHTFRleHR1cmU7XG4gICAgcmVhZG9ubHkgdGV4Y29vcmRzOiBXR0xCdWZmZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBwb2x5bGluZTogUG9seWxpbmVTcGVjLCB0ZXhfaW1hZ2U6IFdHTFRleHR1cmVTcGVjLCBsaW5lX3dpZHRoOiBudW1iZXIsIG9mZnNldF9zY2FsZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMud2lkdGggPSBsaW5lX3dpZHRoO1xuICAgICAgICB0aGlzLnNjYWxlID0gb2Zmc2V0X3NjYWxlO1xuXG4gICAgICAgIGNvbnN0IHZlcnRleFNvdXJjZSA9IGBcbiAgICAgICAgdW5pZm9ybSBtYXQ0IHVfbWF0cml4O1xuXG4gICAgICAgIGF0dHJpYnV0ZSB2ZWMyIGFfcG9zO1xuICAgICAgICBhdHRyaWJ1dGUgZmxvYXQgYV9taW5fem9vbTtcbiAgICAgICAgYXR0cmlidXRlIHZlYzIgYV9leHRydXNpb247XG4gICAgICAgIGF0dHJpYnV0ZSB2ZWMyIGFfb2Zmc2V0O1xuICAgICAgICBhdHRyaWJ1dGUgdmVjMiBhX3RleF9jb29yZDtcbiAgICAgICAgdW5pZm9ybSBsb3dwIGZsb2F0IHVfb2Zmc2V0X3NjYWxlO1xuICAgICAgICB1bmlmb3JtIGxvd3AgZmxvYXQgdV9tYXBfYXNwZWN0O1xuICAgICAgICB1bmlmb3JtIGxvd3AgZmxvYXQgdV96b29tO1xuICAgICAgICB1bmlmb3JtIGxvd3AgZmxvYXQgdV9saW5lX3dpZHRoO1xuICAgICAgICB1bmlmb3JtIGhpZ2hwIGZsb2F0IHVfbWFwX2JlYXJpbmc7XG4gICAgICAgIC8vdW5pZm9ybSBoaWdocCBmbG9hdCB1X21hcF9waXRjaDtcblxuICAgICAgICB2YXJ5aW5nIGhpZ2hwIHZlYzIgdl90ZXhfY29vcmQ7XG5cbiAgICAgICAgbWF0NCBzY2FsaW5nTWF0cml4KGZsb2F0IHhfc2NhbGUsIGZsb2F0IHlfc2NhbGUsIGZsb2F0IHpfc2NhbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXQ0KHhfc2NhbGUsIDAuMCwgICAgIDAuMCwgICAgIDAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAuMCwgICAgIHlfc2NhbGUsIDAuMCwgICAgIDAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAuMCwgICAgIDAuMCwgICAgIHpfc2NhbGUsIDAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAuMCwgICAgIDAuMCwgICAgIDAuMCwgICAgIDEuMCk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXQ0IHJvdGF0aW9uWk1hdHJpeChmbG9hdCBhbmdsZSkge1xuICAgICAgICAgICAgZmxvYXQgcyA9IHNpbihhbmdsZSk7XG4gICAgICAgICAgICBmbG9hdCBjID0gY29zKGFuZ2xlKTtcblxuICAgICAgICAgICAgcmV0dXJuIG1hdDQoIGMsICBzLCAgMC4sIDAuLFxuICAgICAgICAgICAgICAgICAgICAgICAgLXMsICBjLCAgMC4sIDAuLFxuICAgICAgICAgICAgICAgICAgICAgICAgIDAuLCAwLiwgMS4sIDAuLFxuICAgICAgICAgICAgICAgICAgICAgICAgIDAuLCAwLiwgMC4sIDEuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hdDQgcm90YXRpb25YTWF0cml4KGZsb2F0IGFuZ2xlKSB7XG4gICAgICAgICAgICBmbG9hdCBzID0gc2luKGFuZ2xlKTtcbiAgICAgICAgICAgIGZsb2F0IGMgPSBjb3MoYW5nbGUpO1xuXG4gICAgICAgICAgICByZXR1cm4gbWF0NCggMS4sICAwLiwgMC4sIDAuLFxuICAgICAgICAgICAgICAgICAgICAgICAgIDAuLCAgYywgIHMsICAwLixcbiAgICAgICAgICAgICAgICAgICAgICAgICAwLiwgLXMsICBjLCAgMC4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgMC4sICAwLiwgMC4sIDEuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICAgIHZlYzQgY2VudGVyX3BvcyA9IHVfbWF0cml4ICogdmVjNChhX3Bvcy54eSwgMC4wLCAxLjApO1xuICAgICAgICAgICAgdmVjNCBvZmZzZXQgPSB2ZWM0KDAuMCwgMC4wLCAwLjAsIDAuMCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh1X3pvb20gPj0gYV9taW5fem9vbSkge1xuICAgICAgICAgICAgICAgIHZlYzIgb2Zmc2V0XzJkID0gYV9vZmZzZXQgKyB1X2xpbmVfd2lkdGggKiBhX2V4dHJ1c2lvbjtcblxuICAgICAgICAgICAgICAgIG1hdDQgcm90YXRpb25fbWF0cml4ID0gcm90YXRpb25aTWF0cml4KHJhZGlhbnModV9tYXBfYmVhcmluZykpO1xuICAgICAgICAgICAgICAgIG1hdDQgbWFwX3N0cmV0Y2hfbWF0cml4ID0gc2NhbGluZ01hdHJpeCh1X29mZnNldF9zY2FsZSwgdV9vZmZzZXRfc2NhbGUgLyB1X21hcF9hc3BlY3QsIDEuKTtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBtYXBfc3RyZXRjaF9tYXRyaXggKiByb3RhdGlvbl9tYXRyaXggKiB2ZWM0KG9mZnNldF8yZCwgMC4sIDAuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2xfUG9zaXRpb24gPSBjZW50ZXJfcG9zICsgb2Zmc2V0O1xuICAgICAgICAgICAgdl90ZXhfY29vcmQgPSBhX3RleF9jb29yZDtcbiAgICAgICAgfWA7XG5cbiAgICAgICAgY29uc3QgZnJhZ21lbnRTb3VyY2UgPSBgXG4gICAgICAgIHZhcnlpbmcgaGlnaHAgdmVjMiB2X3RleF9jb29yZDtcblxuICAgICAgICB1bmlmb3JtIHNhbXBsZXIyRCB1X3NhbXBsZXI7XG5cbiAgICAgICAgdm9pZCBtYWluKCkge1xuICAgICAgICAgICAgaWYgKHZfdGV4X2Nvb3JkLnggPiAxLjApIHtcbiAgICAgICAgICAgICAgICBkaXNjYXJkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsb3dwIHZlYzQgdGV4X2NvbG9yID0gdGV4dHVyZTJEKHVfc2FtcGxlciwgdl90ZXhfY29vcmQpO1xuICAgICAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdGV4X2NvbG9yO1xuICAgICAgICB9YDtcblxuICAgICAgICB0aGlzLnByb2dyYW0gPSBuZXcgV0dMUHJvZ3JhbShnbCwgdmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZSk7XG5cbiAgICAgICAgdGhpcy5vcmlnaW4gPSBuZXcgV0dMQnVmZmVyKGdsLCBwb2x5bGluZVsnb3JpZ2luJ10sIDIsIGdsLlRSSUFOR0xFX1NUUklQKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBuZXcgV0dMQnVmZmVyKGdsLCBwb2x5bGluZVsndmVydHMnXSwgMiwgZ2wuVFJJQU5HTEVfU1RSSVApO1xuICAgICAgICB0aGlzLmV4dHJ1c2lvbiA9IG5ldyBXR0xCdWZmZXIoZ2wsIHBvbHlsaW5lWydleHRydXNpb24nXSwgMiwgZ2wuVFJJQU5HTEVfU1RSSVApO1xuICAgICAgICB0aGlzLm1pbl96b29tID0gbmV3IFdHTEJ1ZmZlcihnbCwgcG9seWxpbmVbJ3pvb20nXSwgMSwgZ2wuVFJJQU5HTEVfU1RSSVApO1xuXG4gICAgICAgIHRoaXMudGV4dHVyZSA9IG5ldyBXR0xUZXh0dXJlKGdsLCB0ZXhfaW1hZ2UpO1xuICAgICAgICB0aGlzLnRleGNvb3JkcyA9IG5ldyBXR0xCdWZmZXIoZ2wsIHBvbHlsaW5lWyd0ZXhjb29yZHMnXSwgMiwgZ2wuVFJJQU5HTEVfU1RSSVApO1xuICAgIH1cblxuICAgIHJlbmRlcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBtYXRyaXg6IG51bWJlcltdLCBbbWFwX3dpZHRoLCBtYXBfaGVpZ2h0XTogW251bWJlciwgbnVtYmVyXSwgbWFwX3pvb206IG51bWJlciwgbWFwX2JlYXJpbmc6IG51bWJlciwgbWFwX3BpdGNoOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5wcm9ncmFtLnVzZShcbiAgICAgICAgICAgIHsnYV9wb3MnOiB0aGlzLm9yaWdpbiwgJ2Ffb2Zmc2V0JzogdGhpcy5vZmZzZXQsICdhX2V4dHJ1c2lvbic6IHRoaXMuZXh0cnVzaW9uLCAnYV9taW5fem9vbSc6IHRoaXMubWluX3pvb20sICdhX3RleF9jb29yZCc6IHRoaXMudGV4Y29vcmRzfSxcbiAgICAgICAgICAgIHsndV9vZmZzZXRfc2NhbGUnOiB0aGlzLnNjYWxlICogKG1hcF9oZWlnaHQgLyBtYXBfd2lkdGgpLCAndV9saW5lX3dpZHRoJzogdGhpcy53aWR0aCwgJ3VfbWF0cml4JzogbWF0cml4LFxuICAgICAgICAgICAgICd1X21hcF9hc3BlY3QnOiBtYXBfaGVpZ2h0IC8gbWFwX3dpZHRoLCAndV96b29tJzogbWFwX3pvb20sICd1X21hcF9iZWFyaW5nJzogbWFwX2JlYXJpbmd9LFxuICAgICAgICAgICAgeyd1X3NhbXBsZXInOiB0aGlzLnRleHR1cmV9XG4gICAgICAgICk7XG5cbiAgICAgICAgZ2wuZW5hYmxlKGdsLkJMRU5EKTtcbiAgICAgICAgZ2wuYmxlbmRGdW5jU2VwYXJhdGUoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBLCBnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXG4gICAgICAgIHRoaXMucHJvZ3JhbS5kcmF3KCk7XG4gICAgfVxufVxuXG5leHBvcnQge1BvbHlsaW5lQ29sbGVjdGlvbn07XG5leHBvcnQgdHlwZSB7UG9seWxpbmVTcGVjLCBMaW5lU3BlY307IiwiXG5pbXBvcnQgbWFwYm94Z2wgZnJvbSAnbWFwYm94LWdsJztcbmltcG9ydCBtYXBsaWJyZWdsIGZyb20gJ21hcGxpYnJlLWdsJztcblxudHlwZSBNYXBUeXBlID0gbWFwYm94Z2wuTWFwIHwgbWFwbGlicmVnbC5NYXA7XG5cbmZ1bmN0aW9uIG1lcmNhdG9yWGZyb21MbmcobG5nOiBudW1iZXIpIHtcbiAgICByZXR1cm4gKDE4MCArIGxuZykgLyAzNjA7XG59XG5cbmZ1bmN0aW9uIG1lcmNhdG9yWWZyb21MYXQobGF0OiBudW1iZXIpIHtcbiAgICByZXR1cm4gKDE4MCAtICgxODAgLyBNYXRoLlBJICogTWF0aC5sb2coTWF0aC50YW4oTWF0aC5QSSAvIDQgKyBsYXQgKiBNYXRoLlBJIC8gMzYwKSkpKSAvIDM2MDtcbn1cblxuLyoqXG4gKiBBIGBMbmdMYXRgIG9iamVjdCByZXByZXNlbnRzIGEgZ2l2ZW4gbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSBjb29yZGluYXRlLCBtZWFzdXJlZCBpbiBkZWdyZWVzLlxuICogVGhlc2UgY29vcmRpbmF0ZXMgYXJlIGJhc2VkIG9uIHRoZSBbV0dTODQgKEVQU0c6NDMyNikgc3RhbmRhcmRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1dvcmxkX0dlb2RldGljX1N5c3RlbSNXR1M4NCkuXG4gKlxuICogTWFwTGlicmUgR0wgdXNlcyBsb25naXR1ZGUsIGxhdGl0dWRlIGNvb3JkaW5hdGUgb3JkZXIgKGFzIG9wcG9zZWQgdG8gbGF0aXR1ZGUsIGxvbmdpdHVkZSkgdG8gbWF0Y2ggdGhlXG4gKiBbR2VvSlNPTiBzcGVjaWZpY2F0aW9uXShodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzk0NikuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGxuZyBMb25naXR1ZGUsIG1lYXN1cmVkIGluIGRlZ3JlZXMuXG4gKiBAcGFyYW0ge251bWJlcn0gbGF0IExhdGl0dWRlLCBtZWFzdXJlZCBpbiBkZWdyZWVzLlxuICogQGV4YW1wbGVcbiAqIHZhciBsbCA9IG5ldyBMbmdMYXQoLTEyMy45NzQ5LCA0MC43NzM2KTtcbiAqIGxsLmxuZzsgLy8gPSAtMTIzLjk3NDlcbiAqL1xuIGNsYXNzIExuZ0xhdCB7XG4gICAgbG5nOiBudW1iZXI7XG4gICAgbGF0OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihsbmc6IG51bWJlciwgbGF0OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKGlzTmFOKGxuZykgfHwgaXNOYU4obGF0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIExuZ0xhdCBvYmplY3Q6ICgke2xuZ30sICR7bGF0fSlgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxuZyA9ICtsbmc7XG4gICAgICAgIHRoaXMubGF0ID0gK2xhdDtcbiAgICAgICAgaWYgKHRoaXMubGF0ID4gOTAgfHwgdGhpcy5sYXQgPCAtOTApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBMbmdMYXQgbGF0aXR1ZGUgdmFsdWU6IG11c3QgYmUgYmV0d2VlbiAtOTAgYW5kIDkwJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b01lcmNhdG9yQ29vcmQoKSB7XG4gICAgICAgIHJldHVybiB7eDogbWVyY2F0b3JYZnJvbUxuZyh0aGlzLmxuZyksIHk6IG1lcmNhdG9yWWZyb21MYXQodGhpcy5sYXQpfTtcbiAgICB9XG59XG5cbmV4cG9ydCB7TG5nTGF0fTtcbmV4cG9ydCB0eXBlIHtNYXBUeXBlfTsiLCJcbmltcG9ydCB7IFBsb3RDb21wb25lbnQsIGxheWVyX3dvcmtlciB9IGZyb20gXCIuL1Bsb3RDb21wb25lbnRcIjtcbmltcG9ydCB7IFBvbHlsaW5lQ29sbGVjdGlvbiwgTGluZVNwZWN9IGZyb20gXCIuL1BvbHlsaW5lQ29sbGVjdGlvblwiO1xuaW1wb3J0IHsgQmlsbGJvYXJkQ29sbGVjdGlvbiwgQmlsbGJvYXJkU3BlYyB9IGZyb20gXCIuL0JpbGxib2FyZENvbGxlY3Rpb25cIjtcbmltcG9ydCB7IFdpbmRQcm9maWxlIH0gZnJvbSBcIi4vQXV0dW1uVHlwZXNcIjtcbmltcG9ydCB7IGdldE1pblpvb20sIGhleDJyZ2JhIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBMbmdMYXQgfSBmcm9tIFwiLi9NYXBcIjtcblxuY29uc3QgSE9ET19CR19ESU1TID0ge1xuICAgICdURVhfU0laRSc6IDI1NixcbiAgICAnTElORV9XSURUSCc6IDQsXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVIb2RvQmFja2dyb3VuZFRleHR1cmUoKSB7XG4gICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuXG4gICAgY2FudmFzLndpZHRoID0gSE9ET19CR19ESU1TWydURVhfU0laRSddO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBIT0RPX0JHX0RJTVNbJ1RFWF9TSVpFJ107XG5cbiAgICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICBpZiAoY3R4ID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IFwiQ291bGQgbm90IGdldCByZW5kZXJpbmcgY29udGV4dCBmb3IgdGhlIGhvZG9ncmFwaCBiYWNrZ3JvdW5kIGNhbnZhc1wiO1xuICAgIH1cblxuICAgIGN0eC5saW5lV2lkdGggPSBIT0RPX0JHX0RJTVNbJ0xJTkVfV0lEVEgnXTtcblxuICAgIGZvciAobGV0IGlybmcgPSBIT0RPX0JHX0RJTVNbJ1RFWF9TSVpFJ10gLyA0OyBpcm5nIDw9IEhPRE9fQkdfRElNU1snVEVYX1NJWkUnXSAvIDI7IGlybmcgKz0gSE9ET19CR19ESU1TWydURVhfU0laRSddIC8gNCkge1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5hcmMoSE9ET19CR19ESU1TWydURVhfU0laRSddIC8gMiwgSE9ET19CR19ESU1TWydURVhfU0laRSddIC8gMiwgaXJuZyAtIEhPRE9fQkdfRElNU1snTElORV9XSURUSCddIC8gMiwgMCwgMiAqIE1hdGguUEkpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxuXG4gICAgY29uc3QgY3RyX3ggPSBIT0RPX0JHX0RJTVNbJ1RFWF9TSVpFJ10gLyAyLCBjdHJfeSA9IEhPRE9fQkdfRElNU1snVEVYX1NJWkUnXSAvIDI7XG4gICAgY29uc3QgYXJyb3dfc2l6ZSA9IDIwXG4gICAgY3R4LmJlZ2luUGF0aCgpXG4gICAgY3R4Lm1vdmVUbyhjdHJfeCwgY3RyX3kpO1xuICAgIGN0eC5saW5lVG8oY3RyX3ggKyBhcnJvd19zaXplLCBjdHJfeSAtIGFycm93X3NpemUgLyAyKTtcbiAgICBjdHgubGluZVRvKGN0cl94ICsgYXJyb3dfc2l6ZSwgY3RyX3kgKyBhcnJvd19zaXplIC8gMik7XG4gICAgY3R4LmxpbmVUbyhjdHJfeCwgY3RyX3kpO1xuICAgIGN0eC5maWxsKClcblxuICAgIHJldHVybiBjYW52YXM7XG59O1xuXG5jb25zdCBIT0RPX0JHX1RFWFRVUkUgPSBfY3JlYXRlSG9kb0JhY2tncm91bmRUZXh0dXJlKCk7XG5cbmNvbnN0IEhPRE9fQ09MT1JTID0gW1xuICAgIHsnYm91bmRzJzogWzAsIDFdLCAnY29sb3InOiAnI2ZmZmZjYyd9LCBcbiAgICB7J2JvdW5kcyc6IFsxLCAzXSwgJ2NvbG9yJzogJyNhMWRhYjQnfSxcbiAgICB7J2JvdW5kcyc6IFszLCA2XSwgJ2NvbG9yJzogJyM0MWI2YzQnfSxcbiAgICB7J2JvdW5kcyc6IFs2LCA5XSwgJ2NvbG9yJzogJyMyMjVlYTgnfVxuXTtcblxuZnVuY3Rpb24gX2NyZWF0ZUhvZG9IZWlnaHRUZXh0dXJlKCkge1xuICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblxuICAgIGNhbnZhcy53aWR0aCA9IE1hdGgubWF4KC4uLkhPRE9fQ09MT1JTLm1hcChzID0+IE1hdGgubWF4KC4uLnNbJ2JvdW5kcyddKSkpO1xuICAgIGNhbnZhcy5oZWlnaHQgPSAxO1xuXG4gICAgbGV0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgSE9ET19DT0xPUlMuZm9yRWFjaChzdG9wID0+IHtcbiAgICAgICAgaWYgKGN0eCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgXCJDb3VsZCBub3QgZ2V0IHJlbmRlcmluZyBjb250ZXh0IGZvciB0aGUgaG9kb2dyYXBoIGhlaWdodCB0ZXh0dXJlIGNhbnZhc1wiO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgW2NsYiwgY3ViXSA9IHN0b3BbJ2JvdW5kcyddO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gc3RvcFsnY29sb3InXTtcbiAgICAgICAgY3R4LmZpbGxSZWN0KGNsYiwgMCwgY3ViIC0gY2xiLCAxKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjYW52YXM7XG59XG5cbmNvbnN0IEhPRE9fSEVJR0hUX1RFWFRVUkUgPSBfY3JlYXRlSG9kb0hlaWdodFRleHR1cmUoKTtcblxuLyoqIEEgY2xhc3MgcmVwcmVzZW50aW5nIGEgYSBmaWVsZCBvZiBob2RvZ3JhcGggcGxvdHMgKi9cbmNsYXNzIEhvZG9ncmFwaHMgZXh0ZW5kcyBQbG90Q29tcG9uZW50IHtcbiAgICByZWFkb25seSBwcm9maWxlczogV2luZFByb2ZpbGVbXTtcbiAgICByZWFkb25seSBiZ2NvbG9yOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG4gICAgcmVhZG9ubHkgdGhpbl9mYWM6IG51bWJlcjtcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIG1hcDogbWFwYm94Z2wuTWFwIHwgbnVsbDtcbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICBiZ19iaWxsYm9hcmQ6IEJpbGxib2FyZENvbGxlY3Rpb24gfCBudWxsO1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIGhvZG9fbGluZTogUG9seWxpbmVDb2xsZWN0aW9uIHwgbnVsbDtcbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICBzbV9saW5lOiBQb2x5bGluZUNvbGxlY3Rpb24gfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZmllbGQgb2YgaG9kb2dyYXBoc1xuICAgICAqIEBwYXJhbSBwcm9maWxlcyAtIEEgbGlzdCBvZiBwcm9maWxlcyB0byB1c2VcbiAgICAgKiBAcGFyYW0gb3B0cyAgICAgLSBWYXJpb3VzIG9wdGlvbnMgdG8gdXNlIHdoZW4gY3JlYXRpbmcgdGhlIGhvZG9ncmFwaHMgXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJvZmlsZXM6IFdpbmRQcm9maWxlW10sIG9wdHM6IHsnYmdjb2xvcic6IHN0cmluZywgJ3RoaW5fZmFjJzogbnVtYmVyfSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5wcm9maWxlcyA9IHByb2ZpbGVzO1xuXG4gICAgICAgIGNvbnN0IGNvbG9yID0gaGV4MnJnYmEob3B0c1snYmdjb2xvciddKTtcbiAgICAgICAgdGhpcy5iZ2NvbG9yID0gW2NvbG9yWzBdLCBjb2xvclsxXSwgY29sb3JbMl1dO1xuICAgICAgICB0aGlzLnRoaW5fZmFjID0gb3B0c1sndGhpbl9mYWMnXTtcblxuICAgICAgICB0aGlzLm1hcCA9IG51bGw7XG4gICAgICAgIHRoaXMuYmdfYmlsbGJvYXJkID0gbnVsbDtcbiAgICAgICAgdGhpcy5ob2RvX2xpbmUgPSBudWxsO1xuICAgICAgICB0aGlzLnNtX2xpbmUgPSBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIG9uQWRkKG1hcDogbWFwYm94Z2wuTWFwLCBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XG4gICAgICAgIHRoaXMubWFwID0gbWFwO1xuXG4gICAgICAgIGNvbnN0IGhvZG9fc2NhbGUgPSAoSE9ET19CR19ESU1TWydURVhfU0laRSddIC0gSE9ET19CR19ESU1TWydMSU5FX1dJRFRIJ10gLyAyKSAvIChIT0RPX0JHX0RJTVNbJ1RFWF9TSVpFJ10gKiA0MCk7XG4gICAgICAgIGNvbnN0IGJnX3NpemUgPSAxNDA7XG5cbiAgICAgICAgY29uc3QgYmdfZWxlbWVudHMgPSB0aGlzLl9nZXRIb2RvQmFja2dyb3VuZEVsZW1lbnRzKCk7XG4gICAgICAgIGNvbnN0IGJnX2ltYWdlID0geydmb3JtYXQnOiBnbC5SR0JBLCAndHlwZSc6IGdsLlVOU0lHTkVEX0JZVEUsICdpbWFnZSc6IEhPRE9fQkdfVEVYVFVSRSwgJ21hZ19maWx0ZXInOiBnbC5ORUFSRVNUfTtcblxuICAgICAgICB0aGlzLmJnX2JpbGxib2FyZCA9IG5ldyBCaWxsYm9hcmRDb2xsZWN0aW9uKGdsLCBiZ19lbGVtZW50cywgYmdfaW1hZ2UsIFtiZ19zaXplLCBiZ19zaXplXSwgdGhpcy5iZ2NvbG9yKTtcblxuICAgICAgICBjb25zdCBob2RvX3BvbHlsaW5lID0gYXdhaXQgbGF5ZXJfd29ya2VyLm1ha2VQb2x5TGluZXModGhpcy5wcm9maWxlcy5tYXAocHJvZiA9PiB7XG4gICAgICAgICAgICBjb25zdCBwdF9sbCA9IG5ldyBMbmdMYXQocHJvZlsnbG9uJ10sIHByb2ZbJ2xhdCddKS50b01lcmNhdG9yQ29vcmQoKTtcblxuICAgICAgICAgICAgY29uc3Qgem9vbSA9IGdldE1pblpvb20ocHJvZlsnamxhdCddLCBwcm9mWydpbG9uJ10sIHRoaXMudGhpbl9mYWMpO1xuICAgICAgICAgICAgY29uc3QgbWF4X3RleF96ID0gTWF0aC5tYXgoLi4uSE9ET19DT0xPUlMubWFwKHMgPT4gTWF0aC5tYXgoLi4uc1snYm91bmRzJ10pKSlcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAndmVydHMnOiBbLi4ucHJvZlsndSddXS5tYXAoKHUsIGlwdCkgPT4gW3UgLSBwcm9mWydzbXUnXSwgcHJvZlsndiddW2lwdF0gLSBwcm9mWydzbXYnXV0pLFxuICAgICAgICAgICAgICAgICdvcmlnaW4nOiBbcHRfbGwueCwgcHRfbGwueV0sXG4gICAgICAgICAgICAgICAgJ3pvb20nOiB6b29tLFxuICAgICAgICAgICAgICAgICd0ZXhjb29yZHMnOiBbLi4ucHJvZlsneiddXS5tYXAoeiA9PiBbeiAvICBtYXhfdGV4X3osIDAuNV0pXG4gICAgICAgICAgICB9IGFzIExpbmVTcGVjO1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgY29uc3QgaGVpZ2h0X2ltYWdlID0geydmb3JtYXQnOiBnbC5SR0JBLCAndHlwZSc6IGdsLlVOU0lHTkVEX0JZVEUsICdpbWFnZSc6IEhPRE9fSEVJR0hUX1RFWFRVUkUsICdtYWdfZmlsdGVyJzogZ2wuTkVBUkVTVH07XG4gICAgICAgIHRoaXMuaG9kb19saW5lID0gbmV3IFBvbHlsaW5lQ29sbGVjdGlvbihnbCwgaG9kb19wb2x5bGluZSwgaGVpZ2h0X2ltYWdlLCAxLjUsIGhvZG9fc2NhbGUgKiBiZ19zaXplKTtcblxuICAgICAgICBjb25zdCBzbV9wb2x5bGluZSA9IGF3YWl0IGxheWVyX3dvcmtlci5tYWtlUG9seUxpbmVzKHRoaXMucHJvZmlsZXMubWFwKHByb2YgPT4ge1xuICAgICAgICAgICAgY29uc3QgcHRfbGwgPSBuZXcgTG5nTGF0KHByb2ZbJ2xvbiddLCBwcm9mWydsYXQnXSkudG9NZXJjYXRvckNvb3JkKCk7XG4gICAgICAgICAgICBsZXQgcmV0ID0ge307XG5cbiAgICAgICAgICAgIGNvbnN0IHpvb20gPSBnZXRNaW5ab29tKHByb2ZbJ2psYXQnXSwgcHJvZlsnaWxvbiddLCB0aGlzLnRoaW5fZmFjKTtcblxuICAgICAgICAgICAgY29uc3Qgc21fbWFnID0gTWF0aC5oeXBvdChwcm9mWydzbXUnXSwgcHJvZlsnc212J10pO1xuICAgICAgICAgICAgY29uc3Qgc21fYW5nID0gTWF0aC5QSSAvIDIgLSBNYXRoLmF0YW4yKC1wcm9mWydzbXYnXSwgLXByb2ZbJ3NtdSddKTtcbiAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IDJcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAndmVydHMnOiBbW2J1ZmZlciAqIE1hdGguc2luKHNtX2FuZyksIGJ1ZmZlciAqIE1hdGguY29zKHNtX2FuZyldLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW3NtX21hZyAqIE1hdGguc2luKHNtX2FuZyksIHNtX21hZyAqIE1hdGguY29zKHNtX2FuZyldXSxcbiAgICAgICAgICAgICAgICAnb3JpZ2luJzogW3B0X2xsLngsIHB0X2xsLnldLFxuICAgICAgICAgICAgICAgICd6b29tJzogem9vbSxcbiAgICAgICAgICAgICAgICAndGV4Y29vcmRzJzogW1swLjUsIDAuNV0sIFswLjUsIDAuNV1dXG4gICAgICAgICAgICB9IGFzIExpbmVTcGVjO1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgbGV0IGJ5dGVfY29sb3IgPSB0aGlzLmJnY29sb3IubWFwKGMgPT4gYyAqIDI1NSk7XG4gICAgICAgIGJ5dGVfY29sb3IucHVzaCgyNTUpXG4gICAgICAgIGNvbnN0IHNtX2ltYWdlID0geydmb3JtYXQnOiBnbC5SR0JBLCAndHlwZSc6IGdsLlVOU0lHTkVEX0JZVEUsICd3aWR0aCc6IDEsICdoZWlnaHQnOiAxLCAnaW1hZ2UnOiBuZXcgVWludDhBcnJheShieXRlX2NvbG9yKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdtYWdfZmlsdGVyJzogZ2wuTkVBUkVTVH1cblxuICAgICAgICB0aGlzLnNtX2xpbmUgPSBuZXcgUG9seWxpbmVDb2xsZWN0aW9uKGdsLCBzbV9wb2x5bGluZSwgc21faW1hZ2UsIDEsIGhvZG9fc2NhbGUgKiBiZ19zaXplKTtcbiAgICB9XG5cbiAgICByZW5kZXIoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgbWF0cml4OiBudW1iZXJbXSkge1xuICAgICAgICBpZiAodGhpcy5tYXAgPT09IG51bGwgfHwgdGhpcy5ob2RvX2xpbmUgPT09IG51bGwgfHwgdGhpcy5zbV9saW5lID09PSBudWxsIHx8IHRoaXMuYmdfYmlsbGJvYXJkID09PSBudWxsKSByZXR1cm47XG5cbiAgICAgICAgY29uc3Qgem9vbSA9IHRoaXMubWFwLmdldFpvb20oKTtcbiAgICAgICAgY29uc3QgbWFwX3dpZHRoID0gdGhpcy5tYXAuZ2V0Q2FudmFzKCkud2lkdGg7XG4gICAgICAgIGNvbnN0IG1hcF9oZWlnaHQgPSB0aGlzLm1hcC5nZXRDYW52YXMoKS5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IGJlYXJpbmcgPSB0aGlzLm1hcC5nZXRCZWFyaW5nKCk7XG4gICAgICAgIGNvbnN0IHBpdGNoID0gdGhpcy5tYXAuZ2V0UGl0Y2goKTtcblxuICAgICAgICB0aGlzLmhvZG9fbGluZS5yZW5kZXIoZ2wsIG1hdHJpeCwgW21hcF93aWR0aCwgbWFwX2hlaWdodF0sIHpvb20sIGJlYXJpbmcsIHBpdGNoKTtcbiAgICAgICAgdGhpcy5zbV9saW5lLnJlbmRlcihnbCwgbWF0cml4LCBbbWFwX3dpZHRoLCBtYXBfaGVpZ2h0XSwgem9vbSwgYmVhcmluZywgYmVhcmluZyk7XG4gICAgICAgIHRoaXMuYmdfYmlsbGJvYXJkLnJlbmRlcihnbCwgbWF0cml4LCBbbWFwX3dpZHRoLCBtYXBfaGVpZ2h0XSwgem9vbSwgYmVhcmluZywgcGl0Y2gpO1xuICAgIH1cblxuICAgIF9nZXRIb2RvQmFja2dyb3VuZEVsZW1lbnRzKCkgOiBCaWxsYm9hcmRTcGVjIHtcbiAgICAgICAgY29uc3QgYmFja2dyb3VuZF9wdHMgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMucHJvZmlsZXMubWFwKHByb2YgPT4ge1xuICAgICAgICAgICAgY29uc3QgcHRfbGwgPSBuZXcgTG5nTGF0KHByb2ZbJ2xvbiddLCBwcm9mWydsYXQnXSkudG9NZXJjYXRvckNvb3JkKCk7XG4gICAgICAgICAgICBjb25zdCB6b29tID0gZ2V0TWluWm9vbShwcm9mWydqbGF0J10sIHByb2ZbJ2lsb24nXSwgdGhpcy50aGluX2ZhYyk7XG4gICAgICAgICAgICByZXR1cm4gW3B0X2xsLngsIHB0X2xsLnksIHpvb20sICAgcHRfbGwueCwgcHRfbGwueSwgem9vbSwgICBwdF9sbC54LCBwdF9sbC55LCB6b29tLCAgIFxuICAgICAgICAgICAgICAgICAgICBwdF9sbC54LCBwdF9sbC55LCB6b29tLCAgIHB0X2xsLngsIHB0X2xsLnksIHpvb20sICAgcHRfbGwueCwgcHRfbGwueSwgem9vbSxdO1xuICAgICAgICB9KS5mbGF0KCkpO1xuXG4gICAgICAgIGNvbnN0IGJhY2tncm91bmRfb2Zmc2V0ID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLnByb2ZpbGVzLm1hcChwcm9mID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNtX2FuZyA9IDkwIC0gTWF0aC5hdGFuMigtcHJvZlsnc212J10sIC1wcm9mWydzbXUnXSkgKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICAgICAgcmV0dXJuIFswLCBzbV9hbmcsICAgMCwgc21fYW5nLCAgIDEsIHNtX2FuZywgICAyLCBzbV9hbmcsICAgMywgc21fYW5nLCAgIDMsIHNtX2FuZ107XG4gICAgICAgIH0pLmZsYXQoKSk7XG5cbiAgICAgICAgY29uc3QgYmdfdGV4X2Nvb3JkcyA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5wcm9maWxlcy5tYXAocHJvZiA9PiB7XG4gICAgICAgICAgICByZXR1cm4gWzAuLCAwLiwgIDAuLCAwLiwgICAwLiwgMS4sICAgMS4sIDAuLCAgIDEuLCAxLiwgICAxLiwgMS5dO1xuICAgICAgICB9KS5mbGF0KCkpO1xuXG4gICAgICAgIHJldHVybiB7J3B0cyc6IGJhY2tncm91bmRfcHRzLCAnb2Zmc2V0JzogYmFja2dyb3VuZF9vZmZzZXQsICd0ZXhfY29vcmRzJzogYmdfdGV4X2Nvb3Jkc307XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIb2RvZ3JhcGhzOyIsIlxuaW1wb3J0IHsgTWFwVHlwZSB9IGZyb20gJy4vTWFwJztcblxuaW1wb3J0IHsgUGxvdENvbXBvbmVudCB9IGZyb20gJy4vUGxvdENvbXBvbmVudCc7XG5cbmFic3RyYWN0IGNsYXNzIFBsb3RMYXllckJhc2Uge1xuICAgIHJlYWRvbmx5IHR5cGU6ICdjdXN0b20nO1xuICAgIHJlYWRvbmx5IGlkOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihpZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdjdXN0b20nO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgfVxuXG4gICAgYWJzdHJhY3Qgb25BZGQobWFwOiBNYXBUeXBlLCBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSA6IHZvaWQ7XG4gICAgYWJzdHJhY3QgcmVuZGVyKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIG1hdHJpeDogbnVtYmVyW10pIDogdm9pZDtcbn1cblxuLyoqIFxuICogQSBzdGF0aWMgbWFwIGxheWVyLiBUaGUgZGF0YSBhcmUgYXNzdW1lZCB0byBiZSBzdGF0aWMgaW4gdGltZS4gSWYgdGhlIGRhdGEgaGF2ZSBhIHRpbWUgY29tcG9uZW50IChlLmcuLCBhIG1vZGVsIGZvcmVjYXN0KSwgYW4ge0BsaW5rIE11bHRpUGxvdExheWVyfSBcbiAqIG1heSBiZSBtb3JlIGFwcHJvcHJpYXRlLlxuICogQGV4YW1wbGVcbiAqIC8vIENyZWF0ZSBtYXAgbGF5ZXJzIGZyb20gcHJvdmlkZWQgZmllbGRzXG4gKiBjb25zdCBoZWlnaHRfbGF5ZXIgPSBuZXcgUGxvdExheWVyKCdoZWlnaHQtY29udG91cnMnLCBoZWlnaHRfY29udG91cnMpO1xuICogY29uc3Qgd2luZF9zcGVlZF9sYXllciA9IG5ldyBQbG90TGF5ZXIoJ3dpbmQtc3BlZWQtZmlsbCcsIHdpbmRfc3BlZWRfZmlsbCk7XG4gKiBjb25zdCBiYXJiX2xheWVyID0gbmV3IFBsb3RMYXllcignYmFyYnMnLCB3aW5kX2JhcmJzKTtcbiAqL1xuY2xhc3MgUGxvdExheWVyIGV4dGVuZHMgUGxvdExheWVyQmFzZSB7XG4gICAgcmVhZG9ubHkgZmllbGQ6IFBsb3RDb21wb25lbnQ7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBtYXAgbGF5ZXIgZnJvbSBhIGZpZWxkXG4gICAgICogQHBhcmFtIGlkICAgIC0gQSB1bmlxdWUgaWQgZm9yIHRoaXMgbGF5ZXJcbiAgICAgKiBAcGFyYW0gZmllbGQgLSBUaGUgZmllbGQgdG8gcGxvdCBpbiB0aGlzIGxheWVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywgZmllbGQ6IFBsb3RDb21wb25lbnQpIHtcbiAgICAgICAgc3VwZXIoaWQpO1xuICAgICAgICB0aGlzLmZpZWxkID0gZmllbGQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICogQWRkIHRoaXMgbGF5ZXIgdG8gYSBtYXBcbiAgICAgKi9cbiAgICBvbkFkZChtYXA6IE1hcFR5cGUsIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgICAgICAgdGhpcy5maWVsZC5vbkFkZChtYXAsIGdsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBSZW5kZXIgdGhpcyBsYXllclxuICAgICAqL1xuICAgIHJlbmRlcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBtYXRyaXg6IG51bWJlcltdKSB7XG4gICAgICAgIHRoaXMuZmllbGQucmVuZGVyKGdsLCBtYXRyaXgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIHZhcnlpbmcgbWFwIGxheWVyLiBJZiB0aGUgZGF0YSBkb24ndCBoYXZlIGEgdmFyeWluZyBjb21wb25lbnQsIHN1Y2ggYXMgb3ZlciB0aW1lLCBpdCBtaWdodCBiZSBlYXNpZXIgdG8gdXNlIGFuIHtAbGluayBQbG90TGF5ZXJ9IGluc3RlYWQuXG4gKiBAZXhhbXBsZVxuICogLy8gQ3JlYXRlIGEgdmFyeWluZyBtYXAgbGF5ZXJcbiAqIGhlaWdodF9sYXllciA9IG5ldyBNdWx0aVBsb3RMYXllcignaGVpZ2h0LWNvbnRvdXJzJyk7XG4gKiBcbiAqIC8vIEFkZCBzb21lIGZpZWxkcyB0byBpdFxuICogaGVpZ2h0X2xheWVyLmFkZEZpZWxkKGhlaWdodF9jb250b3VyX2YwMCwgJzIwMjMwMTEyXzEyMDAnKTtcbiAqIGhlaWdodF9sYXllci5hZGRGaWVsZChoZWlnaHRfY29udG91cl9mMDEsICcyMDIzMDExMl8xMzAwJyk7XG4gKiBoZWlnaHRfbGF5ZXIuYWRkRmllbGQoaGVpZ2h0X2NvbnRvdXJfZjAyLCAnMjAyMzAxMTJfMTQwMCcpO1xuICogXG4gKiAvLyBTZXQgdGhlIGRhdGUvdGltZSBpbiB0aGUgbWFwIGxheWVyXG4gKiBoZWlnaHRfbGF5ZXIuc2V0QWN0aXZlS2V5KCcyMDIzMDExMl8xMjAwJyk7XG4gKi9cbmNsYXNzIE11bHRpUGxvdExheWVyIGV4dGVuZHMgUGxvdExheWVyQmFzZSB7XG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgZmllbGRzOiBSZWNvcmQ8c3RyaW5nLCBQbG90Q29tcG9uZW50PjtcbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICBmaWVsZF9rZXk6IHN0cmluZyB8IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICBtYXA6IE1hcFR5cGUgfCBudWxsO1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfCBudWxsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSB0aW1lLXZhcnlpbmcgbWFwIGxheWVyXG4gICAgICogQHBhcmFtIGlkIC0gQSB1bmlxdWUgaWQgZm9yIHRoaXMgbGF5ZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihpZDogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKGlkKTtcblxuICAgICAgICB0aGlzLmZpZWxkcyA9IHt9O1xuICAgICAgICB0aGlzLmZpZWxkX2tleSA9IG51bGw7XG4gICAgICAgIHRoaXMubWFwID0gbnVsbDtcbiAgICAgICAgdGhpcy5nbCA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICogQWRkIHRoaXMgbGF5ZXIgdG8gYSBtYXBcbiAgICAgKi9cbiAgICBvbkFkZChtYXA6IE1hcFR5cGUsIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcblxuICAgICAgICBPYmplY3QudmFsdWVzKHRoaXMuZmllbGRzKS5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgICAgICAgIGZpZWxkLm9uQWRkKG1hcCwgZ2wpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXBhaW50SWZOZWNlc3NhcnkobnVsbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fcmVwYWludElmTmVjZXNzYXJ5KG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIFJlbmRlciB0aGlzIGxheWVyXG4gICAgICovXG4gICAgcmVuZGVyKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIG1hdHJpeDogbnVtYmVyW10pIHtcbiAgICAgICAgaWYgKHRoaXMubWFwICE9PSBudWxsICYmIHRoaXMuZ2wgIT09IG51bGwgJiYgdGhpcy5maWVsZF9rZXkgIT09IG51bGwgXG4gICAgICAgICAgICAmJiB0aGlzLmZpZWxkcy5oYXNPd25Qcm9wZXJ0eSh0aGlzLmZpZWxkX2tleSkgJiYgdGhpcy5maWVsZHNbdGhpcy5maWVsZF9rZXldICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmZpZWxkc1t0aGlzLmZpZWxkX2tleV0ucmVuZGVyKGdsLCBtYXRyaXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBhY3RpdmUga2V5XG4gICAgICogQHBhcmFtIGtleSAtIFRoZSBuZXcga2V5XG4gICAgICovXG4gICAgc2V0QWN0aXZlS2V5KGtleTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IG9sZF9maWVsZF9rZXkgPSB0aGlzLmZpZWxkX2tleTtcbiAgICAgICAgdGhpcy5maWVsZF9rZXkgPSBrZXk7XG5cbiAgICAgICAgdGhpcy5fcmVwYWludElmTmVjZXNzYXJ5KG9sZF9maWVsZF9rZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIGxpc3Qgb2YgYWxsIGRhdGVzL3RpbWVzIHRoYXQgaGF2ZSBiZWVuIGFkZGVkIHRvIHRoZSBsYXllclxuICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIGRhdGVzL3RpbWVzXG4gICAgICovXG4gICAgZ2V0S2V5cygpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZmllbGRzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBmaWVsZCB2YWxpZCBhdCBhIHNwZWNpZmljIGRhdGUvdGltZVxuICAgICAqIEBwYXJhbSBmaWVsZCAtIFRoZSBmaWVsZCB0byBhZGRcbiAgICAgKiBAcGFyYW0gZHQgICAgLSBUaGUgZGF0ZS90aW1lIGF0IHdoaWNoIHRoZSBmaWVsZCBpcyB2YWxpZFxuICAgICAqL1xuICAgIGFkZEZpZWxkKGZpZWxkOiBQbG90Q29tcG9uZW50LCBrZXk6IHN0cmluZykge1xuICAgICAgICBjb25zdCBvbGRfZmllbGRfa2V5ID0gdGhpcy5maWVsZF9rZXk7XG5cbiAgICAgICAgaWYgKHRoaXMubWFwICE9PSBudWxsICYmIHRoaXMuZ2wgIT09IG51bGwgJiYgZmllbGQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGZpZWxkLm9uQWRkKHRoaXMubWFwLCB0aGlzLmdsKS50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVwYWludElmTmVjZXNzYXJ5KG51bGwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZpZWxkc1trZXldID0gZmllbGQ7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5maWVsZF9rZXkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZmllbGRfa2V5ID0ga2V5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgX3JlcGFpbnRJZk5lY2Vzc2FyeShvbGRfZmllbGRfa2V5OiBzdHJpbmcgfCBudWxsKSB7XG4gICAgICAgIGlmICh0aGlzLm1hcCAhPT0gbnVsbCAmJiBvbGRfZmllbGRfa2V5ICE9PSB0aGlzLmZpZWxkX2tleSkge1xuICAgICAgICAgICAgdGhpcy5tYXAudHJpZ2dlclJlcGFpbnQoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHtQbG90TGF5ZXIsIE11bHRpUGxvdExheWVyfTsiLCJcbmltcG9ydCB7IHppcCB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmNsYXNzIENhY2hlPEEgZXh0ZW5kcyB1bmtub3duW10sIFI+IHtcbiAgICBjYWNoZWRfdmFsdWU6IFIgfCBudWxsO1xuICAgIGNvbXB1dGVfdmFsdWU6ICguLi5hcmdzOiBBKSA9PiBSO1xuXG4gICAgY29uc3RydWN0b3IoY29tcHV0ZV92YWx1ZTogKC4uLmFyZ3M6IEEpID0+IFIpIHtcbiAgICAgICAgdGhpcy5jYWNoZWRfdmFsdWUgPSBudWxsO1xuICAgICAgICB0aGlzLmNvbXB1dGVfdmFsdWUgPSBjb21wdXRlX3ZhbHVlO1xuICAgIH1cblxuICAgIGdldFZhbHVlKC4uLmFyZ3M6IEEpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVkX3ZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlZF92YWx1ZSA9IHRoaXMuY29tcHV0ZV92YWx1ZSguLi5hcmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlZF92YWx1ZTtcbiAgICB9XG59XG5cbmludGVyZmFjZSBDb29yZHMge1xuICAgIGxvbnM6IEZsb2F0MzJBcnJheTtcbiAgICBsYXRzOiBGbG9hdDMyQXJyYXk7XG59XG5cbi8qKiBBIHBsYXRlIGNhcnJlZSAoYS5rLmEuIGxhdC9sb24pIGdyaWQgd2l0aCB1bmlmb3JtIGdyaWQgc3BhY2luZyAqL1xuY2xhc3MgUGxhdGVDYXJyZWVHcmlkIHtcbiAgICByZWFkb25seSB0eXBlOiAnbGF0bG9uJztcblxuICAgIHJlYWRvbmx5IG5pOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgbmo6IG51bWJlcjtcbiAgICByZWFkb25seSBsbF9sb246IG51bWJlcjtcbiAgICByZWFkb25seSBsbF9sYXQ6IG51bWJlcjtcbiAgICByZWFkb25seSB1cl9sb246IG51bWJlcjtcbiAgICByZWFkb25seSB1cl9sYXQ6IG51bWJlcjtcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHJlYWRvbmx5IF9sbF9jYWNoZTogQ2FjaGU8W10sIENvb3Jkcz47XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBwbGF0ZSBjYXJyZWUgZ3JpZFxuICAgICAqIEBwYXJhbSBuaSAgICAgLSBUaGUgbnVtYmVyIG9mIGdyaWQgcG9pbnRzIGluIHRoZSBpIChsb25naXR1ZGUpIGRpcmVjdGlvblxuICAgICAqIEBwYXJhbSBuaiAgICAgLSBUaGUgbnVtYmVyIG9mIGdyaWQgcG9pbnRzIGluIHRoZSBqIChsYXRpdHVkZSkgZGlyZWN0aW9uXG4gICAgICogQHBhcmFtIGxsX2xvbiAtIFRoZSBsb25naXR1ZGUgb2YgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSBncmlkXG4gICAgICogQHBhcmFtIGxsX2xhdCAtIFRoZSBsYXRpdHVkZSBvZiB0aGUgbG93ZXIgbGVmdCBjb3JuZXIgb2YgdGhlIGdyaWRcbiAgICAgKiBAcGFyYW0gdXJfbG9uIC0gVGhlIGxvbmdpdHVkZSBvZiB0aGUgdXBwZXIgcmlnaHQgY29ybmVyIG9mIHRoZSBncmlkXG4gICAgICogQHBhcmFtIHVyX2xhdCAtIFRoZSBsYXRpdHVkZSBvZiB0aGUgdXBwZXIgcmlnaHQgY29ybmVyIG9mIHRoZSBncmlkXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iobmk6IG51bWJlciwgbmo6IG51bWJlciwgbGxfbG9uOiBudW1iZXIsIGxsX2xhdDogbnVtYmVyLCB1cl9sb246IG51bWJlciwgdXJfbGF0OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2xhdGxvbic7XG5cbiAgICAgICAgdGhpcy5uaSA9IG5pO1xuICAgICAgICB0aGlzLm5qID0gbmo7XG4gICAgICAgIHRoaXMubGxfbG9uID0gbGxfbG9uO1xuICAgICAgICB0aGlzLmxsX2xhdCA9IGxsX2xhdDtcbiAgICAgICAgdGhpcy51cl9sb24gPSB1cl9sb247XG4gICAgICAgIHRoaXMudXJfbGF0ID0gdXJfbGF0O1xuXG4gICAgICAgIHRoaXMuX2xsX2NhY2hlID0gbmV3IENhY2hlKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRsb24gPSAodGhpcy51cl9sb24gLSB0aGlzLmxsX2xvbikgLyAodGhpcy5uaSAtIDEpO1xuICAgICAgICAgICAgY29uc3QgZGxhdCA9ICh0aGlzLnVyX2xhdCAtIHRoaXMubGxfbGF0KSAvICh0aGlzLm5qIC0gMSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGxvbnMgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMubmkpO1xuICAgICAgICAgICAgY29uc3QgbGF0cyA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5uaik7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbG9uc1tpXSA9IHRoaXMubGxfbG9uICsgaSAqIGRsb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5uajsgaisrKSB7XG4gICAgICAgICAgICAgICAgbGF0c1tqXSA9IHRoaXMubGxfbGF0ICsgaiAqIGRsYXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7J2xvbnMnOiBsb25zLCAnbGF0cyc6IGxhdHN9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBsaXN0IG9mIGxvbmdpdHVkZXMgYW5kIGxhdGl0dWRlcyBvbiB0aGUgZ3JpZCAoaW50ZXJuYWwgbWV0aG9kKVxuICAgICAqL1xuICAgIGdldENvb3JkcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xsX2NhY2hlLmdldFZhbHVlKCk7XG4gICAgfVxufVxuXG5jbGFzcyBMYW1iZXJ0R3JpZCB7XG4gICAgcmVhZG9ubHkgdHlwZTogJ2xjYyc7XG5cbiAgICByZWFkb25seSBuaTogbnVtYmVyO1xuICAgIHJlYWRvbmx5IG5qOiBudW1iZXI7XG5cbiAgICByZWFkb25seSBfbGxfY2FjaGU6IENhY2hlPFtdLCBDb29yZHM+O1xuXG4gICAgY29uc3RydWN0b3Iobmk6IG51bWJlciwgbmo6IG51bWJlcikge1xuICAgICAgICB0aGlzLnR5cGUgPSAnbGNjJztcblxuICAgICAgICB0aGlzLm5pID0gbmk7XG4gICAgICAgIHRoaXMubmogPSBuajtcblxuICAgICAgICB0aGlzLl9sbF9jYWNoZSA9IG5ldyBDYWNoZSgoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICdsb25zJzogbmV3IEZsb2F0MzJBcnJheSh0aGlzLm5pKSxcbiAgICAgICAgICAgICAgICAnbGF0cyc6IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5uailcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0Q29vcmRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGxfY2FjaGUuZ2V0VmFsdWUoKTtcbiAgICB9XG59XG5cbnR5cGUgR3JpZCA9IFBsYXRlQ2FycmVlR3JpZDsgLy8gfCBMYW1iZXJ0R3JpZDtcbnR5cGUgR3JpZFR5cGUgPSB0eXBlb2YgUGxhdGVDYXJyZWVHcmlkOyAvLyB8IHR5cGVvZiBMYW1iZXJ0R3JpZDtcblxuLyoqIEEgY2xhc3MgcmVwcmVzZW50aW5nIGEgcmF3IDJEIGZpZWxkIG9mIGdyaWRkZWQgZGF0YSwgc3VjaCBhcyBoZWlnaHQgb3IgdSB3aW5kLiAqL1xuY2xhc3MgUmF3U2NhbGFyRmllbGQge1xuICAgIHJlYWRvbmx5IGdyaWQ6IEdyaWQ7XG4gICAgcmVhZG9ubHkgZGF0YTogRmxvYXQzMkFycmF5O1xuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgcmVhZG9ubHkgX3BhZF9jYWNoZTogQ2FjaGU8W10sIHt3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgZGF0YTogRmxvYXQzMkFycmF5fT47XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBkYXRhIGZpZWxkLiBcbiAgICAgKiBAcGFyYW0gZ3JpZCAtIFRoZSBncmlkIG9uIHdoaWNoIHRoZSBkYXRhIGFyZSBkZWZpbmVkXG4gICAgICogQHBhcmFtIGRhdGEgLSBUaGUgZGF0YSwgd2hpY2ggc2hvdWxkIGJlIGdpdmVuIGFzIGEgMUQgYXJyYXkgaW4gcm93LW1ham9yIG9yZGVyLCB3aXRoIHRoZSBmaXJzdCBlbGVtZW50IGJlaW5nIGF0IHRoZSBsb3dlci1sZWZ0IGNvcm5lciBvZiB0aGUgZ3JpZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihncmlkOiBHcmlkLCBkYXRhOiBGbG9hdDMyQXJyYXkpIHtcbiAgICAgICAgdGhpcy5ncmlkID0gZ3JpZDtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcblxuICAgICAgICB0aGlzLl9wYWRfY2FjaGUgPSBuZXcgQ2FjaGUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFkX3dpZHRoID0gTWF0aC5wb3coMiwgTWF0aC5jZWlsKE1hdGgubG9nMih0aGlzLmdyaWQubmkpKSk7XG4gICAgICAgICAgICBjb25zdCBwYWRfaGVpZ2h0ID0gTWF0aC5wb3coMiwgTWF0aC5jZWlsKE1hdGgubG9nMih0aGlzLmdyaWQubmopKSk7XG4gICAgXG4gICAgICAgICAgICBjb25zdCBkYXRhX3BhZCA9IG5ldyBGbG9hdDMyQXJyYXkocGFkX3dpZHRoICogcGFkX2hlaWdodCk7XG4gICAgXG4gICAgICAgICAgICBmb3IgKGxldCBpcm93ID0gMDsgaXJvdyA8IHRoaXMuZ3JpZC5uajsgaXJvdysrKSB7XG4gICAgICAgICAgICAgICAgZGF0YV9wYWQuc2V0KHRoaXMuZGF0YS5zbGljZShpcm93ICogdGhpcy5ncmlkLm5pLCAoaXJvdyArIDEpICogdGhpcy5ncmlkLm5pKSwgaXJvdyAqIHBhZF93aWR0aCk7XG4gICAgICAgICAgICAgICAgZGF0YV9wYWQuc2V0KHRoaXMuZGF0YS5zbGljZSgoaXJvdyArIDEpICogdGhpcy5ncmlkLm5pIC0gMSwgKGlyb3cgKyAxKSAqIHRoaXMuZ3JpZC5uaSksIGlyb3cgKiBwYWRfd2lkdGggKyB0aGlzLmdyaWQubmkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YV9wYWQuc2V0KHRoaXMuZGF0YS5zbGljZSgodGhpcy5ncmlkLm5qIC0gMSkgKiB0aGlzLmdyaWQubmksIHRoaXMuZ3JpZC5uaiAqIHRoaXMuZ3JpZC5uaSksIHRoaXMuZ3JpZC5uaiAqIHBhZF93aWR0aCk7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4geyd3aWR0aCc6IHBhZF93aWR0aCwgJ2hlaWdodCc6IHBhZF9oZWlnaHQsICdkYXRhJzogZGF0YV9wYWR9O1xuICAgICAgICB9KVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBQYWQgdGhlIGRhdGEgc3VjaCB0aGF0IGJvdGggYXhlcyBhcmUgYSBwb3dlciBvZiAyIGluIGxlbmd0aCAoaW50ZXJuYWwgbWV0aG9kKVxuICAgICAqL1xuICAgIGdldFBhZGRlZERhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYWRfY2FjaGUuZ2V0VmFsdWUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgZmllbGQgYnkgYWdncmVnYXRpbmcgYSBudW1iZXIgb2YgZmllbGRzIHVzaW5nIGEgc3BlY2lmaWMgZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0gZnVuYyAtIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGFwcGxpZWQgZWFjaCBlbGVtZW50IG9mIHRoZSBmaWVsZC4gSXQgc2hvdWxkIHRha2UgdGhlIHNhbWUgbnVtYmVyIG9mIGFyZ3VtZW50cyBhcyBmaWVsZHMgeW91IGhhdmUgYW5kIHJldHVybiBhIHNpbmdsZSBudW1iZXIuXG4gICAgICogQHBhcmFtIGFyZ3MgLSBUaGUgUmF3U2NhbGFyRmllbGRzIHRvIGFnZ3JlZ2F0ZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IGdyaWRkZWQgZmllbGRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIENvbXB1dGUgd2luZCBzcGVlZCBmcm9tIHUgYW5kIHZcbiAgICAgKiB3aW5kX3NwZWVkX2ZpZWxkID0gUmF3U2NhbGFyRmllbGQuYWdncmVhdGVGaWVsZHMoTWF0aC5oeXBvdCwgdV9maWVsZCwgdl9maWVsZCk7XG4gICAgICovXG4gICAgc3RhdGljIGFnZ3JlZ2F0ZUZpZWxkcyhmdW5jOiAoLi4uYXJnczogbnVtYmVyW10pID0+IG51bWJlciwgLi4uYXJnczogUmF3U2NhbGFyRmllbGRbXSkge1xuICAgICAgICBmdW5jdGlvbiogbWFwR2VuZXJhdG9yPFQsIFU+KGdlbjogR2VuZXJhdG9yPFQ+LCBmdW5jOiAoYXJnOiBUKSA9PiBVKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW0gb2YgZ2VuKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgZnVuYyhlbGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHppcHBlZF9hcmdzID0gemlwKC4uLmFyZ3MubWFwKGEgPT4gYS5kYXRhKSk7XG4gICAgICAgIGNvbnN0IGFnZ19kYXRhID0gbmV3IEZsb2F0MzJBcnJheShtYXBHZW5lcmF0b3IoemlwcGVkX2FyZ3MsIChhOiBudW1iZXJbXSk6IG51bWJlciA9PiBmdW5jKC4uLmEpKSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBSYXdTY2FsYXJGaWVsZChhcmdzWzBdLmdyaWQsIGFnZ19kYXRhKTtcbiAgICB9XG59XG5cbnR5cGUgUmF3VmVjdG9yRmllbGQgPSB7dTogUmF3U2NhbGFyRmllbGQsIHY6IFJhd1NjYWxhckZpZWxkfTtcblxuZXhwb3J0IHtSYXdTY2FsYXJGaWVsZCwgUGxhdGVDYXJyZWVHcmlkfTtcbmV4cG9ydCB0eXBlIHtSYXdWZWN0b3JGaWVsZCwgR3JpZH07Il0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInRoaXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJjaHVua0lkIiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJkb2N1bWVudCIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsZW5ndGgiLCJFcnJvciIsInJlcGxhY2UiLCJwIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsInByb3h5TWFya2VyIiwiY3JlYXRlRW5kcG9pbnQiLCJyZWxlYXNlUHJveHkiLCJ0aHJvd01hcmtlciIsImlzT2JqZWN0IiwidmFsIiwidHJhbnNmZXJIYW5kbGVycyIsIk1hcCIsImNhbkhhbmRsZSIsInNlcmlhbGl6ZSIsInBvcnQxIiwicG9ydDIiLCJNZXNzYWdlQ2hhbm5lbCIsImV4cG9zZSIsImRlc2VyaWFsaXplIiwicG9ydCIsInN0YXJ0Iiwid3JhcCIsInNlcmlhbGl6ZWQiLCJpc0Vycm9yIiwibWVzc2FnZSIsIm5hbWUiLCJzdGFjayIsImFzc2lnbiIsImVwIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNhbGxiYWNrIiwiZXYiLCJkYXRhIiwiaWQiLCJ0eXBlIiwicGF0aCIsImFyZ3VtZW50TGlzdCIsIm1hcCIsImZyb21XaXJlVmFsdWUiLCJyZXR1cm5WYWx1ZSIsInBhcmVudCIsInNsaWNlIiwicmVkdWNlIiwicmF3VmFsdWUiLCJhcHBseSIsInByb3h5IiwidHJhbnNmZXJzIiwidHJhbnNmZXJDYWNoZSIsInNldCIsInRyYW5zZmVyIiwidW5kZWZpbmVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjYXRjaCIsInRoZW4iLCJ3aXJlVmFsdWUiLCJ0cmFuc2ZlcmFibGVzIiwidG9XaXJlVmFsdWUiLCJwb3N0TWVzc2FnZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjbG9zZUVuZFBvaW50IiwiZW5kcG9pbnQiLCJjb25zdHJ1Y3RvciIsImlzTWVzc2FnZVBvcnQiLCJjbG9zZSIsInRhcmdldCIsImNyZWF0ZVByb3h5IiwidGhyb3dJZlByb3h5UmVsZWFzZWQiLCJpc1JlbGVhc2VkIiwiaXNQcm94eVJlbGVhc2VkIiwiUHJveHkiLCJfdGFyZ2V0IiwicmVxdWVzdFJlc3BvbnNlTWVzc2FnZSIsInRvU3RyaW5nIiwiYmluZCIsIl90aGlzQXJnIiwicmF3QXJndW1lbnRMaXN0IiwibGFzdCIsInByb2Nlc3NBcmd1bWVudHMiLCJjb25zdHJ1Y3QiLCJwcm9jZXNzZWQiLCJ2IiwiYXJyIiwiQXJyYXkiLCJjb25jYXQiLCJXZWFrTWFwIiwiaGFuZGxlciIsInNlcmlhbGl6ZWRWYWx1ZSIsIm1zZyIsImZpbGwiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJOdW1iZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiam9pbiIsImwiLCJsYXllcl93b3JrZXIiLCJXb3JrZXIiLCJVUkwiLCJoZXgycmdiYSIsImhleHN0ciIsIm91dF90eXBlIiwibWF0Y2giLCJyZ2JhIiwiZmlsdGVyIiwiYyIsInBhcnNlSW50IiwiaGV4MnJnYiIsInJnYjJoZXgiLCJyZ2IiLCJpbl90eXBlIiwicmdiYV8iLCJyb3VuZCIsInBhZFN0YXJ0IiwidG9VcHBlckNhc2UiLCJyZ2JhMmhleCIsInJnYjJoc3YiLCJIIiwiQ21heCIsIm1heCIsIkRlbHRhIiwibWluIiwiaHN2MnJnYiIsImhzdiIsInJfcHJpbWUiLCJnX3ByaW1lIiwiYl9wcmltZSIsIlMiLCJWIiwiQyIsIlgiLCJhYnMiLCJtIiwiZ2V0TWluWm9vbSIsImpsYXQiLCJpbG9uIiwidGhpbl9mYWNfYmFzZSIsInpvb20iLCJ0aGluX2ZhYyIsInppcCIsIml0ZXJhdG9ycyIsImFyZ3MiLCJ4IiwiaXRlcmF0b3IiLCJjdXJyZW50IiwibmV4dCIsInNvbWUiLCJkb25lIiwiZ2wiLCJ2ZXJ0cyIsIm5fY29vcmRzX3Blcl92ZXJ0IiwiZHJhd19tb2RlIiwiRFRZUEVTIiwiRkxPQVQiLCJVTlNJR05FRF9CWVRFIiwiZHR5cGUiLCJuX3ZlcnRzIiwiYnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsImJ1ZmZlckRhdGEiLCJTVEFUSUNfRFJBVyIsImJpbmRUb1Byb2dyYW0iLCJwcm9nX2F0dHJfbG9jYXRpb24iLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJpbWFnZSIsInRleHR1cmUiLCJjcmVhdGVUZXh0dXJlIiwidGV4X251bSIsInNldEltYWdlRGF0YSIsIm1hZ19maWx0ZXIiLCJMSU5FQVIiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV8yRCIsIlRFWFRVUkVfV1JBUF9TIiwiQ0xBTVBfVE9fRURHRSIsIlRFWFRVUkVfV1JBUF9UIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiVEVYVFVSRV9NQUdfRklMVEVSIiwiYmluZFRleHR1cmUiLCJ0ZXhJbWFnZTJEIiwicHJvZ191bmlfbG9jYXRpb24iLCJnbF90ZXhfbnVtIiwiYWN0aXZhdGUiLCJ1bmlmb3JtMWkiLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJkZWFjdGl2YXRlIiwiZGVsZXRlIiwiZGVsZXRlVGV4dHVyZSIsInZlcnRleF9zaGFkZXJfc3JjIiwiZnJhZ21lbnRfc2hhZGVyX3NyYyIsInByb2ciLCJmcmFnX3NoYWRlcl9zcmMiLCJ2ZXJ0ZXhTaGFkZXIiLCJjcmVhdGVTaGFkZXIiLCJWRVJURVhfU0hBREVSIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwiY29tcGlsYXRpb25Mb2ciLCJnZXRTaGFkZXJJbmZvTG9nIiwiY29uc29sZSIsImxvZyIsImZyYWdtZW50U2hhZGVyIiwiRlJBR01FTlRfU0hBREVSIiwicHJvZ3JhbSIsImNyZWF0ZVByb2dyYW0iLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImxpbmtMb2ciLCJnZXRQcm9ncmFtSW5mb0xvZyIsImNvbXBpbGVBbmRMaW5rU2hhZGVycyIsImF0dHJpYnV0ZXMiLCJ1bmlmb3JtcyIsInJlbW92ZV9jb21tZW50cyIsImxpbmUiLCJjb21tZW50X2lkeCIsImluZGV4T2YiLCJzcGxpdCIsIm1hdGNoQWxsIiwiYV9uYW1lIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJ1X25hbWUiLCJ0eXBlX3BhcnRzIiwidW5pZm9ybV9sb2MiLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJ1c2UiLCJhdHRyaWJ1dGVfYnVmZmVycyIsInVuaWZvcm1fdmFsdWVzIiwidGV4dHVyZXMiLCJ1c2VQcm9ncmFtIiwiYmluZEF0dHJpYnV0ZXMiLCJzZXRVbmlmb3JtcyIsImJpbmRUZXh0dXJlcyIsImVudHJpZXMiLCJmb3JFYWNoIiwid2FybiIsInVuaWZvcm0xZiIsInVuaWZvcm0yZnYiLCJ1bmlmb3JtM2Z2IiwidW5pZm9ybTRmdiIsIlN0cmluZyIsInVuaWZvcm1NYXRyaXg0ZnYiLCJzYW1wbGVyX25hbWUiLCJkcmF3IiwiZHJhd0FycmF5cyIsImZyYW1lYnVmZmVyIiwiY2xlYXIiLCJjb2xvciIsImNsZWFyQ29sb3IiLCJiaW5kRnJhbWVidWZmZXIiLCJGUkFNRUJVRkZFUiIsIkNPTE9SX0JVRkZFUl9CSVQiLCJyZW5kZXJUbyIsInkiLCJ3aWR0aCIsImhlaWdodCIsInZpZXdwb3J0IiwiY29weVRvVGV4dHVyZSIsImNvcHlUZXhJbWFnZTJEIiwiUkdCQSIsInJlZ2lzdGVyR0xDb250ZXh0IiwiV0dMRnJhbWVidWZmZXJCYXNlIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRCIsIkNPTE9SX0FUVEFDSE1FTlQwIiwiV0dMRnJhbWVidWZmZXIiLCJzY3JlZW4iLCJXR0xTY3JlZW5idWZmZXIiLCJmaWVsZCIsIm9wdHMiLCJpbnRlcnZhbCIsInRoaW5uZXIiLCJ2ZXJ0aWNlcyIsImxhdGl0dWRlcyIsImZpbGxfdGV4dHVyZSIsInRleGNvb3JkcyIsImdyaWRfc3BhY2luZyIsInRleF93aWR0aCIsInRleF9oZWlnaHQiLCJvbkFkZCIsImdldEV4dGVuc2lvbiIsIldHTFByb2dyYW0iLCJncmlkIiwiZ2V0Q29vcmRzIiwiZmllbGRfbGF0cyIsImZpZWxkX2xvbnMiLCJnZXRQYWRkZWREYXRhIiwidGV4X2RhdGEiLCJtYWtlRG9tYWluVmVydGljZXNBbmRUZXhDb29yZHMiLCJ2ZXJ0c190ZXhfY29vcmRzIiwiRmxvYXQzMkFycmF5IiwibGF0IiwiZmxhdCIsIldHTEJ1ZmZlciIsIlRSSUFOR0xFX1NUUklQIiwiZmlsbF9pbWFnZSIsIkxVTUlOQU5DRSIsIldHTFRleHR1cmUiLCJyZW5kZXIiLCJtYXRyaXgiLCJnZXRab29tIiwiaW50diIsImN1dG9mZiIsInN0ZXBfc2l6ZSIsInpvb21fZmFjIiwicG93IiwiZW5hYmxlIiwiQkxFTkQiLCJibGVuZEZ1bmNTZXBhcmF0ZSIsIlNSQ19BTFBIQSIsIk9ORV9NSU5VU19TUkNfQUxQSEEiLCJPTkUiLCJQbG90Q29tcG9uZW50IiwibGV2ZWxzIiwiY29sb3JzIiwiZ2V0Q29sb3JzIiwicyIsImdldE9wYWNpdGllcyIsImRpdmVyZ2luZyIsImNvbG9yMSIsImNvbG9yMiIsImxldmVsX21pbiIsImxldmVsX21heCIsIm5fY29sb3JzIiwic3RvcHMiLCJsZXZlbF9zdGVwIiwiY3Jvc3NvdmVyIiwiY3Jvc3NvdmVyX2hzdiIsImNvbG9yMV9oc3YiLCJjb2xvcjJfaHN2IiwiaXN0b3AiLCJsZXZlbCIsImgiLCJpbnRlcnBfZmFjIiwicHVzaCIsImlsZXYiLCJDb2xvck1hcCIsInJlZGJsdWUiLCJibHVlcmVkIiwibWFrZUNvbG9yQmFyIiwiY29sb3JtYXAiLCJsYWJlbCIsInRpY2tzIiwib3JpZW50YXRpb24iLCJmb250ZmFjZSIsInRpY2tfZGlyIiwidGlja19kaXJlY3Rpb24iLCJiYXJfbGVmdCIsImJhcl90b3AiLCJiYXJfd2lkdGgiLCJiYXJfaGVpZ2h0IiwiY3JlYXRlRWxlbWVudCIsInRhZ25hbWUiLCJlbGVtIiwiY3JlYXRlRWxlbWVudE5TIiwiayIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiYmFyX2Nyb3NzX3NpemUiLCJiYXJfbG9uZ19zaXplIiwiZ3RpY2thdHRycyIsImdiYXIiLCJ0cmFuc2Zvcm0iLCJsYWJlbGF0dHJzIiwiZ3RpY2tzIiwiaWNvbG9yIiwib3BhY2l0eSIsImlsZXZlbCIsInRpY2thdHRycyIsImd0aWNrIiwieDIiLCJ5MiIsInN0cm9rZSIsImR5Iiwic3R5bGUiLCJ0ZXh0Q29udGVudCIsImNtYXAiLCJjbWFwX2ltYWdlIiwiY3R4IiwiZ2V0Q29udGV4dCIsInN0b3AiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsIm1ha2VUZXh0dXJlSW1hZ2UiLCJuX2xldiIsIm1hcF9ub3JtIiwiaSIsImlucHV0X25vcm0iLCJsZXYiLCJjbWFwX25vcm0iLCJpbnZfY21hcF9ub3JtIiwiamxldiIsImFscGhhIiwiaW5kZXhfbWFwIiwiY21hcF90ZXh0dXJlIiwiY21hcF9ub25saW5fdGV4dHVyZSIsIk5FQVJFU1QiLCJjbWFwX25vbmxpbl9pbWFnZSIsImJpbGxib2FyZF9lbGVtZW50cyIsImJpbGxib2FyZF9pbWFnZSIsImJpbGxib2FyZF9zaXplIiwiYmlsbGJvYXJkX2NvbG9yIiwiYmlsbGJvYXJkX3dpZHRoIiwiYmlsbGJvYXJkX2hlaWdodCIsInNpemUiLCJhc3BlY3QiLCJvZmZzZXRzIiwibWFwX3pvb20iLCJtYXBfYmVhcmluZyIsIm1hcF9waXRjaCIsIm1hcF93aWR0aCIsIm1hcF9oZWlnaHQiLCJCQVJCX0RJTVMiLCJCQVJCX1dJRFRIIiwiQkFSQl9IRUlHSFQiLCJCQVJCX1RFWF9XUkFQIiwiQkFSQl9URVhfV0lEVEgiLCJCQVJCX1RFWF9IRUlHSFQiLCJNQVhfQkFSQiIsIkJBUkJfVEVYVFVSRSIsImNhbnZhcyIsImRyYXdXaW5kQmFyYiIsInRpcHgiLCJ0aXB5IiwibWFnIiwiZWxlbV9mdWxsX3NpemUiLCJlbGVtX3NwYWNpbmciLCJiZWdpblBhdGgiLCJhcmMiLCJQSSIsImVsZW1fcG9zIiwibWFnX2NvdW50ZG93biIsInN0YWZmX2xlbmd0aCIsIm5fZmxhZ3MiLCJuX2Z1bGxfYmFyYnMiLCJtb3ZlVG8iLCJsaW5lVG8iLCJsYXN0X3dhc19mbGFnIiwiZmlyc3RfZWxlbSIsImxpbmVXaWR0aCIsIm1pdGVyTGltaXQiLCJpYmFyYiIsIl9jcmVhdGVCYXJiVGV4dHVyZSIsImZpZWxkcyIsImJhcmJfYmlsbGJvYXJkcyIsIm1ha2VCYXJiRWxlbWVudHMiLCJ1IiwiYmFyYl9lbGVtZW50cyIsImJhcmJfaW1hZ2UiLCJmb3JtYXQiLCJiYXJiX3dpZHRoIiwiQmlsbGJvYXJkQ29sbGVjdGlvbiIsImdldENhbnZhcyIsImJlYXJpbmciLCJnZXRCZWFyaW5nIiwicGl0Y2giLCJnZXRQaXRjaCIsInBvbHlsaW5lIiwidGV4X2ltYWdlIiwibGluZV93aWR0aCIsIm9mZnNldF9zY2FsZSIsInNjYWxlIiwib3JpZ2luIiwib2Zmc2V0IiwiZXh0cnVzaW9uIiwibWluX3pvb20iLCJsbmciLCJpc05hTiIsInRvTWVyY2F0b3JDb29yZCIsInRhbiIsIkhPRE9fQkdfRElNUyIsIkhPRE9fQkdfVEVYVFVSRSIsImlybmciLCJjdHJfeCIsImN0cl95IiwiX2NyZWF0ZUhvZG9CYWNrZ3JvdW5kVGV4dHVyZSIsIkhPRE9fQ09MT1JTIiwiSE9ET19IRUlHSFRfVEVYVFVSRSIsImNsYiIsImN1YiIsIl9jcmVhdGVIb2RvSGVpZ2h0VGV4dHVyZSIsInByb2ZpbGVzIiwiYmdjb2xvciIsImJnX2JpbGxib2FyZCIsImhvZG9fbGluZSIsInNtX2xpbmUiLCJob2RvX3NjYWxlIiwiYmdfc2l6ZSIsImJnX2VsZW1lbnRzIiwiX2dldEhvZG9CYWNrZ3JvdW5kRWxlbWVudHMiLCJiZ19pbWFnZSIsIm1ha2VQb2x5TGluZXMiLCJwcm9mIiwicHRfbGwiLCJMbmdMYXQiLCJtYXhfdGV4X3oiLCJpcHQiLCJ6IiwiaG9kb19wb2x5bGluZSIsImhlaWdodF9pbWFnZSIsIlBvbHlsaW5lQ29sbGVjdGlvbiIsInNtX21hZyIsImh5cG90Iiwic21fYW5nIiwiYXRhbjIiLCJzaW4iLCJjb3MiLCJzbV9wb2x5bGluZSIsImJ5dGVfY29sb3IiLCJzbV9pbWFnZSIsIlVpbnQ4QXJyYXkiLCJQbG90TGF5ZXIiLCJQbG90TGF5ZXJCYXNlIiwiZmllbGRfa2V5IiwidmFsdWVzIiwicmVzIiwiX3JlcGFpbnRJZk5lY2Vzc2FyeSIsInNldEFjdGl2ZUtleSIsIm9sZF9maWVsZF9rZXkiLCJnZXRLZXlzIiwia2V5cyIsImFkZEZpZWxkIiwidHJpZ2dlclJlcGFpbnQiLCJjb21wdXRlX3ZhbHVlIiwiY2FjaGVkX3ZhbHVlIiwiZ2V0VmFsdWUiLCJuaSIsIm5qIiwibGxfbG9uIiwibGxfbGF0IiwidXJfbG9uIiwidXJfbGF0IiwiX2xsX2NhY2hlIiwiQ2FjaGUiLCJkbG9uIiwiZGxhdCIsImxvbnMiLCJsYXRzIiwiaiIsIl9wYWRfY2FjaGUiLCJwYWRfd2lkdGgiLCJjZWlsIiwibG9nMiIsInBhZF9oZWlnaHQiLCJkYXRhX3BhZCIsImlyb3ciLCJhZ2dyZWdhdGVGaWVsZHMiLCJmdW5jIiwibWFwR2VuZXJhdG9yIiwiZ2VuIiwiemlwcGVkX2FyZ3MiLCJhIiwiYWdnX2RhdGEiLCJSYXdTY2FsYXJGaWVsZCJdLCJzb3VyY2VSb290IjoiIn0=
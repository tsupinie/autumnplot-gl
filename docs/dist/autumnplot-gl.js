!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.apgl=e():t.apgl=e()}(this,(()=>(()=>{var t={49:t=>{t.exports="varying highp vec2 v_tex_coord;\n\nuniform sampler2D u_sampler;\nuniform lowp vec3 u_billboard_color;\n\nvoid main() {\n    lowp vec4 tex_color = texture2D(u_sampler, v_tex_coord);\n    gl_FragColor = vec4(u_billboard_color, tex_color.a); //mix(vec4(1.0, 0.0, 0.0, 0.5), tex_color, tex_color.a);\n}"},955:t=>{t.exports="uniform mat4 u_matrix;\n\nattribute vec3 a_pos;    // Has position and zoom info\nattribute vec2 a_offset; // Has corner and orientation info\nattribute vec2 a_tex_coord;\nuniform lowp float u_billboard_size;\nuniform lowp float u_billboard_aspect;\nuniform lowp float u_map_aspect;\nuniform lowp float u_zoom;\nuniform highp float u_map_bearing;\n\nvarying highp vec2 v_tex_coord;\n\nmat4 scalingMatrix(float x_scale, float y_scale, float z_scale) {\n    return mat4(x_scale, 0.0,     0.0,     0.0,\n                0.0,     y_scale, 0.0,     0.0,\n                0.0,     0.0,     z_scale, 0.0,\n                0.0,     0.0,     0.0,     1.0);\n}\n\nmat4 rotationZMatrix(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat4( c,  s,  0., 0.,\n                -s,  c,  0., 0.,\n                    0., 0., 1., 0.,\n                    0., 0., 0., 1.);\n}\n\nmat4 rotationXMatrix(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat4( 1.,  0., 0., 0.,\n                    0.,  c,  s,  0.,\n                    0., -s,  c,  0.,\n                    0.,  0., 0., 1.);\n}\n\nvoid main() {\n    vec4 pivot_pos = u_matrix * vec4(a_pos.xy, 0.0, 1.0);\n    lowp float min_zoom = a_pos.z;\n\n    lowp float corner = a_offset.x;\n    lowp float ang = radians(180.0 - a_offset.y);\n\n    vec4 offset = vec4(0.0, 0.0, 0.0, 0.0);\n    \n    if (u_zoom >= min_zoom) {\n        if (corner < 0.5) {\n            offset = vec4(-u_billboard_size, u_billboard_size, 0., 0.);\n        }\n        else if (corner < 1.5) {\n            offset = vec4(u_billboard_size, u_billboard_size, 0., 0.);\n        }\n        else if (corner < 2.5) {\n            offset = vec4(-u_billboard_size, -u_billboard_size * (2. / u_billboard_aspect - 1.), 0., 0.);\n        }\n        else if (corner < 3.5) {\n            offset = vec4(u_billboard_size, -u_billboard_size * (2. / u_billboard_aspect - 1.), 0., 0.);\n        }\n\n        mat4 barb_rotation = rotationZMatrix(ang + radians(u_map_bearing));\n        mat4 map_stretch_matrix = scalingMatrix(1.0, 1. / u_map_aspect, 1.0);\n        offset = map_stretch_matrix * barb_rotation * offset;\n    }\n\n    gl_Position = pivot_pos + offset;\n    v_tex_coord = a_tex_coord;\n}"},884:t=>{t.exports="#extension GL_OES_standard_derivatives : enable\nvarying highp vec2 v_tex_coord;\nvarying highp float v_map_scale_fac;\n\nuniform sampler2D u_fill_sampler;\nuniform highp float u_contour_interval;\nuniform lowp float u_line_cutoff;\nuniform lowp vec3 u_color;\nuniform lowp vec2 u_step_size;\nuniform lowp float u_zoom_fac;\nuniform highp float u_grid_spacing;\n\nvoid main() {\n    highp float field_val = texture2D(u_fill_sampler, v_tex_coord).r;\n\n    // Find the gradient magnitude of the grid (the y component divides by 2 to cheat for high latitudes)\n    lowp vec2 ihat = vec2(u_step_size.x, 0.0);\n    lowp vec2 jhat = vec2(0.0, u_step_size.y);\n    highp float fv_xp1 = texture2D(u_fill_sampler, v_tex_coord + ihat).r;\n    highp float fv_xm1 = texture2D(u_fill_sampler, v_tex_coord - ihat).r;\n    highp float fv_yp1 = texture2D(u_fill_sampler, v_tex_coord + jhat).r;\n    highp float fv_ym1 = texture2D(u_fill_sampler, v_tex_coord - jhat).r;\n    highp float fwidth_field = sqrt((fv_xp1 - fv_xm1) * (fv_xp1 - fv_xm1) + (fv_yp1 - fv_ym1) * (fv_yp1 - fv_ym1) * v_map_scale_fac * v_map_scale_fac) \n                                / (2. * u_grid_spacing);\n\n    //gl_FragColor = vec4(fwidth_field, fwidth_field, fwidth_field, 1.0);\n\n    lowp float plot_val = fract(field_val / u_contour_interval);\n    if (plot_val > 0.5) plot_val = 1.0 - plot_val;\n    plot_val = plot_val / (max(0.001, fwidth_field / (u_zoom_fac * 0.125)));\n\n    if (plot_val > u_line_cutoff) discard;\n\n    gl_FragColor = vec4(u_color, 1. - (plot_val * plot_val / (u_line_cutoff * u_line_cutoff)));\n}"},192:t=>{t.exports="uniform mat4 u_matrix;\n\nattribute vec2 a_pos;\nattribute vec2 a_tex_coord;\nattribute float a_latitude;\n\nvarying highp vec2 v_tex_coord;\nvarying highp float v_map_scale_fac;\n\nvoid main() {\n    gl_Position = u_matrix * vec4(a_pos, 0.0, 1.0);\n    v_tex_coord = a_tex_coord;\n    v_map_scale_fac = cos(a_latitude * 3.141592654 / 180.);\n}"},824:t=>{t.exports="varying highp vec2 v_tex_coord;\n\nuniform sampler2D u_fill_sampler;\nuniform sampler2D u_cmap_sampler;\nuniform sampler2D u_cmap_nonlin_sampler;\nuniform highp float u_cmap_min;\nuniform highp float u_cmap_max;\nuniform highp float u_opacity;\nuniform int u_n_index;\n\nvoid main() {\n    lowp float index_buffer = 1. / (2. * float(u_n_index));\n    highp float fill_val = texture2D(u_fill_sampler, v_tex_coord).r;\n    lowp float normed_val = (fill_val - u_cmap_min) / (u_cmap_max - u_cmap_min);\n    \n    if (normed_val < 0.0 || normed_val > 1.0) {\n        discard;\n    }\n\n    normed_val = index_buffer + normed_val * (1. - 2. * index_buffer); // Chop off the half pixels on either end of the texture\n    highp float nonlin_val = texture2D(u_cmap_nonlin_sampler, vec2(normed_val, 0.5)).r;\n    lowp vec4 color = texture2D(u_cmap_sampler, vec2(nonlin_val, 0.5));\n    color.a = color.a * u_opacity;\n    gl_FragColor = color;\n}"},370:t=>{t.exports="uniform mat4 u_matrix;\n\nattribute vec2 a_pos;\nattribute vec2 a_tex_coord;\n\nvarying highp vec2 v_tex_coord;\n\nvoid main() {\n    gl_Position = u_matrix * vec4(a_pos, 0.0, 1.0);\n    v_tex_coord = a_tex_coord;\n}"},559:t=>{t.exports="varying highp vec2 v_tex_coord;\n\nuniform sampler2D u_sampler;\n\nvoid main() {\n    if (v_tex_coord.x > 1.0) {\n        discard;\n    }\n\n    lowp vec4 tex_color = texture2D(u_sampler, v_tex_coord);\n    gl_FragColor = tex_color;\n}"},319:t=>{t.exports="uniform mat4 u_matrix;\n\nattribute vec2 a_pos;\nattribute float a_min_zoom;\nattribute vec2 a_extrusion;\nattribute vec2 a_offset;\nattribute vec2 a_tex_coord;\nuniform lowp float u_offset_scale;\nuniform lowp float u_map_aspect;\nuniform lowp float u_zoom;\nuniform lowp float u_line_width;\nuniform highp float u_map_bearing;\n//uniform highp float u_map_pitch;\n\nvarying highp vec2 v_tex_coord;\n\nmat4 scalingMatrix(float x_scale, float y_scale, float z_scale) {\n    return mat4(x_scale, 0.0,     0.0,     0.0,\n                0.0,     y_scale, 0.0,     0.0,\n                0.0,     0.0,     z_scale, 0.0,\n                0.0,     0.0,     0.0,     1.0);\n}\n\nmat4 rotationZMatrix(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat4( c,  s,  0., 0.,\n                -s,  c,  0., 0.,\n                    0., 0., 1., 0.,\n                    0., 0., 0., 1.);\n}\n\nmat4 rotationXMatrix(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat4( 1.,  0., 0., 0.,\n                    0.,  c,  s,  0.,\n                    0., -s,  c,  0.,\n                    0.,  0., 0., 1.);\n}\n\nvoid main() {\n    vec4 center_pos = u_matrix * vec4(a_pos.xy, 0.0, 1.0);\n    vec4 offset = vec4(0.0, 0.0, 0.0, 0.0);\n    \n    if (u_zoom >= a_min_zoom) {\n        vec2 offset_2d = a_offset + u_line_width * a_extrusion;\n\n        mat4 rotation_matrix = rotationZMatrix(radians(u_map_bearing));\n        mat4 map_stretch_matrix = scalingMatrix(u_offset_scale, u_offset_scale / u_map_aspect, 1.);\n        offset = map_stretch_matrix * rotation_matrix * vec4(offset_2d, 0., 0.);\n    }\n\n    gl_Position = center_pos + offset;\n    v_tex_coord = a_tex_coord;\n}"}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={exports:{}};return t[r](a,a.exports,n),a.exports}n.m=t,n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.u=t=>t+".autumnplot-gl.js",n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href;var r={};return(()=>{"use strict";n.r(r),n.d(r,{Barbs:()=>ht,ColorMap:()=>$,Contour:()=>G,ContourFill:()=>at,Hodographs:()=>At,MultiPlotLayer:()=>Ot,PlateCarreeGrid:()=>kt,PlotComponent:()=>g,PlotLayer:()=>Pt,RawScalarField:()=>Bt,colormaps:()=>jt,makeColorBar:()=>et});const t=Symbol("Comlink.proxy"),e=Symbol("Comlink.endpoint"),o=Symbol("Comlink.releaseProxy"),a=Symbol("Comlink.thrown"),i=t=>"object"==typeof t&&null!==t||"function"==typeof t,l=new Map([["proxy",{canHandle:e=>i(e)&&e[t],serialize(t){const{port1:e,port2:n}=new MessageChannel;return c(t,e),[n,[n]]},deserialize:t=>(t.start(),f(t))}],["throw",{canHandle:t=>i(t)&&a in t,serialize({value:t}){let e;return e=t instanceof Error?{isError:!0,value:{message:t.message,name:t.name,stack:t.stack}}:{isError:!1,value:t},[e,[]]},deserialize(t){if(t.isError)throw Object.assign(new Error(t.value.message),t.value);throw t.value}}]]);function c(e,n=self){n.addEventListener("message",(function r(o){if(!o||!o.data)return;const{id:i,type:l,path:f}=Object.assign({path:[]},o.data),s=(o.data.argumentList||[]).map(m);let d;try{const n=f.slice(0,-1).reduce(((t,e)=>t[e]),e),r=f.reduce(((t,e)=>t[e]),e);switch(l){case"GET":d=r;break;case"SET":n[f.slice(-1)[0]]=m(o.data.value),d=!0;break;case"APPLY":d=r.apply(n,s);break;case"CONSTRUCT":d=function(e){return Object.assign(e,{[t]:!0})}(new r(...s));break;case"ENDPOINT":{const{port1:t,port2:n}=new MessageChannel;c(e,n),d=function(t,e){return p.set(t,e),t}(t,[t])}break;case"RELEASE":d=void 0;break;default:return}}catch(t){d={value:t,[a]:0}}Promise.resolve(d).catch((t=>({value:t,[a]:0}))).then((t=>{const[e,o]=_(t);n.postMessage(Object.assign(Object.assign({},e),{id:i}),o),"RELEASE"===l&&(n.removeEventListener("message",r),u(n))}))})),n.start&&n.start()}function u(t){(function(t){return"MessagePort"===t.constructor.name})(t)&&t.close()}function f(t,e){return d(t,[],e)}function s(t){if(t)throw new Error("Proxy has been released and is not useable")}function d(t,n=[],r=function(){}){let a=!1;const i=new Proxy(r,{get(e,r){if(s(a),r===o)return()=>b(t,{type:"RELEASE",path:n.map((t=>t.toString()))}).then((()=>{u(t),a=!0}));if("then"===r){if(0===n.length)return{then:()=>i};const e=b(t,{type:"GET",path:n.map((t=>t.toString()))}).then(m);return e.then.bind(e)}return d(t,[...n,r])},set(e,r,o){s(a);const[i,l]=_(o);return b(t,{type:"SET",path:[...n,r].map((t=>t.toString())),value:i},l).then(m)},apply(r,o,i){s(a);const l=n[n.length-1];if(l===e)return b(t,{type:"ENDPOINT"}).then(m);if("bind"===l)return d(t,n.slice(0,-1));const[c,u]=h(i);return b(t,{type:"APPLY",path:n.map((t=>t.toString())),argumentList:c},u).then(m)},construct(e,r){s(a);const[o,i]=h(r);return b(t,{type:"CONSTRUCT",path:n.map((t=>t.toString())),argumentList:o},i).then(m)}});return i}function h(t){const e=t.map(_);return[e.map((t=>t[0])),(n=e.map((t=>t[1])),Array.prototype.concat.apply([],n))];var n}const p=new WeakMap;function _(t){for(const[e,n]of l)if(n.canHandle(t)){const[r,o]=n.serialize(t);return[{type:"HANDLER",name:e,value:r},o]}return[{type:"RAW",value:t},p.get(t)||[]]}function m(t){switch(t.type){case"HANDLER":return l.get(t.name).deserialize(t.value);case"RAW":return t.value}}function b(t,e,n){return new Promise((r=>{const o=new Array(4).fill(0).map((()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16))).join("-");t.addEventListener("message",(function e(n){n.data&&n.data.id&&n.data.id===o&&(t.removeEventListener("message",e),r(n.data))})),t.start&&t.start(),t.postMessage(Object.assign({id:o},e),n)}))}var v=f(new Worker(new URL(n.p+n.u(110),n.b))),g=function(){},y=function(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(c){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){i.label=l[1];break}if(6===l[0]&&i.label<o[1]){i.label=o[1],o=l;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(l);break}o[2]&&i.ops.pop(),i.trys.pop();continue}l=e.call(t,i)}catch(t){l=[6,t],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,c])}}},x=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i},w=function(t,e){e=void 0===e?"float":e;var n=t.match(/#([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?/i);if(null===n)throw"Got '".concat(t,"' in hex2rgba, which does not look like a hex color");var r=n.slice(1).filter((function(t){return void 0!==t})).map((function(t){return parseInt(t,16)}));return"float"==e&&(r=r.map((function(t){return t/255}))),void 0===r[3]?[r[0],r[1],r[2],1]:[r[0],r[1],r[2],r[3]]},E=function(t,e){var n=x(w(t,e),4),r=n[0],o=n[1],a=n[2];return n[3],[r,o,a]},T=function(t,e){var n=x(t,3);return function(t,e){var n=t;return"float"==(e=void 0===e?"float":e)&&(n=n.map((function(t){return Math.round(255*t)}))),"#"+n.map((function(t){return t.toString(16).padStart(2,"0").toUpperCase()})).join("")}([n[0],n[1],n[2],0],e).slice(0,-2)},A=function(t){var e,n=x(t,3),r=n[0],o=n[1],a=n[2],i=Math.max(r,o,a),l=i-Math.min(r,o,a);return 0==l?e=0:i==r?e=(o-a)/l*60%6:i==o?e=60*((a-r)/l+2):i==a&&(e=60*((r-o)/l+4)),[e,0==i?0:l/i,i]},S=function(t){var e,n,r,o=x(t,3),a=o[0],i=o[1],l=o[2],c=l*i,u=c*(1-Math.abs(a/60%2-1)),f=l-c;return 0<=a&&a<60?(e=c,n=u,r=0):60<=a&&a<120?(e=u,n=c,r=0):120<=a&&a<180?(e=0,n=c,r=u):180<=a&&a<240?(e=0,n=u,r=c):240<=a&&a<300?(e=u,n=0,r=c):300<=a&&a<360&&(e=c,n=0,r=u),[e+f,n+f,r+f]};function R(t,e,n){for(var r=1,o=n;t%o!=0||e%o!=0;)r+=1,o/=2;return r}function P(){var t,e,n,r=[];for(t=0;t<arguments.length;t++)r[t]=arguments[t];return y(this,(function(t){switch(t.label){case 0:e=r.map((function(t){return t[Symbol.iterator]()})),t.label=1;case 1:return(n=e.map((function(t){return t.next()}))).some((function(t){return t.done}))?[3,3]:[4,n.map((function(t){return t.value}))];case 2:return t.sent(),[3,1];case 3:return[2]}}))}var O,M=function(){function t(t,e,n,r){var o={Float32Array:t.FLOAT,Uint8Array:t.UNSIGNED_BYTE};this.gl=t,this.n_coords_per_vert=n,this.dtype=o[e.constructor.name],this.n_verts=e.length/n,this.draw_mode=r;var a=t.createBuffer();if(null===a)throw"Could not create WebGL buffer";this.buffer=a,t.bindBuffer(t.ARRAY_BUFFER,this.buffer),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)}return t.prototype.bindToProgram=function(t){this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.buffer),this.gl.enableVertexAttribArray(t),this.gl.vertexAttribPointer(t,this.n_coords_per_vert,this.dtype,!1,0,0)},t}(),I=function(){function t(t,e){this.gl=t;var n=t.createTexture();if(null===n)throw"Could not create WebGL texture";this.texture=n,this.tex_num=null,this.setImageData(e);var r=void 0===e.mag_filter?t.LINEAR:e.mag_filter;t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,r)}return t.prototype.setImageData=function(t){var e=this.gl;e.bindTexture(e.TEXTURE_2D,this.texture),void 0!==t.width&&void 0!==t.height?e.texImage2D(e.TEXTURE_2D,0,t.format,t.width,t.height,0,t.format,t.type,t.image):e.texImage2D(e.TEXTURE_2D,0,t.format,t.format,t.type,t.image)},t.prototype.bindToProgram=function(t,e){this.activate(e),this.gl.uniform1i(t,e)},t.prototype.activate=function(t){this.tex_num=t,this.gl.activeTexture(this.gl.TEXTURE0+this.tex_num),this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture)},t.prototype.deactivate=function(){null!==this.tex_num&&(this.gl.activeTexture(this.gl.TEXTURE0+this.tex_num),this.gl.bindTexture(this.gl.TEXTURE_2D,null),this.tex_num=null)},t.prototype.delete=function(){this.gl.deleteTexture(this.texture),this.tex_num=null},t}(),N=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},C=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i},L=function(){function t(t,e,n){var r,o,a,i,l,c;this.gl=t,this.prog=function(t,e,n){var r=t.createShader(t.VERTEX_SHADER);if(null===r)throw"Could not create vertex shader";if(t.shaderSource(r,e),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS)){var o=t.getShaderInfoLog(r);console.log("Vertex shader compiler log: "+o)}var a=t.createShader(t.FRAGMENT_SHADER);if(null===a)throw"Could not create fragment shader";t.shaderSource(a,n),t.compileShader(a),t.getShaderParameter(a,t.COMPILE_STATUS)||(o=t.getShaderInfoLog(a),console.log("Fragment shader compiler log: "+o));var i=t.createProgram();if(null===i)throw"Could not create shader program";if(t.attachShader(i,r),t.attachShader(i,a),t.linkProgram(i),!t.getProgramParameter(i,t.LINK_STATUS)){var l=t.getProgramInfoLog(i);console.log("Linker log: "+l)}return i}(t,e,n),this.attributes={},this.uniforms={},this.n_verts=null,this.draw_mode=null;var u=function(t){var e=t.indexOf("//");return e>=0&&(t=t.slice(0,e)),t};e=e.split("\n").map(u).join("\n"),n=n.split("\n").map(u).join("\n");try{for(var f=N(e.matchAll(/attribute +([\w ]+?) +([\w_]+);[\s]*$/gm)),s=f.next();!s.done;s=f.next()){var d=s.value,h=C(d,3),p=(h[0],h[1]),_=h[2];this.attributes[_]={type:p,location:t.getAttribLocation(this.prog,_)}}}catch(t){r={error:t}}finally{try{s&&!s.done&&(o=f.return)&&o.call(f)}finally{if(r)throw r.error}}try{for(var m=N(e.matchAll(/uniform +([\w ]+?) +([\w_]+);[\s]*$/gm)),b=m.next();!b.done;b=m.next()){d=b.value;var v=C(d,3),g=(v[0],p=v[1],v[2]),y=p.split(" ");if(null===(E=t.getUniformLocation(this.prog,g)))throw"Could not get vertex shader uniform location for '".concat(g,"'");this.uniforms[g]={type:y[y.length-1],location:E}}}catch(t){a={error:t}}finally{try{b&&!b.done&&(i=m.return)&&i.call(m)}finally{if(a)throw a.error}}try{for(var x=N(n.matchAll(/uniform +([\w ]+?) +([\w_]+);[\s]*$/gm)),w=x.next();!w.done;w=x.next()){d=w.value;var E,T=C(d,3);if(T[0],p=T[1],g=T[2],y=p.split(" "),null===(E=t.getUniformLocation(this.prog,g)))throw"Could not get fragment shader uniform location for '".concat(g,"'");this.uniforms[g]={type:y[y.length-1],location:E}}}catch(t){l={error:t}}finally{try{w&&!w.done&&(c=x.return)&&c.call(x)}finally{if(l)throw l.error}}}return t.prototype.use=function(t,e,n){this.gl.useProgram(this.prog),this.draw_mode=null,this.n_verts=null,void 0!==t&&this.bindAttributes(t),void 0!==e&&this.setUniforms(e),void 0!==n&&this.bindTextures(n)},t.prototype.bindAttributes=function(t){var e=this;Object.entries(t).forEach((function(t){var n=C(t,2),r=n[0],o=n[1];if(void 0!==e.attributes[r]){if(e.n_verts=null===e.n_verts?o.n_verts:e.n_verts,e.draw_mode=null===e.draw_mode?o.draw_mode:e.draw_mode,e.draw_mode!=o.draw_mode||e.n_verts!=o.n_verts)throw"Unexpected draw mode or number of vertices.";var a=e.attributes[r],i=(a.type,a.location);o.bindToProgram(i)}else console.warn("Skipping attribute buffer provided for '".concat(r,"' because the attribute was not found in the program."))}))},t.prototype.setUniforms=function(t){var e=this;Object.entries(t).forEach((function(t){var n=C(t,2),r=n[0],o=n[1];if(void 0!==e.uniforms[r]){var a=e.uniforms[r],i=a.type,l=a.location;if("int"===i&&"number"==typeof o)e.gl.uniform1i(l,o);else if("float"===i&&"number"==typeof o)e.gl.uniform1f(l,o);else if("vec2"===i&&o instanceof Array)e.gl.uniform2fv(l,o);else if("vec3"===i&&o instanceof Array)e.gl.uniform3fv(l,o);else if("vec4"===i&&o instanceof Array)e.gl.uniform4fv(l,o);else{if(!("mat4"===i&&o instanceof Array))throw"Could not figure out uniform function for type '".concat(i,"' and value '").concat(String(o),"'");e.gl.uniformMatrix4fv(l,!1,o)}}else console.warn("Skipping uniform value provided for '".concat(r,"' because the uniform was not found in the program."))}))},t.prototype.bindTextures=function(t){var e=this;Object.entries(t).forEach((function(t,n){var r=C(t,2),o=r[0],a=r[1];if(void 0!==e.uniforms[o]){var i=e.uniforms[o],l=(i.type,i.location);a.bindToProgram(l,n)}else console.warn("Skipping texture provided for sampler '".concat(o,"' because the sampler was not found in the program."))}))},t.prototype.draw=function(){if(null===this.draw_mode||null===this.n_verts)throw"Cannot draw without binding attribute buffers";this.gl.drawArrays(this.draw_mode,0,this.n_verts)},t}(),k=(O=function(t,e){return O=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},O(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}O(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),B=function(){function t(t,e){this.gl=t,this.framebuffer=e}return t.prototype.clear=function(t){var e=this.gl;if(null===e)throw"Register WebGL drawing context using registerGLContext() first";e.clearColor.apply(e,function(t,e,n){if(n||2===arguments.length)for(var r,o=0,a=e.length;o<a;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))}([],function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}(t),!1)),e.bindFramebuffer(e.FRAMEBUFFER,this.framebuffer),e.clear(e.COLOR_BUFFER_BIT)},t.prototype.renderTo=function(t,e,n,r){var o=this.gl;if(null===o)throw"Register WebGL drawing context using registerGLContext() first";o.bindFramebuffer(o.FRAMEBUFFER,this.framebuffer),o.viewport(t,e,n,r)},t.prototype.copyToTexture=function(t,e,n,r,o){var a=this.gl;if(null===a)throw"Register WebGL drawing context using registerGLContext() first";a.bindFramebuffer(a.FRAMEBUFFER,this.framebuffer),t.activate(0),a.copyTexImage2D(a.TEXTURE_2D,0,a.RGBA,e,n,r,o,0)},t}(),j=function(t){function e(){return t.call(this,null,null)||this}return k(e,t),e.prototype.registerGLContext=function(t){this.gl=t},e}(B),D=(function(t){function e(e,n){var r=this,o=e.createFramebuffer();if(null===o)throw"Could not create WebGL Framebuffer";return(r=t.call(this,e,o)||this).texture=n,e.bindFramebuffer(e.FRAMEBUFFER,r.framebuffer),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n.texture,0),r}k(e,t),e.screen=new j}(B),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),F=n(192),U=n(884);const G=function(t){function e(e,n){var r=t.call(this)||this;r.field=e,r.interval=n.interval||1;var o=w(n.color||"#000000");return r.color=[o[0],o[1],o[2]],r.thinner=n.thinner||function(){return 1},r.map=null,r.program=null,r.vertices=null,r.latitudes=null,r.fill_texture=null,r.texcoords=null,r.grid_spacing=null,r.tex_width=null,r.tex_height=null,r}return D(e,t),e.prototype.onAdd=function(t,e){return n=this,r=void 0,a=function(){var n,r,o,a,i,l,c,u,f,s;return function(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(c){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){i.label=l[1];break}if(6===l[0]&&i.label<o[1]){i.label=o[1],o=l;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(l);break}o[2]&&i.ops.pop(),i.trys.pop();continue}l=e.call(t,i)}catch(t){l=[6,t],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,c])}}}(this,(function(d){switch(d.label){case 0:return this.map=t,e.getExtension("OES_texture_float"),e.getExtension("OES_texture_float_linear"),e.getExtension("OES_standard_derivatives"),this.program=new L(e,F,U),n=this.field.grid.getCoords(),r=n.lats,o=n.lons,a=this.field.getPaddedData(),i=a.width,l=a.height,c=a.data,[4,v.makeDomainVerticesAndTexCoords(r,o,i,l)];case 1:return u=d.sent(),f=new Float32Array(function(t,e,n){if(n||2===arguments.length)for(var r,o=0,a=e.length;o<a;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))}([],function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}(r),!1).map((function(t){return[t,t]})).flat()),this.grid_spacing=Math.abs(f[2]-f[0]),this.vertices=new M(e,u.vertices,2,e.TRIANGLE_STRIP),this.latitudes=new M(e,f,1,e.TRIANGLE_STRIP),this.tex_width=i,this.tex_height=l,s={format:e.LUMINANCE,type:e.FLOAT,width:i,height:l,image:c,mag_filter:e.LINEAR},this.fill_texture=new I(e,s),this.texcoords=new M(e,u.tex_coords,2,e.TRIANGLE_STRIP),[2]}}))},new((o=void 0)||(o=Promise))((function(t,e){function i(t){try{c(a.next(t))}catch(t){e(t)}}function l(t){try{c(a.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(t){t(n)}))).then(i,l)}c((a=a.apply(n,r||[])).next())}));var n,r,o,a},e.prototype.render=function(t,e){if(null!==this.map&&null!==this.program&&null!==this.vertices&&null!==this.latitudes&&null!==this.fill_texture&&null!==this.texcoords&&null!==this.grid_spacing&&null!==this.tex_width&&null!==this.tex_height){var n=this.map.getZoom(),r=this.thinner(n)*this.interval,o=.5/r,a=[.25/this.tex_width,.25/this.tex_height],i=Math.pow(2,n);this.program.use({a_pos:this.vertices,a_latitude:this.latitudes,a_tex_coord:this.texcoords},{u_contour_interval:r,u_line_cutoff:o,u_color:this.color,u_step_size:a,u_zoom_fac:i,u_grid_spacing:this.grid_spacing,u_matrix:e},{u_fill_sampler:this.fill_texture}),t.enable(t.BLEND),t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA),this.program.draw()}},e}(g),z=JSON.parse('{"g":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140],"O":["#e6f4ff","#dbf0fe","#d1ebfe","#c6e7fd","#bce3fd","#b1dffc","#a7dbfc","#9cd6fb","#92d2fb","#87cefa","#84c2f6","#81b7f1","#7eabed","#7ba0e8","#7994e4","#7688df","#737ddb","#7071d6","#6d66d2","#6a5acd","#7660cf","#8366d0","#8f6cd2","#9c72d3","#a878d5","#b47ed6","#c184d8","#cd8ad9","#da90db","#e696dc","#e390d9","#e08ad6","#dd84d3","#da7ed0","#d778cd","#d472ca","#d16cc7","#ce66c4","#cb60c1","#c85abe","#c453ba","#c04cb6","#bc45b2","#b83eae","#b437aa","#b030a6","#ac29a2","#a8229e","#a41b9a","#a01496","#a41080","#a80e75","#ac0e75","#b00c6a","#b4085f","#b80649","#bc043e","#c00233","#c80028","#c80028","#ca042a","#cc082c","#d00c2c","#d21432","#d41834","#d41834","#d61c36","#da243a","#dc283c","#de2c3e","#e03040","#e23442","#e43844","#e63c46","#e84048","#ea444a","#ec484c","#ee4c4e","#f05050","#f16052","#f27054","#f38056","#f49058","#f5a05a","#f6b05c","#f7c05e","#f8d060","#f9e062","#faf064","#f7eb61","#f4e65e","#f1e15b","#eedc58","#ebd755","#e8d252","#e5cd4f","#e2c84c","#dfc349","#dcbe46","#d9b943","#d6b440","#d3af3d","#d0aa3a","#cda537","#caa034","#c79b31","#c4962e","#c1912b","#be8c28","#bb8725","#b88222","#b57d1f","#b2781c","#af7319","#ac6e16","#a96913","#a66410","#a35f0d","#a05a0a","#a05a0a"]}'),H=JSON.parse('{"g":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"O":["#f0f8ff","#dbf0fe","#c6e7fd","#b1dffc","#9cd6fb","#87cefa","#81b7f1","#7ba0e8","#7688df","#7071d6","#6a5acd","#8366d0","#9c72d3","#b47ed6","#cd8ad9","#e696dc","#e08ad6","#da7ed0","#d472ca","#ce66c4","#c85abe","#c04cb6","#b83eae","#b030a6","#a8229e","#a01496","#a81080","#b00c6a","#b8043e","#c80028","#c80028","#d01030","#d41834","#d82038","#dc283c","#e03040","#e43844","#e84048","#ec484c","#f05050","#f27054","#f49058","#f6b05c","#f8d060","#faf064","#f4e65e","#eedc58","#e8d252","#e2c84c","#dcbe46","#d6b440","#d0aa3a","#caa034","#c4962e","#be8c28","#b88222","#b2781c","#ac6e16","#a66410","#a05a0a"]}'),X=JSON.parse('{"g":[0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4500,4600,4700,4800,4900,5000,5100,5200,5300,5400,5500,5600,5700,5800,5900,6000,6500,7000,7500,8000,8500,9000,9500,10000],"O":["#ffffff","#f0f0f0","#e1e1e1","#d2d2d2","#c3c3c3","#a5a5a5","#969696","#878787","#787878","#696969","#37536a","#436075","#506d80","#5c7a8b","#698796","#7594a2","#82a1ad","#8eaeb8","#9bbbc3","#a7c8ce","#e9dd96","#e8d186","#e7c575","#e6b865","#e5ac54","#e5a044","#e49433","#e38723","#e27b12","#e16f02","#dc4110","#d33b17","#ca351e","#c12e25","#b8282c","#af2234","#a61c3b","#9d1542","#940f49","#8b0950","#73088a","#7e1894","#8a289f","#9538a9","#a148b3","#ac59be","#b869c8","#c379d2","#cf89dd","#da99e7","#e9bec3","#e3b0b7","#dda3ac","#d795a0","#d18894","#ca7a89","#c46d7d","#be5f71","#b85266","#b2445a","#893d48","#8f4752","#96525b","#9c5c65","#a2676f","#a97178","#af7c82","#b6868b"]}'),W=JSON.parse('{"g":[-60,-59,-58,-57,-56,-55,-54,-53,-52,-51,-50,-49,-48,-47,-46,-45,-44,-43,-42,-41,-40,-39,-38,-37,-36,-35,-34,-33,-32,-31,-30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120],"O":["#235877","#2a5f7c","#316782","#396e87","#40768c","#477d91","#4e8497","#558c9c","#5d93a1","#649ba6","#6ba2ac","#72a9b1","#79b1b6","#81b8bb","#88c0c1","#8fc7c6","#96cecb","#9dd6d0","#a5ddd6","#ace5db","#b3ece0","#b3ece0","#b1e7df","#b0e1dd","#aedcdc","#add7da","#abd2d9","#aaccd8","#a8c7d6","#a7c2d5","#a5bcd4","#a4b7d2","#a2b2d1","#9fa7ce","#9ea2cd","#9c9dcb","#9c9dcb","#9b97ca","#9992c8","#988dc7","#9688c6","#9582c4","#9278c2","#9073c0","#8f6dbf","#8d68bd","#8c63bc","#8a5dbb","#8958b9","#8753b8","#864eb6","#8448b5","#8343b4","#813eb2","#8038b1","#7e33b0","#7d33ae","#7b29ad","#7a23ab","#781eaa","#a037af","#a443b3","#a74fb7","#ab5cbb","#af68bf","#b374c3","#b680c7","#ba8dcc","#be99d0","#c1a5d4","#c5b1d8","#c9bddc","#cdcae0","#d0d6e4","#d4e2e8","#deecf2","#d1e2ee","#c5d9ea","#b8cfe6","#acc5e3","#9fbbdf","#92b2db","#86a8d7","#799ed3","#6c94cf","#608bcb","#5381c7","#4777c4","#3a6dc0","#2d64bc","#215ab8","#1450b4","#0f4455","#1c4e5a","#2a585f","#376363","#456d68","#52776d","#5f8172","#6d8c77","#7a967c","#88a080","#95aa85","#a3b58a","#b0bf8f","#bdc994","#cbd399","#d8de9d","#e6e8a2","#f3f2a7","#f8eea2","#f0e199","#e8d591","#e1c888","#d9bc80","#d1af77","#c9a36f","#c19666","#ba8a5e","#b27d55","#aa714d","#a26444","#9b583c","#8b3f2b","#833222","#7b261a","#7b261a","#741911","#6c0d09","#640000","#5f0000","#630507","#670a0e","#6c0f15","#70141c","#741824","#781d2b","#7d2232","#812739","#852c40","#73372d","#7a4036","#80493f","#875349","#8e5c52","#94655b","#9b6e64","#a88177","#af8a80","#b69389","#bd9c92","#c3a69c","#caafa5","#d1b8ae","#d7c1b7","#decac0","#e5d4ca","#ebddd3","#f2e6dc","#e8dfd6","#e0d7cf","#d8d0c8","#d0c8c0","#c8c0b9","#c0b9b2","#b7b1ab","#afa9a4","#a7a29c","#9f9a95","#97938e","#8f8b87","#878380","#7f7c78","#777471","#6f6c6a","#666563","#5e5d5c","#565554","#4e4e4d","#464646"]}'),Y=JSON.parse('{"g":[-40,-39,-38,-37,-36,-35,-34,-33,-32,-31,-30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"O":["#986d4d","#966c4c","#946b4c","#926a4b","#90694b","#8e684a","#8c664a","#8a6549","#886448","#866348","#846247","#826147","#806046","#7e5f46","#7c5e45","#7a5d44","#785b44","#765a43","#745943","#725842","#715742","#6f5641","#6d5540","#6b5440","#69533f","#67523f","#65503e","#634f3d","#614e3d","#5f4d3c","#5d4c3c","#5b4b3b","#594a3b","#57493a","#554839","#534739","#514538","#4f4438","#4d4337","#4b4237","#494136","#4d4334","#514738","#564c3c","#5a5041","#5e5545","#625949","#675e4d","#6b6251","#6f6755","#746b5a","#78705e","#7c7462","#807966","#857d6a","#89826f","#8d8673","#928b77","#968f7b","#9a947f","#9e9883","#a39d88","#a7a18c","#aba690","#afaa94","#b8b39c","#b8b39c","#bcb8a1","#c1bca5","#c9c5ad","#c9cab1","#d2ceb6","#d2ceb6","#d6d3ba","#dfdcc2","#e3e0c6","#e7e5ca","#ebe9cf","#f0eed3","#f4f2d7","#e6f5e6","#d7f0d7","#c8eac8","#b9e5b9","#aadfaa","#9bda9b","#8cd48c","#7dcf7d","#6ec96e","#5fc45f","#30ae30","#2ca32c","#279927","#238e23","#1e831e","#1a791a","#156e15","#116311","#0c590c","#084e08","#61a3af","#5896a0","#508992","#477b83","#3e6e74","#366166","#2d5457","#244648","#1c393a","#132c2b","#66669a","#605e94","#59568e","#534e88","#4d4682","#463e7c","#403676","#3a2e70","#33266a","#2d1e64","#724071","#784573","#7d4b75","#835076","#885678","#8e5b7a","#93617c","#99667d","#9e6c7f","#a47181"]}');var V=function(){return V=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},V.apply(this,arguments)},Z=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i},$=function(){function t(t,e){if(t.length!=e.length+1)throw"Mismatch between number of levels (".concat(t.length,") and number of colors (").concat(e.length,"; expected ").concat(t.length-1,")");this.levels=t,this.colors=e.map((function(t){return"object"==typeof(e=t)&&"color"in e&&"opacity"in e?t:{color:t,opacity:1};var e}))}return t.prototype.getColors=function(){return this.colors.map((function(t){return t.color}))},t.prototype.getOpacities=function(){return this.colors.map((function(t){return t.opacity}))},t.prototype.withOpacity=function(e){var n=this,r=this.colors.map((function(t,r){return{color:t.color,opacity:e(n.levels[r],n.levels[r+1])}}));return new t(this.levels,r)},t.diverging=function(e,n,r,o,a){for(var i,l,c=[],u=[],f=(o-r)/(a-1),s=(o+r)/2,d=[0,0,.9],h=A(E(e)),p=A(E(n)),_=0;_<a;_++){var m=r+_*f,b=void 0,v=void 0,g=void 0,y=void 0;m<s?(y=(s-m)/(s-r),b=(i=Z([h[0],d[1]+(h[1]-d[1])*y,d[2]+(h[2]-d[2])*y],3))[0],v=i[1],g=i[2]):m>=s&&(y=(m-s)/(o-s),b=(l=Z([p[0],d[1]+(p[1]-d[1])*y,d[2]+(p[2]-d[2])*y],3))[0],v=l[1],g=l[2]);var x=T(S([b,v,g]));c.push({color:x,opacity:Math.min(2*y,1)})}for(var w=0;w<=a;w++){var R=(o-r)/a;u.push(r+w*R)}return new t(u,c)},t}(),J=new $(z.g,z.O).withOpacity((function(t,e){return Math.min((e-20)/10,1)})),K=new $(H.g,H.O).withOpacity((function(t,e){return Math.min((e-20)/10,1)})),q=new $(X.g,X.O).withOpacity((function(t,e){return Math.min(e/1e3,1)})),Q=new $(W.g,W.O),tt=new $(Y.g,Y.O);function et(t,e){var n=e.label||"",r=e.ticks||t.levels,o=e.orientation||"vertical",a=e.fontface||"sans-serif",i=e.tick_direction||("vertical"==o?"left":"bottom");if("vertical"==o&&("top"==i||"bottom"==i)||"horizontal"==o&&("left"==i||"right"==i))throw"tick_direction of '".concat(i," doesn't match an orientation of ").concat(o);var l,c,u,f,s,d,h=function(t,e,n){var r=document.createElementNS("http://www.w3.org/2000/svg",t);return void 0!==e&&Object.entries(e).forEach((function(t){var e=Z(t,2),n=e[0],o=e[1];r.setAttribute(n,o.toString())})),void 0!==n&&n.appendChild(r),r},p=function(t){return Math.floor(Math.log10(Math.abs(t)))+(t<0?2:1)},_=p(r[0]),m=p(r[r.length-1]),b=600,v=b/9,g="horizontal"==o?4.5*Math.max(_,m):5;"vertical"==o?(l=b,c=v,u="left"==i?53.66666666666667:3,f=g,s=10,d=b-2*g):(c=b,l=v-6,u=g,f="bottom"==i?3:47.66666666666667,d=10,s=b-2*g);var y,x=t.colors.length,w=h("svg",{width:c,height:l}),E=h("g",{},w);y="vertical"==o?"left"==i?{"text-anchor":"end",transform:"translate(".concat(u,", ").concat(f,")")}:{transform:"translate(".concat(u+s,", ").concat(f,")")}:"bottom"==i?{"text-anchor":"middle",transform:"translate(".concat(u,", ").concat(f+d,")")}:{"text-anchor":"middle",transform:"translate(".concat(u,", ").concat(f,")")};var T,A=h("g",y,w);return t.colors.forEach((function(t,e){h("rect",V(V({},"vertical"==o?{x:u,y:f+d*(1-(e+1)/x),width:s,height:d/x}:{x:u+s*e/x,y:f,width:s/x,height:d}),{fill:t.color,opacity:t.opacity}),E)})),r.forEach((function(e){var n=t.levels.indexOf(e),r="vertical"==o?{transform:"translate(0, ".concat(d*(1-n/x),")")}:{transform:"translate(".concat(s*n/x,", 0)")},l=h("g",r,A);h("line",V(V({},"vertical"==o?"left"==i?{x2:-6}:{x2:6}:"bottom"==i?{y2:6}:{y2:-6}),{stroke:"#000000","stroke-width":1.5}),l),h("text",V(V({},"vertical"==o?"left"==i?{x:-9,dy:"0.32em"}:{x:9,dy:"0.32em"}:"bottom"==i?{y:9,dy:"0.8em"}:{y:-9,dy:"0em"}),{fill:"#000000",style:"font-family: ".concat(a,";")}),l).textContent=e.toString()})),h("rect",{x:u,y:f,width:s,height:d,stroke:"#000000","stroke-width":1.5,fill:"none"},w),T="vertical"==o?"left"==i?{transform:"translate(15, ".concat(l/2,") rotate(-90)")}:{transform:"translate(".concat(c-6,", ").concat(l/2,") rotate(-90)")}:"bottom"==i?{transform:"translate(".concat(c/2,", ").concat(l-5,")")}:{transform:"translate(".concat(c/2,", 15)")},h("text",V(V({},T),{fill:"#000000","text-anchor":"middle",style:"font-family: ".concat(a,";")}),w).textContent=n,w}var nt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),rt=n(370),ot=n(824);const at=function(t){function e(e,n){var r=t.call(this)||this;r.field=e,r.cmap=n.cmap,r.opacity=n.opacity||1,r.cmap_image=function(t){var e=document.createElement("canvas");e.width=t.colors.length,e.height=1;var n=e.getContext("2d");return t.colors.forEach((function(t,e){if(null===n)throw"Could not get rendering context for colormap image canvas";n.fillStyle=t.color+Math.round(255*t.opacity).toString(16),n.fillRect(e,0,1,1)})),e}(r.cmap);for(var o=r.cmap.levels,a=o.length-1,i=[],l=0;l<101;l++)i.push(l/100);var c=o.map((function(t,e){return e/a})),u=o.map((function(t){return(t-o[0])/(o[a]-o[0])})),f=i.map((function(t){var e;for(e=0;!(u[e]<=t&&t<=u[e+1]);e++);var n=(t-u[e])/(u[e+1]-u[e]);return c[e]*(1-n)+c[e+1]*n}));return r.index_map=new Float32Array(f),r.program=null,r.vertices=null,r.fill_texture=null,r.texcoords=null,r.cmap_texture=null,r.cmap_nonlin_texture=null,r}return nt(e,t),e.prototype.onAdd=function(t,e){return n=this,r=void 0,a=function(){var t,n,r,o,a,i,l,c,u,f,s;return function(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(c){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){i.label=l[1];break}if(6===l[0]&&i.label<o[1]){i.label=o[1],o=l;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(l);break}o[2]&&i.ops.pop(),i.trys.pop();continue}l=e.call(t,i)}catch(t){l=[6,t],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,c])}}}(this,(function(d){switch(d.label){case 0:return e.getExtension("OES_texture_float"),e.getExtension("OES_texture_float_linear"),this.program=new L(e,rt,ot),t=this.field.grid.getCoords(),n=t.lats,r=t.lons,o=this.field.getPaddedData(),a=o.width,i=o.height,l=o.data,[4,v.makeDomainVerticesAndTexCoords(n,r,a,i)];case 1:return c=d.sent(),this.vertices=new M(e,c.vertices,2,e.TRIANGLE_STRIP),u={format:e.LUMINANCE,type:e.FLOAT,width:a,height:i,image:l,mag_filter:e.LINEAR},this.fill_texture=new I(e,u),this.texcoords=new M(e,c.tex_coords,2,e.TRIANGLE_STRIP),f={format:e.RGBA,type:e.UNSIGNED_BYTE,image:this.cmap_image,mag_filter:e.NEAREST},this.cmap_texture=new I(e,f),s={format:e.LUMINANCE,type:e.FLOAT,width:this.index_map.length,height:1,image:this.index_map,mag_filter:e.LINEAR},this.cmap_nonlin_texture=new I(e,s),[2]}}))},new((o=void 0)||(o=Promise))((function(t,e){function i(t){try{c(a.next(t))}catch(t){e(t)}}function l(t){try{c(a.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(t){t(n)}))).then(i,l)}c((a=a.apply(n,r||[])).next())}));var n,r,o,a},e.prototype.render=function(t,e){null!==this.program&&null!==this.vertices&&null!==this.texcoords&&null!==this.fill_texture&&null!==this.cmap_texture&&null!==this.cmap_nonlin_texture&&(this.program.use({a_pos:this.vertices,a_tex_coord:this.texcoords},{u_cmap_min:this.cmap.levels[0],u_cmap_max:this.cmap.levels[this.cmap.levels.length-1],u_matrix:e,u_opacity:this.opacity,u_n_index:this.index_map.length},{u_fill_sampler:this.fill_texture,u_cmap_sampler:this.cmap_texture,u_cmap_nonlin_sampler:this.cmap_nonlin_texture}),t.enable(t.BLEND),t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA),this.program.draw())},e}(g);var it=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i},lt=n(955),ct=n(49),ut=function(){function t(t,e,n,r,o){var a=it(r,2),i=a[0],l=a[1];this.size=l,this.aspect=i/l,this.color=o,this.program=new L(t,lt,ct),this.vertices=new M(t,e.pts,3,t.TRIANGLE_STRIP),this.offsets=new M(t,e.offset,2,t.TRIANGLE_STRIP),this.texcoords=new M(t,e.tex_coords,2,t.TRIANGLE_STRIP),this.texture=new I(t,n)}return t.prototype.render=function(t,e,n,r,o,a){var i=it(n,2),l=i[0],c=i[1];this.program.use({a_pos:this.vertices,a_offset:this.offsets,a_tex_coord:this.texcoords},{u_billboard_size:this.size*(c/l),u_billboard_aspect:this.aspect,u_billboard_color:this.color,u_matrix:e,u_map_aspect:c/l,u_zoom:r,u_map_bearing:o},{u_sampler:this.texture}),t.enable(t.BLEND),t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA),this.program.draw()},t}(),ft=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),st={BARB_WIDTH:85,BARB_HEIGHT:256,BARB_TEX_WRAP:60,BARB_TEX_WIDTH:1024,BARB_TEX_HEIGHT:1024,MAX_BARB:235},dt=function(){var t=document.createElement("canvas");function e(t,e,n,r){var o=st.BARB_WIDTH/2-4,a=o/2;if(r<2.5)t.beginPath(),t.arc(e,n,o/2,0,2*Math.PI),t.stroke();else{var i=0,l=r,c=0,u=Math.floor((l+2.5)/50);c+=u*o/2+a+(u-1)*a/2,l-=50*u;var f=Math.floor((l+2.5)/10);c+=f*a,l-=10*f,c+=Math.floor((l+2.5)/5)*a,r<7.5&&(c+=a),c=Math.max(120,c),t.beginPath(),t.moveTo(e,n),t.lineTo(e,n+c),l=r,i=n+c;for(var s=!1,d=!0;l>47.5;)s&&(i+=a/2),d||t.moveTo(e,i),t.lineTo(e-o,i),t.lineTo(e,i-o/2),i-=o/2+a,l-=50,s=!0,d=!1;for(;l>7.5;)d||t.moveTo(e,i),t.lineTo(e-o,i+o/2),i-=a,l-=10,d=!1;for(r<7.5&&(i-=a);l>2.5;)t.moveTo(e,i),t.lineTo(e-o/2,i+o/4),l-=5;t.stroke()}}t.width=st.BARB_TEX_WIDTH,t.height=st.BARB_TEX_HEIGHT;var n=t.getContext("2d");if(null===n)throw"Could not get rendering context for the wind barb canvas";n.lineWidth=8,n.miterLimit=4;for(var r=0;r<=st.MAX_BARB;r+=5)e(n,r%st.BARB_TEX_WRAP/5*st.BARB_WIDTH+st.BARB_WIDTH/2,Math.floor(r/st.BARB_TEX_WRAP)*st.BARB_HEIGHT+st.BARB_WIDTH/2,r);return t}();const ht=function(t){function e(e,n){var r=t.call(this)||this;r.fields=e;var o=w(n.color||"#000000");return r.color=[o[0],o[1],o[2]],r.thin_fac=n.thin_fac||1,r.map=null,r.barb_billboards=null,r}return ft(e,t),e.prototype.onAdd=function(t,e){return n=this,r=void 0,a=function(){var n,r,o,a,i,l;return function(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(c){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){i.label=l[1];break}if(6===l[0]&&i.label<o[1]){i.label=o[1],o=l;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(l);break}o[2]&&i.ops.pop(),i.trys.pop();continue}l=e.call(t,i)}catch(t){l=[6,t],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,c])}}}(this,(function(c){switch(c.label){case 0:return this.map=t,n=this.fields.u.grid.getCoords(),r=n.lons,o=n.lats,[4,v.makeBarbElements(o,r,this.fields.u.data,this.fields.v.data,this.thin_fac,st)];case 1:return a=c.sent(),i={format:e.RGBA,type:e.UNSIGNED_BYTE,image:dt,mag_filter:e.NEAREST},l=st.BARB_WIDTH/st.BARB_HEIGHT*27.5,this.barb_billboards=new ut(e,a,i,[l,27.5],this.color),[2]}}))},new((o=void 0)||(o=Promise))((function(t,e){function i(t){try{c(a.next(t))}catch(t){e(t)}}function l(t){try{c(a.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(t){t(n)}))).then(i,l)}c((a=a.apply(n,r||[])).next())}));var n,r,o,a},e.prototype.render=function(t,e){if(null!==this.map&&null!==this.barb_billboards){var n=this.map.getZoom(),r=this.map.getCanvas().width,o=this.map.getCanvas().height,a=this.map.getBearing(),i=this.map.getPitch();this.barb_billboards.render(t,e,[r,o],n,a,i)}},e}(g);var pt=n(319),_t=n(559),mt=function(){function t(t,e,n,r,o){this.width=r,this.scale=o,this.program=new L(t,pt,_t),this.origin=new M(t,e.origin,2,t.TRIANGLE_STRIP),this.offset=new M(t,e.verts,2,t.TRIANGLE_STRIP),this.extrusion=new M(t,e.extrusion,2,t.TRIANGLE_STRIP),this.min_zoom=new M(t,e.zoom,1,t.TRIANGLE_STRIP),this.texture=new I(t,n),this.texcoords=new M(t,e.texcoords,2,t.TRIANGLE_STRIP)}return t.prototype.render=function(t,e,n,r,o,a){var i=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}(n,2),l=i[0],c=i[1];this.program.use({a_pos:this.origin,a_offset:this.offset,a_extrusion:this.extrusion,a_min_zoom:this.min_zoom,a_tex_coord:this.texcoords},{u_offset_scale:this.scale*(c/l),u_line_width:this.width,u_matrix:e,u_map_aspect:c/l,u_zoom:r,u_map_bearing:o},{u_sampler:this.texture}),t.enable(t.BLEND),t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA),this.program.draw()},t}(),bt=function(){function t(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid LngLat object: (".concat(t,", ").concat(e,")"));if(this.lng=+t,this.lat=+e,this.lat>90||this.lat<-90)throw new Error("Invalid LngLat latitude value: must be between -90 and 90")}return t.prototype.toMercatorCoord=function(){return{x:(e=this.lng,(180+e)/360),y:(t=this.lat,(180-180/Math.PI*Math.log(Math.tan(Math.PI/4+t*Math.PI/360)))/360)};var t,e},t}(),vt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),gt=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i},yt=function(t,e,n){if(n||2===arguments.length)for(var r,o=0,a=e.length;o<a;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))},xt=256,wt=function(){var t=document.createElement("canvas");t.width=xt,t.height=xt;var e=t.getContext("2d");if(null===e)throw"Could not get rendering context for the hodograph background canvas";e.lineWidth=4;for(var n=64;n<=128;n+=64)e.beginPath(),e.arc(128,128,n-2,0,2*Math.PI),e.stroke();var r=128,o=128;return e.beginPath(),e.moveTo(r,o),e.lineTo(148,118),e.lineTo(148,138),e.lineTo(r,o),e.fill(),t}(),Et=[{bounds:[0,1],color:"#ffffcc"},{bounds:[1,3],color:"#a1dab4"},{bounds:[3,6],color:"#41b6c4"},{bounds:[6,9],color:"#225ea8"}],Tt=function(){var t=document.createElement("canvas");t.width=Math.max.apply(Math,yt([],gt(Et.map((function(t){return Math.max.apply(Math,yt([],gt(t.bounds),!1))}))),!1)),t.height=1;var e=t.getContext("2d");return Et.forEach((function(t){if(null===e)throw"Could not get rendering context for the hodograph height texture canvas";var n=gt(t.bounds,2),r=n[0],o=n[1];e.fillStyle=t.color,e.fillRect(r,0,o-r,1)})),t}();const At=function(t){function e(e,n){var r=t.call(this)||this;r.profiles=e;var o=w(n.bgcolor);return r.bgcolor=[o[0],o[1],o[2]],r.thin_fac=n.thin_fac,r.map=null,r.bg_billboard=null,r.hodo_line=null,r.sm_line=null,r}return vt(e,t),e.prototype.onAdd=function(t,e){return n=this,r=void 0,a=function(){var n,r,o,a,i,l,c,u,f,s=this;return function(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(c){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){i.label=l[1];break}if(6===l[0]&&i.label<o[1]){i.label=o[1],o=l;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(l);break}o[2]&&i.ops.pop(),i.trys.pop();continue}l=e.call(t,i)}catch(t){l=[6,t],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,c])}}}(this,(function(d){switch(d.label){case 0:return this.map=t,n=254/10240,r=140,o=this._getHodoBackgroundElements(),a={format:e.RGBA,type:e.UNSIGNED_BYTE,image:wt,mag_filter:e.NEAREST},this.bg_billboard=new ut(e,o,a,[r,r],this.bgcolor),[4,v.makePolyLines(this.profiles.map((function(t){var e=new bt(t.lon,t.lat).toMercatorCoord(),n=R(t.jlat,t.ilon,s.thin_fac),r=Math.max.apply(Math,yt([],gt(Et.map((function(t){return Math.max.apply(Math,yt([],gt(t.bounds),!1))}))),!1));return{verts:yt([],gt(t.u),!1).map((function(e,n){return[e-t.smu,t.v[n]-t.smv]})),origin:[e.x,e.y],zoom:n,texcoords:yt([],gt(t.z),!1).map((function(t){return[t/r,.5]}))}})))];case 1:return i=d.sent(),l={format:e.RGBA,type:e.UNSIGNED_BYTE,image:Tt,mag_filter:e.NEAREST},this.hodo_line=new mt(e,i,l,1.5,n*r),[4,v.makePolyLines(this.profiles.map((function(t){var e=new bt(t.lon,t.lat).toMercatorCoord(),n=R(t.jlat,t.ilon,s.thin_fac),r=Math.hypot(t.smu,t.smv),o=Math.PI/2-Math.atan2(-t.smv,-t.smu);return{verts:[[2*Math.sin(o),2*Math.cos(o)],[r*Math.sin(o),r*Math.cos(o)]],origin:[e.x,e.y],zoom:n,texcoords:[[.5,.5],[.5,.5]]}})))];case 2:return c=d.sent(),(u=this.bgcolor.map((function(t){return 255*t}))).push(255),f={format:e.RGBA,type:e.UNSIGNED_BYTE,width:1,height:1,image:new Uint8Array(u),mag_filter:e.NEAREST},this.sm_line=new mt(e,c,f,1,n*r),[2]}}))},new((o=void 0)||(o=Promise))((function(t,e){function i(t){try{c(a.next(t))}catch(t){e(t)}}function l(t){try{c(a.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(t){t(n)}))).then(i,l)}c((a=a.apply(n,r||[])).next())}));var n,r,o,a},e.prototype.render=function(t,e){if(null!==this.map&&null!==this.hodo_line&&null!==this.sm_line&&null!==this.bg_billboard){var n=this.map.getZoom(),r=this.map.getCanvas().width,o=this.map.getCanvas().height,a=this.map.getBearing(),i=this.map.getPitch();this.hodo_line.render(t,e,[r,o],n,a,i),this.sm_line.render(t,e,[r,o],n,a,a),this.bg_billboard.render(t,e,[r,o],n,a,i)}},e.prototype._getHodoBackgroundElements=function(){var t=this;return{pts:new Float32Array(this.profiles.map((function(e){var n=new bt(e.lon,e.lat).toMercatorCoord(),r=R(e.jlat,e.ilon,t.thin_fac);return[n.x,n.y,r,n.x,n.y,r,n.x,n.y,r,n.x,n.y,r,n.x,n.y,r,n.x,n.y,r]})).flat()),offset:new Float32Array(this.profiles.map((function(t){var e=90-180*Math.atan2(-t.smv,-t.smu)/Math.PI;return[0,e,0,e,1,e,2,e,3,e,3,e]})).flat()),tex_coords:new Float32Array(this.profiles.map((function(t){return[0,0,0,0,0,1,1,0,1,1,1,1]})).flat())}},e}(g);var St=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Rt=function(t){this.type="custom",this.id=t},Pt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.field=n,r}return St(e,t),e.prototype.onAdd=function(t,e){this.field.onAdd(t,e)},e.prototype.render=function(t,e){this.field.render(t,e)},e}(Rt),Ot=function(t){function e(e){var n=t.call(this,e)||this;return n.fields={},n.field_key=null,n.map=null,n.gl=null,n}return St(e,t),e.prototype.onAdd=function(t,e){var n=this;this.map=t,this.gl=e,Object.values(this.fields).forEach((function(r){r.onAdd(t,e).then((function(t){n._repaintIfNecessary(null)}))})),this._repaintIfNecessary(null)},e.prototype.render=function(t,e){null!==this.map&&null!==this.gl&&null!==this.field_key&&this.fields.hasOwnProperty(this.field_key)&&null!==this.fields[this.field_key]&&this.fields[this.field_key].render(t,e)},e.prototype.setActiveKey=function(t){var e=this.field_key;this.field_key=t,this._repaintIfNecessary(e)},e.prototype.getKeys=function(){return Object.keys(this.fields)},e.prototype.addField=function(t,e){var n=this;this.field_key,null!==this.map&&null!==this.gl&&null!==t&&t.onAdd(this.map,this.gl).then((function(t){n._repaintIfNecessary(null)})),this.fields[e]=t,null===this.field_key&&(this.field_key=e)},e.prototype._repaintIfNecessary=function(t){null!==this.map&&t!==this.field_key&&this.map.triggerRepaint()},e}(Rt),Mt=function(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(c){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){i.label=l[1];break}if(6===l[0]&&i.label<o[1]){i.label=o[1],o=l;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(l);break}o[2]&&i.ops.pop(),i.trys.pop();continue}l=e.call(t,i)}catch(t){l=[6,t],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,c])}}},It=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i},Nt=function(t,e,n){if(n||2===arguments.length)for(var r,o=0,a=e.length;o<a;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))},Ct=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},Lt=function(){function t(t){this.cached_value=null,this.compute_value=t}return t.prototype.getValue=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return null===this.cached_value&&(this.cached_value=this.compute_value.apply(this,Nt([],It(t),!1))),this.cached_value},t}(),kt=function(){function t(t,e,n,r,o,a){var i=this;this.type="latlon",this.ni=t,this.nj=e,this.ll_lon=n,this.ll_lat=r,this.ur_lon=o,this.ur_lat=a,this._ll_cache=new Lt((function(){for(var t=(i.ur_lon-i.ll_lon)/(i.ni-1),e=(i.ur_lat-i.ll_lat)/(i.nj-1),n=new Float32Array(i.ni),r=new Float32Array(i.nj),o=0;o<i.ni;o++)n[o]=i.ll_lon+o*t;for(var a=0;a<i.nj;a++)r[a]=i.ll_lat+a*e;return{lons:n,lats:r}}))}return t.prototype.getCoords=function(){return this._ll_cache.getValue()},t}(),Bt=function(){function t(t,e){var n=this;this.grid=t,this.data=e,this._pad_cache=new Lt((function(){for(var t=Math.pow(2,Math.ceil(Math.log2(n.grid.ni))),e=Math.pow(2,Math.ceil(Math.log2(n.grid.nj))),r=new Float32Array(t*e),o=0;o<n.grid.nj;o++)r.set(n.data.slice(o*n.grid.ni,(o+1)*n.grid.ni),o*t),r.set(n.data.slice((o+1)*n.grid.ni-1,(o+1)*n.grid.ni),o*t+n.grid.ni);return r.set(n.data.slice((n.grid.nj-1)*n.grid.ni,n.grid.nj*n.grid.ni),n.grid.nj*t),{width:t,height:e,data:r}}))}return t.prototype.getPaddedData=function(){return this._pad_cache.getValue()},t.aggregateFields=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];function o(t,e){var n,r,o,a,i,l;return Mt(this,(function(c){switch(c.label){case 0:c.trys.push([0,5,6,7]),n=Ct(t),r=n.next(),c.label=1;case 1:return r.done?[3,4]:(o=r.value,[4,e(o)]);case 2:c.sent(),c.label=3;case 3:return r=n.next(),[3,1];case 4:return[3,7];case 5:return a=c.sent(),i={error:a},[3,7];case 6:try{r&&!r.done&&(l=n.return)&&l.call(n)}finally{if(i)throw i.error}return[7];case 7:return[2]}}))}var a=P.apply(void 0,Nt([],It(n.map((function(t){return t.data}))),!1)),i=new Float32Array(o(a,(function(t){return e.apply(void 0,Nt([],It(t),!1))})));return new t(n[0].grid,i)},t}(),jt={bluered:function(t,e,n){return $.diverging("#0000ff","#ff0000",t,e,n)},redblue:function(t,e,n){return $.diverging("#ff0000","#0000ff",t,e,n)},pw_speed500mb:J,pw_speed850mb:K,pw_cape:q,pw_t2m:Q,pw_td2m:tt}})(),r})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.apgl=e():t.apgl=e()}(this,(()=>(()=>{"use strict";const t=Symbol("Comlink.proxy"),e=Symbol("Comlink.endpoint"),r=Symbol("Comlink.releaseProxy"),n=Symbol("Comlink.thrown"),o=t=>"object"==typeof t&&null!==t||"function"==typeof t,a=new Map([["proxy",{canHandle:e=>o(e)&&e[t],serialize(t){const{port1:e,port2:r}=new MessageChannel;return s(t,e),[r,[r]]},deserialize:t=>(t.start(),u(t,[],undefined))}],["throw",{canHandle:t=>o(t)&&n in t,serialize({value:t}){let e;return e=t instanceof Error?{isError:!0,value:{message:t.message,name:t.name,stack:t.stack}}:{isError:!1,value:t},[e,[]]},deserialize(t){if(t.isError)throw Object.assign(new Error(t.value.message),t.value);throw t.value}}]]);function s(e,r=self){r.addEventListener("message",(function o(a){if(!a||!a.data)return;const{id:c,type:u,path:l}=Object.assign({path:[]},a.data),d=(a.data.argumentList||[]).map(p);let m;try{const r=l.slice(0,-1).reduce(((t,e)=>t[e]),e),n=l.reduce(((t,e)=>t[e]),e);switch(u){case"GET":m=n;break;case"SET":r[l.slice(-1)[0]]=p(a.data.value),m=!0;break;case"APPLY":m=n.apply(r,d);break;case"CONSTRUCT":m=function(e){return Object.assign(e,{[t]:!0})}(new n(...d));break;case"ENDPOINT":{const{port1:t,port2:r}=new MessageChannel;s(e,r),m=function(t,e){return f.set(t,e),t}(t,[t])}break;case"RELEASE":m=void 0;break;default:return}}catch(t){m={value:t,[n]:0}}Promise.resolve(m).catch((t=>({value:t,[n]:0}))).then((t=>{const[e,n]=h(t);r.postMessage(Object.assign(Object.assign({},e),{id:c}),n),"RELEASE"===u&&(r.removeEventListener("message",o),i(r))}))})),r.start&&r.start()}function i(t){(function(t){return"MessagePort"===t.constructor.name})(t)&&t.close()}function c(t){if(t)throw new Error("Proxy has been released and is not useable")}function u(t,n=[],o=function(){}){let a=!1;const s=new Proxy(o,{get(e,o){if(c(a),o===r)return()=>d(t,{type:"RELEASE",path:n.map((t=>t.toString()))}).then((()=>{i(t),a=!0}));if("then"===o){if(0===n.length)return{then:()=>s};const e=d(t,{type:"GET",path:n.map((t=>t.toString()))}).then(p);return e.then.bind(e)}return u(t,[...n,o])},set(e,r,o){c(a);const[s,i]=h(o);return d(t,{type:"SET",path:[...n,r].map((t=>t.toString())),value:s},i).then(p)},apply(r,o,s){c(a);const i=n[n.length-1];if(i===e)return d(t,{type:"ENDPOINT"}).then(p);if("bind"===i)return u(t,n.slice(0,-1));const[f,h]=l(s);return d(t,{type:"APPLY",path:n.map((t=>t.toString())),argumentList:f},h).then(p)},construct(e,r){c(a);const[o,s]=l(r);return d(t,{type:"CONSTRUCT",path:n.map((t=>t.toString())),argumentList:o},s).then(p)}});return s}function l(t){const e=t.map(h);return[e.map((t=>t[0])),(r=e.map((t=>t[1])),Array.prototype.concat.apply([],r))];var r}const f=new WeakMap;function h(t){for(const[e,r]of a)if(r.canHandle(t)){const[n,o]=r.serialize(t);return[{type:"HANDLER",name:e,value:n},o]}return[{type:"RAW",value:t},f.get(t)||[]]}function p(t){switch(t.type){case"HANDLER":return a.get(t.name).deserialize(t.value);case"RAW":return t.value}}function d(t,e,r){return new Promise((n=>{const o=new Array(4).fill(0).map((()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16))).join("-");t.addEventListener("message",(function e(r){r.data&&r.data.id&&r.data.id===o&&(t.removeEventListener("message",e),n(r.data))})),t.start&&t.start(),t.postMessage(Object.assign({id:o},e),r)}))}var m=function(){function t(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid LngLat object: (".concat(t,", ").concat(e,")"));if(this.lng=+t,this.lat=+e,this.lat>90||this.lat<-90)throw new Error("Invalid LngLat latitude value: must be between -90 and 90")}return t.prototype.toMercatorCoord=function(){return{x:(e=this.lng,(180+e)/360),y:(t=this.lat,(180-180/Math.PI*Math.log(Math.tan(Math.PI/4+t*Math.PI/360)))/360)};var t,e},t}(),v=function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,a=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=a.next()).done;)s.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return s},g=function(t,e,r){if(r||2===arguments.length)for(var n,o=0,a=e.length;o<a;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))};return s({makeBarbElements:function(t,e,r,n,o,a){var s=a.BARB_WIDTH,i=a.BARB_TEX_WIDTH,c=a.BARB_HEIGHT,u=a.BARB_TEX_HEIGHT,l=a.BARB_TEX_WRAP,f=t.length,h=e.length,p=f*h*6*2,d=new Float32Array(f*h*6*3),v=new Float32Array(p),g=new Float32Array(p),y=0,x=0,E=s/i,b=c/u;return t.forEach((function(t,a){e.forEach((function(e,s){for(var i=function(t,e,r){for(var n=1,o=r;t%o!=0||e%o!=0;)n+=1,o/=2;return n}(a,s,o),c=r[a*h+s],u=n[a*h+s],f=5*Math.round(Math.hypot(c,u)/5),p=90-180*Math.atan2(-u,-c)/Math.PI,w=new m(e,t).toMercatorCoord(),A=0;A<6;A++){var M=Math.max(0,Math.min(A-1,3));d[y+3*A+0]=w.x,d[y+3*A+1]=w.y,d[y+3*A+2]=i,v[x+2*A+0]=M,v[x+2*A+1]=p}var S=f%l/5,j=Math.floor(f/l);g[x+0]=S*E,g[x+1]=j*b,g[x+2]=S*E,g[x+3]=j*b,g[x+4]=(S+1)*E,g[x+5]=j*b,g[x+6]=S*E,g[x+7]=(j+1)*b,g[x+8]=(S+1)*E,g[x+9]=(j+1)*b,g[x+10]=(S+1)*E,g[x+11]=(j+1)*b,y+=18,x+=12}))})),{pts:d,offset:v,tex_coords:g}},makeDomainVerticesAndTexCoords:function(t,e,r,n){var o=e.length,a=o-1,s=g([],v(t),!1).map((function(t){return[{lng:e[0],lat:t},{lng:e[a],lat:t}]})).flat().map((function(t){return new m(t.lng,t.lat).toMercatorCoord()})).map((function(t){return[t.x,t.y]})).flat(),i=g([],v(t),!1).map((function(t,e){return[{s:(e+.5)/n,r:.505/(r+1.07)},{s:(e+.5)/n,r:(o+.505)/(r+1.07)}]})).flat().map((function(t){return[t.r,t.s]})).flat();return{vertices:new Float32Array(s),tex_coords:new Float32Array(i)}},makePolyLines:function(t){var e=Object.fromEntries(Object.entries(t[0]).map((function(t){var e=v(t,2),r=e[0],n=e[1];return[r,void 0===n.length?1:void 0===n[0].length?n.length:n[0].length]})));e.extrusion=2;var r=6*(t.map((function(t){return t.verts.length})).reduce((function(t,e){return t+e}))-t.length),n=Object.fromEntries(Object.entries(e).map((function(t){var e=v(t,2),n=e[0],o=e[1];return[n,r*o]}))),o={verts:new Float32Array(n.verts),origin:new Float32Array(n.origin),extrusion:new Float32Array(n.extrusion),zoom:new Float32Array(n.zoom),texcoords:new Float32Array(n.texcoords)},a=Object.fromEntries(Object.keys(n).map((function(t){return[t,0]}))),s=function(t,e){var r=e[0]-t[0],n=e[1]-t[1],o=Math.hypot(r,n);return[n/o,-r/o]};return t.forEach((function(t){var r,n,i,c=t.verts,u=t.texcoords,l=a.verts,f=c[0],h=c[1],p=u[0],d=(u[1],v(s(f,h),2)),m=d[0],g=d[1];o.verts[l+0]=f[0],o.verts[l+1]=f[1],o.texcoords[l+0]=p[0],o.texcoords[l+1]=p[1],o.extrusion[l+0]=m,o.extrusion[l+1]=g;for(var y=1;y<c.length;y++)f=c[y],n=c[y-1],p=u[y],i=u[y-1],m=(r=v(s(n,f),2))[0],g=r[1],l=a.verts+(1+4*(y-1))*e.verts,o.verts[l+0]=n[0],o.verts[l+1]=n[1],o.verts[l+2]=n[0],o.verts[l+3]=n[1],o.verts[l+4]=f[0],o.verts[l+5]=f[1],o.verts[l+6]=f[0],o.verts[l+7]=f[1],o.texcoords[l+0]=i[0],o.texcoords[l+1]=i[1],o.texcoords[l+2]=i[0],o.texcoords[l+3]=i[1],o.texcoords[l+4]=p[0],o.texcoords[l+5]=p[1],o.texcoords[l+6]=p[0],o.texcoords[l+7]=p[1],o.extrusion[l+0]=m,o.extrusion[l+1]=g,o.extrusion[l+2]=-m,o.extrusion[l+3]=-g,o.extrusion[l+4]=m,o.extrusion[l+5]=g,o.extrusion[l+6]=-m,o.extrusion[l+7]=-g;o.verts[l+8]=f[0],o.verts[l+9]=f[1],o.texcoords[l+8]=p[0],o.texcoords[l+9]=p[1],o.extrusion[l+8]=-m,o.extrusion[l+9]=-g;var x=function(e){t.origin.forEach((function(t,r){o.origin[a.origin+e+r]=t}))};for(y=0;y<6*(c.length-1)*e.origin;y+=e.origin)x(y);for(y=0;y<6*(c.length-1)*e.zoom;y+=e.zoom)o.zoom[a.zoom+y]=t.zoom;Object.keys(a).forEach((function(t){a[t]+=6*(c.length-1)*e[t]}))})),o}}),{}})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
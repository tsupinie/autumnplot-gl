!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.apgl=e():t.apgl=e()}(this,(()=>(()=>{"use strict";const t=Symbol("Comlink.proxy"),e=Symbol("Comlink.endpoint"),r=Symbol("Comlink.releaseProxy"),n=Symbol("Comlink.thrown"),o=t=>"object"==typeof t&&null!==t||"function"==typeof t,a=new Map([["proxy",{canHandle:e=>o(e)&&e[t],serialize(t){const{port1:e,port2:r}=new MessageChannel;return s(t,e),[r,[r]]},deserialize:t=>(t.start(),u(t,[],undefined))}],["throw",{canHandle:t=>o(t)&&n in t,serialize({value:t}){let e;return e=t instanceof Error?{isError:!0,value:{message:t.message,name:t.name,stack:t.stack}}:{isError:!1,value:t},[e,[]]},deserialize(t){if(t.isError)throw Object.assign(new Error(t.value.message),t.value);throw t.value}}]]);function s(e,r=self){r.addEventListener("message",(function o(a){if(!a||!a.data)return;const{id:c,type:u,path:l}=Object.assign({path:[]},a.data),d=(a.data.argumentList||[]).map(p);let m;try{const r=l.slice(0,-1).reduce(((t,e)=>t[e]),e),n=l.reduce(((t,e)=>t[e]),e);switch(u){case"GET":m=n;break;case"SET":r[l.slice(-1)[0]]=p(a.data.value),m=!0;break;case"APPLY":m=n.apply(r,d);break;case"CONSTRUCT":m=function(e){return Object.assign(e,{[t]:!0})}(new n(...d));break;case"ENDPOINT":{const{port1:t,port2:r}=new MessageChannel;s(e,r),m=function(t,e){return f.set(t,e),t}(t,[t])}break;case"RELEASE":m=void 0;break;default:return}}catch(t){m={value:t,[n]:0}}Promise.resolve(m).catch((t=>({value:t,[n]:0}))).then((t=>{const[e,n]=h(t);r.postMessage(Object.assign(Object.assign({},e),{id:c}),n),"RELEASE"===u&&(r.removeEventListener("message",o),i(r))}))})),r.start&&r.start()}function i(t){(function(t){return"MessagePort"===t.constructor.name})(t)&&t.close()}function c(t){if(t)throw new Error("Proxy has been released and is not useable")}function u(t,n=[],o=function(){}){let a=!1;const s=new Proxy(o,{get(e,o){if(c(a),o===r)return()=>d(t,{type:"RELEASE",path:n.map((t=>t.toString()))}).then((()=>{i(t),a=!0}));if("then"===o){if(0===n.length)return{then:()=>s};const e=d(t,{type:"GET",path:n.map((t=>t.toString()))}).then(p);return e.then.bind(e)}return u(t,[...n,o])},set(e,r,o){c(a);const[s,i]=h(o);return d(t,{type:"SET",path:[...n,r].map((t=>t.toString())),value:s},i).then(p)},apply(r,o,s){c(a);const i=n[n.length-1];if(i===e)return d(t,{type:"ENDPOINT"}).then(p);if("bind"===i)return u(t,n.slice(0,-1));const[f,h]=l(s);return d(t,{type:"APPLY",path:n.map((t=>t.toString())),argumentList:f},h).then(p)},construct(e,r){c(a);const[o,s]=l(r);return d(t,{type:"CONSTRUCT",path:n.map((t=>t.toString())),argumentList:o},s).then(p)}});return s}function l(t){const e=t.map(h);return[e.map((t=>t[0])),(r=e.map((t=>t[1])),Array.prototype.concat.apply([],r))];var r}const f=new WeakMap;function h(t){for(const[e,r]of a)if(r.canHandle(t)){const[n,o]=r.serialize(t);return[{type:"HANDLER",name:e,value:n},o]}return[{type:"RAW",value:t},f.get(t)||[]]}function p(t){switch(t.type){case"HANDLER":return a.get(t.name).deserialize(t.value);case"RAW":return t.value}}function d(t,e,r){return new Promise((n=>{const o=new Array(4).fill(0).map((()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16))).join("-");t.addEventListener("message",(function e(r){r.data&&r.data.id&&r.data.id===o&&(t.removeEventListener("message",e),n(r.data))})),t.start&&t.start(),t.postMessage(Object.assign({id:o},e),r)}))}var m=function(){function t(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid LngLat object: (".concat(t,", ").concat(e,")"));if(this.lng=+t,this.lat=+e,this.lat>90||this.lat<-90)throw new Error("Invalid LngLat latitude value: must be between -90 and 90")}return t.prototype.toMercatorCoord=function(){return{x:(e=this.lng,(180+e)/360),y:(t=this.lat,(180-180/Math.PI*Math.log(Math.tan(Math.PI/4+t*Math.PI/360)))/360)};var t,e},t}(),v=function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,a=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=a.next()).done;)s.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return s},g=function(t,e,r){if(r||2===arguments.length)for(var n,o=0,a=e.length;o<a;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))};return s({makeBarbElements:function(t,e,r,n,o,a){var s=a.BARB_WIDTH,i=a.BARB_TEX_WIDTH,c=a.BARB_HEIGHT,u=a.BARB_TEX_HEIGHT,l=a.BARB_TEX_WRAP,f=t.length,h=e.length,p=f*h*6*2,d=new Float32Array(f*h*6*3),v=new Float32Array(p),g=new Float32Array(p),y=0,x=0,E=s/i,b=c/u;return t.forEach((function(t,a){var s=t<0;e.forEach((function(e,i){for(var c=function(t,e,r){for(var n=1,o=r;t%o!=0||e%o!=0;)n+=1,o/=2;return n}(a,i,o),u=r[a*h+i],f=n[a*h+i],p=5*Math.round(Math.hypot(u,f)/5),w=90-180*Math.atan2(-f,-u)/Math.PI,A=new m(e,t).toMercatorCoord(),M=0;M<6;M++){var S=Math.max(0,Math.min(M-1,3));d[y+3*M+0]=A.x,d[y+3*M+1]=A.y,d[y+3*M+2]=c,v[x+2*M+0]=S,v[x+2*M+1]=w}var j=p%l/5,L=Math.floor(p/l);s?(g[x+0]=(j+1)*E,g[x+1]=L*b,g[x+2]=(j+1)*E,g[x+3]=L*b,g[x+4]=j*E,g[x+5]=L*b,g[x+6]=(j+1)*E,g[x+7]=(L+1)*b,g[x+8]=j*E,g[x+9]=(L+1)*b,g[x+10]=j*E,g[x+11]=(L+1)*b):(g[x+0]=j*E,g[x+1]=L*b,g[x+2]=j*E,g[x+3]=L*b,g[x+4]=(j+1)*E,g[x+5]=L*b,g[x+6]=j*E,g[x+7]=(L+1)*b,g[x+8]=(j+1)*E,g[x+9]=(L+1)*b,g[x+10]=(j+1)*E,g[x+11]=(L+1)*b),y+=18,x+=12}))})),{pts:d,offset:v,tex_coords:g}},makeDomainVerticesAndTexCoords:function(t,e,r,n){var o=e.length,a=o-1,s=g([],v(t),!1).map((function(t){return[{lng:e[0],lat:t},{lng:e[a],lat:t}]})).flat().map((function(t){return new m(t.lng,t.lat).toMercatorCoord()})).map((function(t){return[t.x,t.y]})).flat(),i=g([],v(t),!1).map((function(t,e){return[{s:(e+.5)/n,r:.505/(r+1.07)},{s:(e+.5)/n,r:(o+.505)/(r+1.07)}]})).flat().map((function(t){return[t.r,t.s]})).flat();return{vertices:new Float32Array(s),tex_coords:new Float32Array(i)}},makePolyLines:function(t){var e=Object.fromEntries(Object.entries(t[0]).map((function(t){var e=v(t,2),r=e[0],n=e[1];return[r,void 0===n.length?1:void 0===n[0].length?n.length:n[0].length]})));e.extrusion=2;var r=6*(t.map((function(t){return t.verts.length})).reduce((function(t,e){return t+e}))-t.length),n=Object.fromEntries(Object.entries(e).map((function(t){var e=v(t,2),n=e[0],o=e[1];return[n,r*o]}))),o={verts:new Float32Array(n.verts),origin:new Float32Array(n.origin),extrusion:new Float32Array(n.extrusion),zoom:new Float32Array(n.zoom),texcoords:new Float32Array(n.texcoords)},a=Object.fromEntries(Object.keys(n).map((function(t){return[t,0]}))),s=function(t,e){var r=e[0]-t[0],n=e[1]-t[1],o=Math.hypot(r,n);return[n/o,-r/o]};return t.forEach((function(t){var r,n,i,c=t.verts,u=t.texcoords,l=a.verts,f=c[0],h=c[1],p=u[0],d=(u[1],v(s(f,h),2)),m=d[0],g=d[1];o.verts[l+0]=f[0],o.verts[l+1]=f[1],o.texcoords[l+0]=p[0],o.texcoords[l+1]=p[1],o.extrusion[l+0]=m,o.extrusion[l+1]=g;for(var y=1;y<c.length;y++)f=c[y],n=c[y-1],p=u[y],i=u[y-1],m=(r=v(s(n,f),2))[0],g=r[1],l=a.verts+(1+4*(y-1))*e.verts,o.verts[l+0]=n[0],o.verts[l+1]=n[1],o.verts[l+2]=n[0],o.verts[l+3]=n[1],o.verts[l+4]=f[0],o.verts[l+5]=f[1],o.verts[l+6]=f[0],o.verts[l+7]=f[1],o.texcoords[l+0]=i[0],o.texcoords[l+1]=i[1],o.texcoords[l+2]=i[0],o.texcoords[l+3]=i[1],o.texcoords[l+4]=p[0],o.texcoords[l+5]=p[1],o.texcoords[l+6]=p[0],o.texcoords[l+7]=p[1],o.extrusion[l+0]=m,o.extrusion[l+1]=g,o.extrusion[l+2]=-m,o.extrusion[l+3]=-g,o.extrusion[l+4]=m,o.extrusion[l+5]=g,o.extrusion[l+6]=-m,o.extrusion[l+7]=-g;o.verts[l+8]=f[0],o.verts[l+9]=f[1],o.texcoords[l+8]=p[0],o.texcoords[l+9]=p[1],o.extrusion[l+8]=-m,o.extrusion[l+9]=-g;var x=function(e){t.origin.forEach((function(t,r){o.origin[a.origin+e+r]=t}))};for(y=0;y<6*(c.length-1)*e.origin;y+=e.origin)x(y);for(y=0;y<6*(c.length-1)*e.zoom;y+=e.zoom)o.zoom[a.zoom+y]=t.zoom;Object.keys(a).forEach((function(t){a[t]+=6*(c.length-1)*e[t]}))})),o}}),{}})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEdBQ3RCTyxFQUFLUCxJQUEyQixHQUFwQlQsRUFBTXBGLE9BQVMsR0FBUzBGLEVBQWtCRyxFQUMxRCxHQUNKLElBRU9NLENBQ1gsSSIsInNvdXJjZXMiOlsid2VicGFjazovL2FwZ2wvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL2FwZ2wvLi9ub2RlX21vZHVsZXMvY29tbGluay9kaXN0L2VzbS9jb21saW5rLm1qcyIsIndlYnBhY2s6Ly9hcGdsLy4vc3JjL01hcC50cyIsIndlYnBhY2s6Ly9hcGdsLy4vc3JjL1Bsb3RMYXllci53b3JrZXIudHMiLCJ3ZWJwYWNrOi8vYXBnbC8uL3NyYy91dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJhcGdsXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImFwZ2xcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCAoKSA9PiB7XG5yZXR1cm4gIiwiLyoqXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgcHJveHlNYXJrZXIgPSBTeW1ib2woXCJDb21saW5rLnByb3h5XCIpO1xyXG5jb25zdCBjcmVhdGVFbmRwb2ludCA9IFN5bWJvbChcIkNvbWxpbmsuZW5kcG9pbnRcIik7XHJcbmNvbnN0IHJlbGVhc2VQcm94eSA9IFN5bWJvbChcIkNvbWxpbmsucmVsZWFzZVByb3h5XCIpO1xyXG5jb25zdCB0aHJvd01hcmtlciA9IFN5bWJvbChcIkNvbWxpbmsudGhyb3duXCIpO1xyXG5jb25zdCBpc09iamVjdCA9ICh2YWwpID0+ICh0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiICYmIHZhbCAhPT0gbnVsbCkgfHwgdHlwZW9mIHZhbCA9PT0gXCJmdW5jdGlvblwiO1xyXG4vKipcclxuICogSW50ZXJuYWwgdHJhbnNmZXIgaGFuZGxlIHRvIGhhbmRsZSBvYmplY3RzIG1hcmtlZCB0byBwcm94eS5cclxuICovXHJcbmNvbnN0IHByb3h5VHJhbnNmZXJIYW5kbGVyID0ge1xyXG4gICAgY2FuSGFuZGxlOiAodmFsKSA9PiBpc09iamVjdCh2YWwpICYmIHZhbFtwcm94eU1hcmtlcl0sXHJcbiAgICBzZXJpYWxpemUob2JqKSB7XHJcbiAgICAgICAgY29uc3QgeyBwb3J0MSwgcG9ydDIgfSA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xyXG4gICAgICAgIGV4cG9zZShvYmosIHBvcnQxKTtcclxuICAgICAgICByZXR1cm4gW3BvcnQyLCBbcG9ydDJdXTtcclxuICAgIH0sXHJcbiAgICBkZXNlcmlhbGl6ZShwb3J0KSB7XHJcbiAgICAgICAgcG9ydC5zdGFydCgpO1xyXG4gICAgICAgIHJldHVybiB3cmFwKHBvcnQpO1xyXG4gICAgfSxcclxufTtcclxuLyoqXHJcbiAqIEludGVybmFsIHRyYW5zZmVyIGhhbmRsZXIgdG8gaGFuZGxlIHRocm93biBleGNlcHRpb25zLlxyXG4gKi9cclxuY29uc3QgdGhyb3dUcmFuc2ZlckhhbmRsZXIgPSB7XHJcbiAgICBjYW5IYW5kbGU6ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpICYmIHRocm93TWFya2VyIGluIHZhbHVlLFxyXG4gICAgc2VyaWFsaXplKHsgdmFsdWUgfSkge1xyXG4gICAgICAgIGxldCBzZXJpYWxpemVkO1xyXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIHNlcmlhbGl6ZWQgPSB7XHJcbiAgICAgICAgICAgICAgICBpc0Vycm9yOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB2YWx1ZS5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHZhbHVlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhY2s6IHZhbHVlLnN0YWNrLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHNlcmlhbGl6ZWQgPSB7IGlzRXJyb3I6IGZhbHNlLCB2YWx1ZSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW3NlcmlhbGl6ZWQsIFtdXTtcclxuICAgIH0sXHJcbiAgICBkZXNlcmlhbGl6ZShzZXJpYWxpemVkKSB7XHJcbiAgICAgICAgaWYgKHNlcmlhbGl6ZWQuaXNFcnJvcikge1xyXG4gICAgICAgICAgICB0aHJvdyBPYmplY3QuYXNzaWduKG5ldyBFcnJvcihzZXJpYWxpemVkLnZhbHVlLm1lc3NhZ2UpLCBzZXJpYWxpemVkLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgc2VyaWFsaXplZC52YWx1ZTtcclxuICAgIH0sXHJcbn07XHJcbi8qKlxyXG4gKiBBbGxvd3MgY3VzdG9taXppbmcgdGhlIHNlcmlhbGl6YXRpb24gb2YgY2VydGFpbiB2YWx1ZXMuXHJcbiAqL1xyXG5jb25zdCB0cmFuc2ZlckhhbmRsZXJzID0gbmV3IE1hcChbXHJcbiAgICBbXCJwcm94eVwiLCBwcm94eVRyYW5zZmVySGFuZGxlcl0sXHJcbiAgICBbXCJ0aHJvd1wiLCB0aHJvd1RyYW5zZmVySGFuZGxlcl0sXHJcbl0pO1xyXG5mdW5jdGlvbiBleHBvc2Uob2JqLCBlcCA9IHNlbGYpIHtcclxuICAgIGVwLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGZ1bmN0aW9uIGNhbGxiYWNrKGV2KSB7XHJcbiAgICAgICAgaWYgKCFldiB8fCAhZXYuZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHsgaWQsIHR5cGUsIHBhdGggfSA9IE9iamVjdC5hc3NpZ24oeyBwYXRoOiBbXSB9LCBldi5kYXRhKTtcclxuICAgICAgICBjb25zdCBhcmd1bWVudExpc3QgPSAoZXYuZGF0YS5hcmd1bWVudExpc3QgfHwgW10pLm1hcChmcm9tV2lyZVZhbHVlKTtcclxuICAgICAgICBsZXQgcmV0dXJuVmFsdWU7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gcGF0aC5zbGljZSgwLCAtMSkucmVkdWNlKChvYmosIHByb3ApID0+IG9ialtwcm9wXSwgb2JqKTtcclxuICAgICAgICAgICAgY29uc3QgcmF3VmFsdWUgPSBwYXRoLnJlZHVjZSgob2JqLCBwcm9wKSA9PiBvYmpbcHJvcF0sIG9iaik7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkdFVFwiIC8qIEdFVCAqLzpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblZhbHVlID0gcmF3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlNFVFwiIC8qIFNFVCAqLzpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFtwYXRoLnNsaWNlKC0xKVswXV0gPSBmcm9tV2lyZVZhbHVlKGV2LmRhdGEudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkFQUExZXCIgLyogQVBQTFkgKi86XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZSA9IHJhd1ZhbHVlLmFwcGx5KHBhcmVudCwgYXJndW1lbnRMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiQ09OU1RSVUNUXCIgLyogQ09OU1RSVUNUICovOlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBuZXcgcmF3VmFsdWUoLi4uYXJndW1lbnRMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSBwcm94eSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkVORFBPSU5UXCIgLyogRU5EUE9JTlQgKi86XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHBvcnQxLCBwb3J0MiB9ID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cG9zZShvYmosIHBvcnQyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSB0cmFuc2Zlcihwb3J0MSwgW3BvcnQxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlJFTEVBU0VcIiAvKiBSRUxFQVNFICovOlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVyblZhbHVlID0geyB2YWx1ZSwgW3Rocm93TWFya2VyXTogMCB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBQcm9taXNlLnJlc29sdmUocmV0dXJuVmFsdWUpXHJcbiAgICAgICAgICAgIC5jYXRjaCgodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWUsIFt0aHJvd01hcmtlcl06IDAgfTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigocmV0dXJuVmFsdWUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgW3dpcmVWYWx1ZSwgdHJhbnNmZXJhYmxlc10gPSB0b1dpcmVWYWx1ZShyZXR1cm5WYWx1ZSk7XHJcbiAgICAgICAgICAgIGVwLnBvc3RNZXNzYWdlKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgd2lyZVZhbHVlKSwgeyBpZCB9KSwgdHJhbnNmZXJhYmxlcyk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcIlJFTEVBU0VcIiAvKiBSRUxFQVNFICovKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBkZXRhY2ggYW5kIGRlYWN0aXZlIGFmdGVyIHNlbmRpbmcgcmVsZWFzZSByZXNwb25zZSBhYm92ZS5cclxuICAgICAgICAgICAgICAgIGVwLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgIGNsb3NlRW5kUG9pbnQoZXApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGlmIChlcC5zdGFydCkge1xyXG4gICAgICAgIGVwLnN0YXJ0KCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaXNNZXNzYWdlUG9ydChlbmRwb2ludCkge1xyXG4gICAgcmV0dXJuIGVuZHBvaW50LmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiTWVzc2FnZVBvcnRcIjtcclxufVxyXG5mdW5jdGlvbiBjbG9zZUVuZFBvaW50KGVuZHBvaW50KSB7XHJcbiAgICBpZiAoaXNNZXNzYWdlUG9ydChlbmRwb2ludCkpXHJcbiAgICAgICAgZW5kcG9pbnQuY2xvc2UoKTtcclxufVxyXG5mdW5jdGlvbiB3cmFwKGVwLCB0YXJnZXQpIHtcclxuICAgIHJldHVybiBjcmVhdGVQcm94eShlcCwgW10sIHRhcmdldCk7XHJcbn1cclxuZnVuY3Rpb24gdGhyb3dJZlByb3h5UmVsZWFzZWQoaXNSZWxlYXNlZCkge1xyXG4gICAgaWYgKGlzUmVsZWFzZWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcm94eSBoYXMgYmVlbiByZWxlYXNlZCBhbmQgaXMgbm90IHVzZWFibGVcIik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlUHJveHkoZXAsIHBhdGggPSBbXSwgdGFyZ2V0ID0gZnVuY3Rpb24gKCkgeyB9KSB7XHJcbiAgICBsZXQgaXNQcm94eVJlbGVhc2VkID0gZmFsc2U7XHJcbiAgICBjb25zdCBwcm94eSA9IG5ldyBQcm94eSh0YXJnZXQsIHtcclxuICAgICAgICBnZXQoX3RhcmdldCwgcHJvcCkge1xyXG4gICAgICAgICAgICB0aHJvd0lmUHJveHlSZWxlYXNlZChpc1Byb3h5UmVsZWFzZWQpO1xyXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gcmVsZWFzZVByb3h5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0UmVzcG9uc2VNZXNzYWdlKGVwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiUkVMRUFTRVwiIC8qIFJFTEVBU0UgKi8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IHBhdGgubWFwKChwKSA9PiBwLnRvU3RyaW5nKCkpLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZUVuZFBvaW50KGVwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNQcm94eVJlbGVhc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHByb3AgPT09IFwidGhlblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB0aGVuOiAoKSA9PiBwcm94eSB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHJlcXVlc3RSZXNwb25zZU1lc3NhZ2UoZXAsIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIkdFVFwiIC8qIEdFVCAqLyxcclxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBwYXRoLm1hcCgocCkgPT4gcC50b1N0cmluZygpKSxcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oZnJvbVdpcmVWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gci50aGVuLmJpbmQocik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVByb3h5KGVwLCBbLi4ucGF0aCwgcHJvcF0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0KF90YXJnZXQsIHByb3AsIHJhd1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRocm93SWZQcm94eVJlbGVhc2VkKGlzUHJveHlSZWxlYXNlZCk7XHJcbiAgICAgICAgICAgIC8vIEZJWE1FOiBFUzYgUHJveHkgSGFuZGxlciBgc2V0YCBtZXRob2RzIGFyZSBzdXBwb3NlZCB0byByZXR1cm4gYVxyXG4gICAgICAgICAgICAvLyBib29sZWFuLiBUbyBzaG93IGdvb2Qgd2lsbCwgd2UgcmV0dXJuIHRydWUgYXN5bmNocm9ub3VzbHkgwq9cXF8o44OEKV8vwq9cclxuICAgICAgICAgICAgY29uc3QgW3ZhbHVlLCB0cmFuc2ZlcmFibGVzXSA9IHRvV2lyZVZhbHVlKHJhd1ZhbHVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3RSZXNwb25zZU1lc3NhZ2UoZXAsIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiU0VUXCIgLyogU0VUICovLFxyXG4gICAgICAgICAgICAgICAgcGF0aDogWy4uLnBhdGgsIHByb3BdLm1hcCgocCkgPT4gcC50b1N0cmluZygpKSxcclxuICAgICAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgICAgICB9LCB0cmFuc2ZlcmFibGVzKS50aGVuKGZyb21XaXJlVmFsdWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXBwbHkoX3RhcmdldCwgX3RoaXNBcmcsIHJhd0FyZ3VtZW50TGlzdCkge1xyXG4gICAgICAgICAgICB0aHJvd0lmUHJveHlSZWxlYXNlZChpc1Byb3h5UmVsZWFzZWQpO1xyXG4gICAgICAgICAgICBjb25zdCBsYXN0ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAobGFzdCA9PT0gY3JlYXRlRW5kcG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0UmVzcG9uc2VNZXNzYWdlKGVwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJFTkRQT0lOVFwiIC8qIEVORFBPSU5UICovLFxyXG4gICAgICAgICAgICAgICAgfSkudGhlbihmcm9tV2lyZVZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBXZSBqdXN0IHByZXRlbmQgdGhhdCBgYmluZCgpYCBkaWRu4oCZdCBoYXBwZW4uXHJcbiAgICAgICAgICAgIGlmIChsYXN0ID09PSBcImJpbmRcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVByb3h5KGVwLCBwYXRoLnNsaWNlKDAsIC0xKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgW2FyZ3VtZW50TGlzdCwgdHJhbnNmZXJhYmxlc10gPSBwcm9jZXNzQXJndW1lbnRzKHJhd0FyZ3VtZW50TGlzdCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0UmVzcG9uc2VNZXNzYWdlKGVwLCB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcIkFQUExZXCIgLyogQVBQTFkgKi8sXHJcbiAgICAgICAgICAgICAgICBwYXRoOiBwYXRoLm1hcCgocCkgPT4gcC50b1N0cmluZygpKSxcclxuICAgICAgICAgICAgICAgIGFyZ3VtZW50TGlzdCxcclxuICAgICAgICAgICAgfSwgdHJhbnNmZXJhYmxlcykudGhlbihmcm9tV2lyZVZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnN0cnVjdChfdGFyZ2V0LCByYXdBcmd1bWVudExpc3QpIHtcclxuICAgICAgICAgICAgdGhyb3dJZlByb3h5UmVsZWFzZWQoaXNQcm94eVJlbGVhc2VkKTtcclxuICAgICAgICAgICAgY29uc3QgW2FyZ3VtZW50TGlzdCwgdHJhbnNmZXJhYmxlc10gPSBwcm9jZXNzQXJndW1lbnRzKHJhd0FyZ3VtZW50TGlzdCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0UmVzcG9uc2VNZXNzYWdlKGVwLCB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcIkNPTlNUUlVDVFwiIC8qIENPTlNUUlVDVCAqLyxcclxuICAgICAgICAgICAgICAgIHBhdGg6IHBhdGgubWFwKChwKSA9PiBwLnRvU3RyaW5nKCkpLFxyXG4gICAgICAgICAgICAgICAgYXJndW1lbnRMaXN0LFxyXG4gICAgICAgICAgICB9LCB0cmFuc2ZlcmFibGVzKS50aGVuKGZyb21XaXJlVmFsdWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBwcm94eTtcclxufVxyXG5mdW5jdGlvbiBteUZsYXQoYXJyKSB7XHJcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJyKTtcclxufVxyXG5mdW5jdGlvbiBwcm9jZXNzQXJndW1lbnRzKGFyZ3VtZW50TGlzdCkge1xyXG4gICAgY29uc3QgcHJvY2Vzc2VkID0gYXJndW1lbnRMaXN0Lm1hcCh0b1dpcmVWYWx1ZSk7XHJcbiAgICByZXR1cm4gW3Byb2Nlc3NlZC5tYXAoKHYpID0+IHZbMF0pLCBteUZsYXQocHJvY2Vzc2VkLm1hcCgodikgPT4gdlsxXSkpXTtcclxufVxyXG5jb25zdCB0cmFuc2ZlckNhY2hlID0gbmV3IFdlYWtNYXAoKTtcclxuZnVuY3Rpb24gdHJhbnNmZXIob2JqLCB0cmFuc2ZlcnMpIHtcclxuICAgIHRyYW5zZmVyQ2FjaGUuc2V0KG9iaiwgdHJhbnNmZXJzKTtcclxuICAgIHJldHVybiBvYmo7XHJcbn1cclxuZnVuY3Rpb24gcHJveHkob2JqKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmosIHsgW3Byb3h5TWFya2VyXTogdHJ1ZSB9KTtcclxufVxyXG5mdW5jdGlvbiB3aW5kb3dFbmRwb2ludCh3LCBjb250ZXh0ID0gc2VsZiwgdGFyZ2V0T3JpZ2luID0gXCIqXCIpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcG9zdE1lc3NhZ2U6IChtc2csIHRyYW5zZmVyYWJsZXMpID0+IHcucG9zdE1lc3NhZ2UobXNnLCB0YXJnZXRPcmlnaW4sIHRyYW5zZmVyYWJsZXMpLFxyXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGNvbnRleHQuYWRkRXZlbnRMaXN0ZW5lci5iaW5kKGNvbnRleHQpLFxyXG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGNvbnRleHQucmVtb3ZlRXZlbnRMaXN0ZW5lci5iaW5kKGNvbnRleHQpLFxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB0b1dpcmVWYWx1ZSh2YWx1ZSkge1xyXG4gICAgZm9yIChjb25zdCBbbmFtZSwgaGFuZGxlcl0gb2YgdHJhbnNmZXJIYW5kbGVycykge1xyXG4gICAgICAgIGlmIChoYW5kbGVyLmNhbkhhbmRsZSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgY29uc3QgW3NlcmlhbGl6ZWRWYWx1ZSwgdHJhbnNmZXJhYmxlc10gPSBoYW5kbGVyLnNlcmlhbGl6ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJIQU5ETEVSXCIgLyogSEFORExFUiAqLyxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZXJpYWxpemVkVmFsdWUsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmZXJhYmxlcyxcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdHlwZTogXCJSQVdcIiAvKiBSQVcgKi8sXHJcbiAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdHJhbnNmZXJDYWNoZS5nZXQodmFsdWUpIHx8IFtdLFxyXG4gICAgXTtcclxufVxyXG5mdW5jdGlvbiBmcm9tV2lyZVZhbHVlKHZhbHVlKSB7XHJcbiAgICBzd2l0Y2ggKHZhbHVlLnR5cGUpIHtcclxuICAgICAgICBjYXNlIFwiSEFORExFUlwiIC8qIEhBTkRMRVIgKi86XHJcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2ZlckhhbmRsZXJzLmdldCh2YWx1ZS5uYW1lKS5kZXNlcmlhbGl6ZSh2YWx1ZS52YWx1ZSk7XHJcbiAgICAgICAgY2FzZSBcIlJBV1wiIC8qIFJBVyAqLzpcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnZhbHVlO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlcXVlc3RSZXNwb25zZU1lc3NhZ2UoZXAsIG1zZywgdHJhbnNmZXJzKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICBjb25zdCBpZCA9IGdlbmVyYXRlVVVJRCgpO1xyXG4gICAgICAgIGVwLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGZ1bmN0aW9uIGwoZXYpIHtcclxuICAgICAgICAgICAgaWYgKCFldi5kYXRhIHx8ICFldi5kYXRhLmlkIHx8IGV2LmRhdGEuaWQgIT09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXAucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgbCk7XHJcbiAgICAgICAgICAgIHJlc29sdmUoZXYuZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGVwLnN0YXJ0KSB7XHJcbiAgICAgICAgICAgIGVwLnN0YXJ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVwLnBvc3RNZXNzYWdlKE9iamVjdC5hc3NpZ24oeyBpZCB9LCBtc2cpLCB0cmFuc2ZlcnMpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKCkge1xyXG4gICAgcmV0dXJuIG5ldyBBcnJheSg0KVxyXG4gICAgICAgIC5maWxsKDApXHJcbiAgICAgICAgLm1hcCgoKSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikudG9TdHJpbmcoMTYpKVxyXG4gICAgICAgIC5qb2luKFwiLVwiKTtcclxufVxuXG5leHBvcnQgeyBjcmVhdGVFbmRwb2ludCwgZXhwb3NlLCBwcm94eSwgcHJveHlNYXJrZXIsIHJlbGVhc2VQcm94eSwgdHJhbnNmZXIsIHRyYW5zZmVySGFuZGxlcnMsIHdpbmRvd0VuZHBvaW50LCB3cmFwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21saW5rLm1qcy5tYXBcbiIsIlxuaW1wb3J0IG1hcGJveGdsIGZyb20gJ21hcGJveC1nbCc7XG5pbXBvcnQgbWFwbGlicmVnbCBmcm9tICdtYXBsaWJyZS1nbCc7XG5cbnR5cGUgTWFwVHlwZSA9IG1hcGJveGdsLk1hcCB8IG1hcGxpYnJlZ2wuTWFwO1xuXG5mdW5jdGlvbiBtZXJjYXRvclhmcm9tTG5nKGxuZzogbnVtYmVyKSB7XG4gICAgcmV0dXJuICgxODAgKyBsbmcpIC8gMzYwO1xufVxuXG5mdW5jdGlvbiBtZXJjYXRvcllmcm9tTGF0KGxhdDogbnVtYmVyKSB7XG4gICAgcmV0dXJuICgxODAgLSAoMTgwIC8gTWF0aC5QSSAqIE1hdGgubG9nKE1hdGgudGFuKE1hdGguUEkgLyA0ICsgbGF0ICogTWF0aC5QSSAvIDM2MCkpKSkgLyAzNjA7XG59XG5cbi8qKlxuICogQSBgTG5nTGF0YCBvYmplY3QgcmVwcmVzZW50cyBhIGdpdmVuIGxvbmdpdHVkZSBhbmQgbGF0aXR1ZGUgY29vcmRpbmF0ZSwgbWVhc3VyZWQgaW4gZGVncmVlcy5cbiAqIFRoZXNlIGNvb3JkaW5hdGVzIGFyZSBiYXNlZCBvbiB0aGUgW1dHUzg0IChFUFNHOjQzMjYpIHN0YW5kYXJkXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Xb3JsZF9HZW9kZXRpY19TeXN0ZW0jV0dTODQpLlxuICpcbiAqIE1hcExpYnJlIEdMIHVzZXMgbG9uZ2l0dWRlLCBsYXRpdHVkZSBjb29yZGluYXRlIG9yZGVyIChhcyBvcHBvc2VkIHRvIGxhdGl0dWRlLCBsb25naXR1ZGUpIHRvIG1hdGNoIHRoZVxuICogW0dlb0pTT04gc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc5NDYpLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBsbmcgTG9uZ2l0dWRlLCBtZWFzdXJlZCBpbiBkZWdyZWVzLlxuICogQHBhcmFtIHtudW1iZXJ9IGxhdCBMYXRpdHVkZSwgbWVhc3VyZWQgaW4gZGVncmVlcy5cbiAqIEBleGFtcGxlXG4gKiB2YXIgbGwgPSBuZXcgTG5nTGF0KC0xMjMuOTc0OSwgNDAuNzczNik7XG4gKiBsbC5sbmc7IC8vID0gLTEyMy45NzQ5XG4gKi9cbiBjbGFzcyBMbmdMYXQge1xuICAgIGxuZzogbnVtYmVyO1xuICAgIGxhdDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IobG5nOiBudW1iZXIsIGxhdDogbnVtYmVyKSB7XG4gICAgICAgIGlmIChpc05hTihsbmcpIHx8IGlzTmFOKGxhdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBMbmdMYXQgb2JqZWN0OiAoJHtsbmd9LCAke2xhdH0pYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sbmcgPSArbG5nO1xuICAgICAgICB0aGlzLmxhdCA9ICtsYXQ7XG4gICAgICAgIGlmICh0aGlzLmxhdCA+IDkwIHx8IHRoaXMubGF0IDwgLTkwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgTG5nTGF0IGxhdGl0dWRlIHZhbHVlOiBtdXN0IGJlIGJldHdlZW4gLTkwIGFuZCA5MCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9NZXJjYXRvckNvb3JkKCkge1xuICAgICAgICByZXR1cm4ge3g6IG1lcmNhdG9yWGZyb21MbmcodGhpcy5sbmcpLCB5OiBtZXJjYXRvcllmcm9tTGF0KHRoaXMubGF0KX07XG4gICAgfVxufVxuXG5leHBvcnQge0xuZ0xhdH07XG5leHBvcnQgdHlwZSB7TWFwVHlwZX07IiwiXG5pbXBvcnQgeyBnZXRNaW5ab29tIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7IEJhcmJEaW1TcGVjLCBQb2x5bGluZVNwZWMsIExpbmVTcGVjIH0gZnJvbSBcIi4vQXV0dW1uVHlwZXNcIjtcblxuaW1wb3J0ICogYXMgQ29tbGluayBmcm9tICdjb21saW5rJztcbmltcG9ydCB7IEJpbGxib2FyZFNwZWMgfSBmcm9tIFwiLi9CaWxsYm9hcmRDb2xsZWN0aW9uXCI7XG5pbXBvcnQgeyBMbmdMYXQgfSBmcm9tIFwiLi9NYXBcIjtcblxuZnVuY3Rpb24gbWFrZUJhcmJFbGVtZW50cyhmaWVsZF9sYXRzOiBGbG9hdDMyQXJyYXksIGZpZWxkX2xvbnM6IEZsb2F0MzJBcnJheSwgZmllbGRfdTogRmxvYXQzMkFycmF5LCBmaWVsZF92OiBGbG9hdDMyQXJyYXksIHRoaW5fZmFjX2Jhc2U6IG51bWJlciwgXG4gICAgQkFSQl9ESU1TOiBCYXJiRGltU3BlYykgOiBCaWxsYm9hcmRTcGVjIHtcbiAgICAgICAgXG4gICAgY29uc3QgQkFSQl9XSURUSCA9IEJBUkJfRElNU1snQkFSQl9XSURUSCddO1xuICAgIGNvbnN0IEJBUkJfVEVYX1dJRFRIID0gQkFSQl9ESU1TWydCQVJCX1RFWF9XSURUSCddO1xuICAgIGNvbnN0IEJBUkJfSEVJR0hUID0gQkFSQl9ESU1TWydCQVJCX0hFSUdIVCddO1xuICAgIGNvbnN0IEJBUkJfVEVYX0hFSUdIVCA9IEJBUkJfRElNU1snQkFSQl9URVhfSEVJR0hUJ107XG4gICAgY29uc3QgQkFSQl9URVhfV1JBUCA9IEJBUkJfRElNU1snQkFSQl9URVhfV1JBUCddO1xuXG4gICAgY29uc3Qgbl9sYXRzID0gZmllbGRfbGF0cy5sZW5ndGg7XG4gICAgY29uc3Qgbl9sb25zID0gZmllbGRfbG9ucy5sZW5ndGg7XG4gICAgY29uc3Qgbl9wdHNfcGVyX3BvbHkgPSA2O1xuICAgIGNvbnN0IG5fY29vcmRzX3Blcl9wdF9wdHMgPSAzO1xuICAgIGNvbnN0IG5fY29vcmRzX3Blcl9wdF90YyA9IDI7XG5cbiAgICBjb25zdCBuX2VsZW1zX3B0cyA9IG5fbGF0cyAqIG5fbG9ucyAqIG5fcHRzX3Blcl9wb2x5ICogbl9jb29yZHNfcGVyX3B0X3B0cztcbiAgICBjb25zdCBuX2VsZW1zX3RjID0gbl9sYXRzICogbl9sb25zICogbl9wdHNfcGVyX3BvbHkgKiBuX2Nvb3Jkc19wZXJfcHRfdGM7XG5cbiAgICBsZXQgcHRzID0gbmV3IEZsb2F0MzJBcnJheShuX2VsZW1zX3B0cyk7XG4gICAgbGV0IG9mZnNldCA9IG5ldyBGbG9hdDMyQXJyYXkobl9lbGVtc190Yyk7XG4gICAgbGV0IHRleF9jb29yZHMgPSBuZXcgRmxvYXQzMkFycmF5KG5fZWxlbXNfdGMpO1xuXG4gICAgbGV0IGlzdGFydF9wdHMgPSAwO1xuICAgIGxldCBpc3RhcnRfdGMgPSAwO1xuXG4gICAgY29uc3QgYmFyYl93aWR0aF9mcmFjID0gQkFSQl9XSURUSCAvIEJBUkJfVEVYX1dJRFRIO1xuICAgIGNvbnN0IGJhcmJfaGVpZ2h0X2ZyYWMgPSBCQVJCX0hFSUdIVCAvIEJBUkJfVEVYX0hFSUdIVDtcblxuICAgIGZpZWxkX2xhdHMuZm9yRWFjaCgobGF0LCBpbGF0KSA9PiB7XG4gICAgICAgIGNvbnN0IGZsaXBfYmFyYiA9IGxhdCA8IDA7XG4gICAgICAgIGZpZWxkX2xvbnMuZm9yRWFjaCgobG9uLCBpbG9uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB6b29tID0gZ2V0TWluWm9vbShpbGF0LCBpbG9uLCB0aGluX2ZhY19iYXNlKTtcblxuICAgICAgICAgICAgY29uc3QgdSA9IGZpZWxkX3VbaWxhdCAqIG5fbG9ucyArIGlsb25dO1xuICAgICAgICAgICAgY29uc3QgdiA9IGZpZWxkX3ZbaWxhdCAqIG5fbG9ucyArIGlsb25dO1xuICAgICAgICAgICAgY29uc3QgYmFyYl9tYWcgPSBNYXRoLnJvdW5kKE1hdGguaHlwb3QodSwgdikgLyA1KSAqIDU7XG4gICAgICAgICAgICBjb25zdCBiYXJiX2FuZyA9IDkwIC0gTWF0aC5hdGFuMigtdiwgLXUpICogMTgwIC8gTWF0aC5QSTtcblxuICAgICAgICAgICAgY29uc3QgcHRfbGwgPSBuZXcgTG5nTGF0KGxvbiwgbGF0KS50b01lcmNhdG9yQ29vcmQoKTtcblxuICAgICAgICAgICAgLy8gVGhlc2UgY29udGFpbiBhIGRlZ2VuZXJhdGUgdHJpYW5nbGUgb24gZWl0aGVyIGVuZCB0byBpbWl0YXRlIHByaW1pdGl2ZSByZXN0YXJ0aW5nXG4gICAgICAgICAgICAvLyAgKHNlZSBodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2cvd2ViZ2wtZGV2LWxpc3QvYy9LTGZpd2o0amF4MC9tL2NLaWV6cmhSejhNSj9wbGk9MSlcbiAgICAgICAgICAgIGZvciAobGV0IGljcm5yID0gMDsgaWNybnIgPCBuX3B0c19wZXJfcG9seTsgaWNybnIrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdHVhbF9pY3JuciA9IE1hdGgubWF4KDAsIE1hdGgubWluKGljcm5yIC0gMSwgMykpO1xuXG4gICAgICAgICAgICAgICAgcHRzW2lzdGFydF9wdHMgKyBpY3JuciAqIG5fY29vcmRzX3Blcl9wdF9wdHMgKyAwXSA9IHB0X2xsLng7IFxuICAgICAgICAgICAgICAgIHB0c1tpc3RhcnRfcHRzICsgaWNybnIgKiBuX2Nvb3Jkc19wZXJfcHRfcHRzICsgMV0gPSBwdF9sbC55OyBcbiAgICAgICAgICAgICAgICBwdHNbaXN0YXJ0X3B0cyArIGljcm5yICogbl9jb29yZHNfcGVyX3B0X3B0cyArIDJdID0gem9vbTtcbiAgICAgICAgICAgICAgICBvZmZzZXRbaXN0YXJ0X3RjICsgaWNybnIgKiBuX2Nvb3Jkc19wZXJfcHRfdGMgKyAwXSA9IGFjdHVhbF9pY3JucjsgXG4gICAgICAgICAgICAgICAgb2Zmc2V0W2lzdGFydF90YyArIGljcm5yICogbl9jb29yZHNfcGVyX3B0X3RjICsgMV0gPSBiYXJiX2FuZztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgaV9iYXJiID0gKGJhcmJfbWFnICUgQkFSQl9URVhfV1JBUCkgLyA1O1xuICAgICAgICAgICAgY29uc3Qgal9iYXJiID0gTWF0aC5mbG9vcihiYXJiX21hZyAvIEJBUkJfVEVYX1dSQVApO1xuXG4gICAgICAgICAgICBpZiAoZmxpcF9iYXJiKSB7XG4gICAgICAgICAgICAgICAgdGV4X2Nvb3Jkc1tpc3RhcnRfdGMgKyAwIF0gPSAoaV9iYXJiICsgMSkgKiBiYXJiX3dpZHRoX2ZyYWM7IHRleF9jb29yZHNbaXN0YXJ0X3RjICsgMSBdID0gIGpfYmFyYiAgICAgICogYmFyYl9oZWlnaHRfZnJhYztcbiAgICAgICAgICAgICAgICB0ZXhfY29vcmRzW2lzdGFydF90YyArIDIgXSA9IChpX2JhcmIgKyAxKSAqIGJhcmJfd2lkdGhfZnJhYzsgdGV4X2Nvb3Jkc1tpc3RhcnRfdGMgKyAzIF0gPSAgal9iYXJiICAgICAgKiBiYXJiX2hlaWdodF9mcmFjO1xuICAgICAgICAgICAgICAgIHRleF9jb29yZHNbaXN0YXJ0X3RjICsgNCBdID0gIGlfYmFyYiAgICAgICogYmFyYl93aWR0aF9mcmFjOyB0ZXhfY29vcmRzW2lzdGFydF90YyArIDUgXSA9ICBqX2JhcmIgICAgICAqIGJhcmJfaGVpZ2h0X2ZyYWM7XG4gICAgICAgICAgICAgICAgdGV4X2Nvb3Jkc1tpc3RhcnRfdGMgKyA2IF0gPSAoaV9iYXJiICsgMSkgKiBiYXJiX3dpZHRoX2ZyYWM7IHRleF9jb29yZHNbaXN0YXJ0X3RjICsgNyBdID0gKGpfYmFyYiArIDEpICogYmFyYl9oZWlnaHRfZnJhYztcbiAgICAgICAgICAgICAgICB0ZXhfY29vcmRzW2lzdGFydF90YyArIDggXSA9ICBpX2JhcmIgICAgICAqIGJhcmJfd2lkdGhfZnJhYzsgdGV4X2Nvb3Jkc1tpc3RhcnRfdGMgKyA5IF0gPSAoal9iYXJiICsgMSkgKiBiYXJiX2hlaWdodF9mcmFjO1xuICAgICAgICAgICAgICAgIHRleF9jb29yZHNbaXN0YXJ0X3RjICsgMTBdID0gIGlfYmFyYiAgICAgICogYmFyYl93aWR0aF9mcmFjOyB0ZXhfY29vcmRzW2lzdGFydF90YyArIDExXSA9IChqX2JhcmIgKyAxKSAqIGJhcmJfaGVpZ2h0X2ZyYWM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZXhfY29vcmRzW2lzdGFydF90YyArIDAgXSA9ICBpX2JhcmIgICAgICAqIGJhcmJfd2lkdGhfZnJhYzsgdGV4X2Nvb3Jkc1tpc3RhcnRfdGMgKyAxIF0gPSAgal9iYXJiICAgICAgKiBiYXJiX2hlaWdodF9mcmFjO1xuICAgICAgICAgICAgICAgIHRleF9jb29yZHNbaXN0YXJ0X3RjICsgMiBdID0gIGlfYmFyYiAgICAgICogYmFyYl93aWR0aF9mcmFjOyB0ZXhfY29vcmRzW2lzdGFydF90YyArIDMgXSA9ICBqX2JhcmIgICAgICAqIGJhcmJfaGVpZ2h0X2ZyYWM7XG4gICAgICAgICAgICAgICAgdGV4X2Nvb3Jkc1tpc3RhcnRfdGMgKyA0IF0gPSAoaV9iYXJiICsgMSkgKiBiYXJiX3dpZHRoX2ZyYWM7IHRleF9jb29yZHNbaXN0YXJ0X3RjICsgNSBdID0gIGpfYmFyYiAgICAgICogYmFyYl9oZWlnaHRfZnJhYztcbiAgICAgICAgICAgICAgICB0ZXhfY29vcmRzW2lzdGFydF90YyArIDYgXSA9ICBpX2JhcmIgICAgICAqIGJhcmJfd2lkdGhfZnJhYzsgdGV4X2Nvb3Jkc1tpc3RhcnRfdGMgKyA3IF0gPSAoal9iYXJiICsgMSkgKiBiYXJiX2hlaWdodF9mcmFjO1xuICAgICAgICAgICAgICAgIHRleF9jb29yZHNbaXN0YXJ0X3RjICsgOCBdID0gKGlfYmFyYiArIDEpICogYmFyYl93aWR0aF9mcmFjOyB0ZXhfY29vcmRzW2lzdGFydF90YyArIDkgXSA9IChqX2JhcmIgKyAxKSAqIGJhcmJfaGVpZ2h0X2ZyYWM7XG4gICAgICAgICAgICAgICAgdGV4X2Nvb3Jkc1tpc3RhcnRfdGMgKyAxMF0gPSAoaV9iYXJiICsgMSkgKiBiYXJiX3dpZHRoX2ZyYWM7IHRleF9jb29yZHNbaXN0YXJ0X3RjICsgMTFdID0gKGpfYmFyYiArIDEpICogYmFyYl9oZWlnaHRfZnJhYztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXN0YXJ0X3B0cyArPSAobl9wdHNfcGVyX3BvbHkgKiBuX2Nvb3Jkc19wZXJfcHRfcHRzKTtcbiAgICAgICAgICAgIGlzdGFydF90YyArPSAobl9wdHNfcGVyX3BvbHkgKiBuX2Nvb3Jkc19wZXJfcHRfdGMpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7J3B0cyc6IHB0cywgJ29mZnNldCc6IG9mZnNldCwgJ3RleF9jb29yZHMnOiB0ZXhfY29vcmRzfTtcbn1cblxuZnVuY3Rpb24gbWFrZURvbWFpblZlcnRpY2VzQW5kVGV4Q29vcmRzKGZpZWxkX2xhdHM6IEZsb2F0MzJBcnJheSwgZmllbGRfbG9uczogRmxvYXQzMkFycmF5LCB0ZXhfd2lkdGg6IG51bWJlciwgdGV4X2hlaWdodDogbnVtYmVyKSB7XG4gICAgY29uc3QgbmkgPSBmaWVsZF9sb25zLmxlbmd0aDtcbiAgICBjb25zdCBsYmkgPSAwLCB1YmkgPSBuaSAtIDE7XG5cbiAgICBjb25zdCBjb3JuZXJzID0gWy4uLmZpZWxkX2xhdHNdLm1hcChsYXQgPT4ge1xuICAgICAgICByZXR1cm4gW3snbG5nJzogZmllbGRfbG9uc1tsYmldLCAnbGF0JzogbGF0fSxcbiAgICAgICAgICAgICAgICB7J2xuZyc6IGZpZWxkX2xvbnNbdWJpXSwgJ2xhdCc6IGxhdH1dXG4gICAgfSkuZmxhdCgpLm1hcChwdCA9PiBuZXcgTG5nTGF0KHB0LmxuZywgcHQubGF0KS50b01lcmNhdG9yQ29vcmQoKSk7XG4gICAgY29uc3QgdmVydHMgPSBjb3JuZXJzLm1hcChjZCA9PiBbY2QueCwgY2QueV0pLmZsYXQoKTtcblxuICAgIGNvbnN0IHRleF9jb29yZHMgPSBbLi4uZmllbGRfbGF0c10ubWFwKChsYXQsIGlsYXQpID0+IHtcbiAgICAgICAgcmV0dXJuIFt7J3MnOiAoaWxhdCArIDAuNSkgLyB0ZXhfaGVpZ2h0LCAncic6IDAuNTA1IC8gKHRleF93aWR0aCArIDEuMDcpfSwgXG4gICAgICAgICAgICAgICAgeydzJzogKGlsYXQgKyAwLjUpIC8gdGV4X2hlaWdodCwgJ3InOiAobmkgKyAwLjUwNSkgLyAodGV4X3dpZHRoICsgMS4wNyl9XTtcbiAgICB9KS5mbGF0KCkubWFwKHRjID0+IFt0Y1snciddLCB0Y1sncyddXSkuZmxhdCgpO1xuXG4gICAgcmV0dXJuIHsndmVydGljZXMnOiBuZXcgRmxvYXQzMkFycmF5KHZlcnRzKSwgJ3RleF9jb29yZHMnOiBuZXcgRmxvYXQzMkFycmF5KHRleF9jb29yZHMpfVxufVxuXG4vKlxuZnVuY3Rpb24gbWFrZVBvbHlsaW5lc01pdGVyKGxpbmVzKSB7XG4gICAgY29uc3Qgbl9wb2ludHNfcGVyX3ZlcnQgPSBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMobGluZXNbMF0pLm1hcCgoW2ssIHZdKSA9PiB7XG4gICAgICAgIGxldCBuX3ZlcnRzO1xuICAgICAgICBpZiAodi5sZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbl92ZXJ0cyA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuX3ZlcnRzID0gayA9PSAndmVydHMnID8gdlswXS5sZW5ndGggOiB2Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2ssIG5fdmVydHNdO1xuICAgIH0pKTtcbiAgICBuX3BvaW50c19wZXJfdmVydFsnZXh0cnVzaW9uJ10gPSAyO1xuXG4gICAgY29uc3Qgbl92ZXJ0cyA9IGxpbmVzLm1hcChsID0+IGxbJ3ZlcnRzJ10ubGVuZ3RoKS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKTtcbiAgICBjb25zdCBhcnlfbGVucyA9IE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhuX3BvaW50c19wZXJfdmVydCkubWFwKChbaywgbnBwdl0pID0+IFtrLCAobl92ZXJ0cyAqIDIgKyBsaW5lcy5sZW5ndGggKiAyKSAqIG5wcHZdKSk7XG5cbiAgICBsZXQgcmV0ID0gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGFyeV9sZW5zKS5tYXAoKFtrLCB2XSkgPT4gW2ssIG5ldyBGbG9hdDMyQXJyYXkodildKSk7XG5cbiAgICBsZXQgaWxucyA9IE9iamVjdC5mcm9tRW50cmllcyhPYmplY3Qua2V5cyhhcnlfbGVucykubWFwKGsgPT4gW2ssIDBdKSk7XG5cbiAgICBjb25zdCBpc19jd193aW5kaW5nID0gKHB0X3ByZXYsIHB0X3RoaXMsIHB0X25leHQpID0+IHtcbiAgICAgICAgY29uc3Qgd2luZGluZyA9IChwdF90aGlzWzBdIC0gcHRfcHJldlswXSkgKiAocHRfdGhpc1sxXSArIHB0X3ByZXZbMV0pIFxuICAgICAgICAgICAgICAgICAgICAgICsgKHB0X25leHRbMF0gLSBwdF90aGlzWzBdKSAqIChwdF9uZXh0WzFdICsgcHRfdGhpc1sxXSkgXG4gICAgICAgICAgICAgICAgICAgICAgKyAocHRfcHJldlswXSAtIHB0X25leHRbMF0pICogKHB0X3ByZXZbMV0gKyBwdF9uZXh0WzFdKTtcblxuICAgICAgICByZXR1cm4gd2luZGluZyA+IDA7XG4gICAgfVxuXG4gICAgY29uc3QgY2FsY3VsYXRlX2V4dHJ1c2lvbiA9IChwdF9wcmV2LCBwdF90aGlzLCBwdF9uZXh0KSA9PiB7XG4gICAgICAgIGxldCBsaW5lX3ZlY194X3ByZXYsIGxpbmVfdmVjX3lfcHJldiwgbGluZV92ZWNfbWFnX3ByZXYsIFxuICAgICAgICAgICAgbGluZV92ZWNfeF9uZXh0LCBsaW5lX3ZlY195X25leHQsIGxpbmVfdmVjX21hZ19uZXh0O1xuICAgICAgICBsZXQgZXh0X3gsIGV4dF95O1xuXG4gICAgICAgIGlmIChwdF9wcmV2ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBsaW5lX3ZlY194X3ByZXYgPSBwdF90aGlzWzBdIC0gcHRfcHJldlswXTtcbiAgICAgICAgICAgIGxpbmVfdmVjX3lfcHJldiA9IHB0X3RoaXNbMV0gLSBwdF9wcmV2WzFdO1xuICAgICAgICAgICAgbGluZV92ZWNfbWFnX3ByZXYgPSBNYXRoLmh5cG90KGxpbmVfdmVjX3hfcHJldiwgbGluZV92ZWNfeV9wcmV2KTtcbiAgICAgICAgICAgIGxpbmVfdmVjX3hfcHJldiAvPSBsaW5lX3ZlY19tYWdfcHJldjtcbiAgICAgICAgICAgIGxpbmVfdmVjX3lfcHJldiAvPSBsaW5lX3ZlY19tYWdfcHJldjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwdF9uZXh0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBsaW5lX3ZlY194X25leHQgPSBwdF9uZXh0WzBdIC0gcHRfdGhpc1swXTtcbiAgICAgICAgICAgIGxpbmVfdmVjX3lfbmV4dCA9IHB0X25leHRbMV0gLSBwdF90aGlzWzFdO1xuICAgICAgICAgICAgbGluZV92ZWNfbWFnX25leHQgPSBNYXRoLmh5cG90KGxpbmVfdmVjX3hfbmV4dCwgbGluZV92ZWNfeV9uZXh0KTtcbiAgICAgICAgICAgIGxpbmVfdmVjX3hfbmV4dCAvPSBsaW5lX3ZlY19tYWdfbmV4dDtcbiAgICAgICAgICAgIGxpbmVfdmVjX3lfbmV4dCAvPSBsaW5lX3ZlY19tYWdfbmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwdF9wcmV2ID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBGaXJzdCBwb2ludCBpbiB0aGUgbGluZSBnZXRzIGp1c3QgdGhlIG5vcm1hbCBmb3IgdGhlIGZpcnN0IHNlZ21lbnRcbiAgICAgICAgICAgIGV4dF94ID0gbGluZV92ZWNfeV9uZXh0OyBleHRfeSA9IC1saW5lX3ZlY194X25leHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHRfdGhpcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gTGFzdCBwb2ludCBpbiB0aGUgbGluZSBnZXRzIGp1c3QgdGhlIG5vcm1hbCBmb3IgdGhlIGxhc3Qgc2VnbWVudFxuICAgICAgICAgICAgZXh0X3ggPSBsaW5lX3ZlY195X3ByZXY7IGV4dF95ID0gLWxpbmVfdmVjX3hfcHJldjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIE1pdGVyIGpvaW46IGNvbXB1dGUgdGhlIGV4dHJ1c2lvbiB2ZWN0b3IgaGFsZndheSBiZXR3ZWVuIHRoZSBuZXh0IGFuZCBwcmV2aW91cyBub3JtYWxcbiAgICAgICAgICAgIGNvbnN0IGRvdCA9IGxpbmVfdmVjX3hfcHJldiAqIGxpbmVfdmVjX3hfbmV4dCArIGxpbmVfdmVjX3lfcHJldiAqIGxpbmVfdmVjX3lfbmV4dDtcbiAgICAgICAgICAgIGNvbnN0IGV4dF9mYWMgPSBNYXRoLnNxcnQoKDEgLSBkb3QpIC8gKDEgKyBkb3QpKTtcbiAgICAgICAgICAgIGNvbnN0IHNpZ24gPSBpc19jd193aW5kaW5nKHB0X3ByZXYsIHB0X3RoaXMsIHB0X3RoaXMpID8gLTEgOiAxO1xuICAgICAgICAgICAgZXh0X3ggPSBsaW5lX3ZlY195X3ByZXYgICAgICAgICAgICAgICAgICArIHNpZ24gKiBsaW5lX3ZlY194X3ByZXYgKiBleHRfZmFjO1xuICAgICAgICAgICAgZXh0X3kgPSBzaWduICogbGluZV92ZWNfeV9wcmV2ICogZXh0X2ZhYyAtIGxpbmVfdmVjX3hfcHJldjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbZXh0X3gsIGV4dF95XTtcbiAgICB9XG5cbiAgICBsaW5lcy5mb3JFYWNoKGxpbmUgPT4ge1xuICAgICAgICBjb25zdCB2ZXJ0cyA9IGxpbmVbJ3ZlcnRzJ107XG4gICAgICAgIGxldCBleHRfeCwgZXh0X3k7XG5cbiAgICAgICAgbGV0IGl2dCA9IDA7XG4gICAgICAgIHJldFsndmVydHMnXVtpbG5zWyd2ZXJ0cyddXSA9IHZlcnRzW2l2dF1bMF07IHJldFsndmVydHMnXVtpbG5zWyd2ZXJ0cyddICsgMV0gPSB2ZXJ0c1tpdnRdWzFdO1xuXG4gICAgICAgIFtleHRfeCwgZXh0X3ldID0gY2FsY3VsYXRlX2V4dHJ1c2lvbihudWxsLCB2ZXJ0c1tpdnRdLCB2ZXJ0c1tpdnQgKyAxXSk7XG4gICAgICAgIHJldFsnZXh0cnVzaW9uJ11baWxuc1snZXh0cnVzaW9uJ11dID0gZXh0X3g7IHJldFsnZXh0cnVzaW9uJ11baWxuc1snZXh0cnVzaW9uJ10gKyAxXSA9IGV4dF95O1xuXG4gICAgICAgIGZvciAoaXZ0ID0gMDsgaXZ0IDwgdmVydHMubGVuZ3RoOyBpdnQrKykge1xuICAgICAgICAgICAgY29uc3QgYXJ5X2l2dCA9IGlsbnNbJ3ZlcnRzJ10gKyAyICogKDIgKiBpdnQgKyAxKTtcbiAgICAgICAgICAgIHJldFsndmVydHMnXVthcnlfaXZ0ICsgMF0gPSB2ZXJ0c1tpdnRdWzBdOyByZXRbJ3ZlcnRzJ11bYXJ5X2l2dCArIDFdID0gdmVydHNbaXZ0XVsxXTtcbiAgICAgICAgICAgIHJldFsndmVydHMnXVthcnlfaXZ0ICsgMl0gPSB2ZXJ0c1tpdnRdWzBdOyByZXRbJ3ZlcnRzJ11bYXJ5X2l2dCArIDNdID0gdmVydHNbaXZ0XVsxXTtcblxuICAgICAgICAgICAgaWYgKGl2dCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgW2V4dF94LCBleHRfeV0gPSBjYWxjdWxhdGVfZXh0cnVzaW9uKG51bGwsIHZlcnRzW2l2dF0sIHZlcnRzW2l2dCArIDFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGl2dCA9PSB2ZXJ0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgW2V4dF94LCBleHRfeV0gPSBjYWxjdWxhdGVfZXh0cnVzaW9uKHZlcnRzW2l2dCAtIDFdLCB2ZXJ0c1tpdnRdLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIFtleHRfeCwgZXh0X3ldID0gY2FsY3VsYXRlX2V4dHJ1c2lvbih2ZXJ0c1tpdnQgLSAxXSwgdmVydHNbaXZ0XSwgdmVydHNbaXZ0ICsgMV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXRbJ2V4dHJ1c2lvbiddW2FyeV9pdnQgKyAwXSA9ICBleHRfeDsgcmV0WydleHRydXNpb24nXVthcnlfaXZ0ICsgMV0gPSAgZXh0X3k7XG4gICAgICAgICAgICByZXRbJ2V4dHJ1c2lvbiddW2FyeV9pdnQgKyAyXSA9IC1leHRfeDsgcmV0WydleHRydXNpb24nXVthcnlfaXZ0ICsgM10gPSAtZXh0X3k7XG4gICAgICAgIH1cblxuICAgICAgICBpdnQgPSB2ZXJ0cy5sZW5ndGggLSAxO1xuICAgICAgICByZXRbJ3ZlcnRzJ11baWxuc1sndmVydHMnXSArIDIgKiAoMiAqIGl2dCArIDEpICsgNF0gPSB2ZXJ0c1tpdnRdWzBdOyBcbiAgICAgICAgcmV0Wyd2ZXJ0cyddW2lsbnNbJ3ZlcnRzJ10gKyAyICogKDIgKiBpdnQgKyAxKSArIDVdID0gdmVydHNbaXZ0XVsxXTtcbiAgICAgICAgXG4gICAgICAgIFtleHRfeCwgZXh0X3ldID0gY2FsY3VsYXRlX2V4dHJ1c2lvbih2ZXJ0c1tpdnQgLSAxXSwgdmVydHNbaXZ0XSwgbnVsbCk7XG5cbiAgICAgICAgcmV0WydleHRydXNpb24nXVtpbG5zWydleHRydXNpb24nXSArIDIgKiAoMiAqIGl2dCArIDEpICsgNF0gPSAtZXh0X3g7IFxuICAgICAgICByZXRbJ2V4dHJ1c2lvbiddW2lsbnNbJ2V4dHJ1c2lvbiddICsgMiAqICgyICogaXZ0ICsgMSkgKyA1XSA9IC1leHRfeTtcblxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gcmV0KSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09ICd2ZXJ0cycgfHwga2V5ID09ICdleHRydXNpb24nKSBjb250aW51ZTtcblxuICAgICAgICAgICAgZm9yIChpdnQgPSAwOyBpdnQgPCAodmVydHMubGVuZ3RoICogMiArIDIpICogbl9wb2ludHNfcGVyX3ZlcnRba2V5XTsgaXZ0ICs9IG5fcG9pbnRzX3Blcl92ZXJ0W2tleV0pIHtcbiAgICAgICAgICAgICAgICBpZiAobGluZVtrZXldLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVba2V5XS5mb3JFYWNoKChjZCwgaWNkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXRba2V5XVtpbG5zW2tleV0gKyBpdnQgKyBpY2RdID0gY2Q7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXRba2V5XVtpbG5zW2tleV0gKyBpdnRdID0gbGluZVtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5rZXlzKGlsbnMpLmZvckVhY2goayA9PiB7XG4gICAgICAgICAgICBpbG5zW2tdICs9ICh2ZXJ0cy5sZW5ndGggKiAyICsgMikgKiBuX3BvaW50c19wZXJfdmVydFtrXTtcbiAgICAgICAgfSlcbiAgICB9KVxuXG4gICAgcmV0dXJuIHJldDtcbn1cbiovXG5cbmZ1bmN0aW9uIG1ha2VQb2x5bGluZXMobGluZXM6IExpbmVTcGVjW10pIDogUG9seWxpbmVTcGVjIHtcbiAgICBjb25zdCBuX3BvaW50c19wZXJfdmVydCA9IE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhsaW5lc1swXSkubWFwKChbaywgdl0pID0+IHtcbiAgICAgICAgbGV0IG5fdmVydHM6IG51bWJlcjtcbiAgICAgICAgaWYgKHYubGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5fdmVydHMgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZbMF0ubGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5fdmVydHMgPSB2Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5fdmVydHMgPSB2WzBdLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2ssIG5fdmVydHNdO1xuICAgIH0pKTtcbiAgICBuX3BvaW50c19wZXJfdmVydFsnZXh0cnVzaW9uJ10gPSAyO1xuXG4gICAgY29uc3Qgbl92ZXJ0cyA9IGxpbmVzLm1hcChsID0+IGxbJ3ZlcnRzJ10ubGVuZ3RoKS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKTtcbiAgICBjb25zdCBuX291dF92ZXJ0cyA9IChuX3ZlcnRzIC0gbGluZXMubGVuZ3RoKSAqIDY7XG4gICAgY29uc3QgYXJ5X2xlbnMgPSBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMobl9wb2ludHNfcGVyX3ZlcnQpLm1hcCgoW2ssIG5wcHZdKSA9PiBbaywgbl9vdXRfdmVydHMgKiBucHB2XSkpO1xuXG4gICAgbGV0IHJldDogUG9seWxpbmVTcGVjID0ge1xuICAgICAgICAndmVydHMnOiBuZXcgRmxvYXQzMkFycmF5KGFyeV9sZW5zWyd2ZXJ0cyddKSxcbiAgICAgICAgJ29yaWdpbic6IG5ldyBGbG9hdDMyQXJyYXkoYXJ5X2xlbnNbJ29yaWdpbiddKSxcbiAgICAgICAgJ2V4dHJ1c2lvbic6IG5ldyBGbG9hdDMyQXJyYXkoYXJ5X2xlbnNbJ2V4dHJ1c2lvbiddKSxcbiAgICAgICAgJ3pvb20nOiBuZXcgRmxvYXQzMkFycmF5KGFyeV9sZW5zWyd6b29tJ10pLFxuICAgICAgICAndGV4Y29vcmRzJzogbmV3IEZsb2F0MzJBcnJheShhcnlfbGVuc1sndGV4Y29vcmRzJ10pLFxuICAgIH1cblxuICAgIGxldCBpbG5zID0gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5rZXlzKGFyeV9sZW5zKS5tYXAoayA9PiBbaywgMF0pKTtcblxuICAgIGNvbnN0IGNvbXB1dGVfbm9ybWFsX3ZlYyA9IChwdDE6IFtudW1iZXIsIG51bWJlcl0sIHB0MjogW251bWJlciwgbnVtYmVyXSkgPT4ge1xuICAgICAgICBjb25zdCBsaW5lX3ZlY194ID0gcHQyWzBdIC0gcHQxWzBdO1xuICAgICAgICBjb25zdCBsaW5lX3ZlY195ID0gcHQyWzFdIC0gcHQxWzFdO1xuICAgICAgICBjb25zdCBsaW5lX3ZlY19tYWcgPSBNYXRoLmh5cG90KGxpbmVfdmVjX3gsIGxpbmVfdmVjX3kpO1xuXG4gICAgICAgIHJldHVybiBbbGluZV92ZWNfeSAvIGxpbmVfdmVjX21hZywgLWxpbmVfdmVjX3ggLyBsaW5lX3ZlY19tYWddO1xuICAgIH1cblxuICAgIGxpbmVzLmZvckVhY2gobGluZSA9PiB7XG4gICAgICAgIGNvbnN0IHZlcnRzID0gbGluZVsndmVydHMnXTtcbiAgICAgICAgY29uc3QgdGV4Y29vcmRzID0gbGluZVsndGV4Y29vcmRzJ107XG5cbiAgICAgICAgbGV0IGFyeV9pdnQgPSBpbG5zWyd2ZXJ0cyddO1xuICAgICAgICBsZXQgcHRfcHJldjogW251bWJlciwgbnVtYmVyXSwgcHRfdGhpcyA9IHZlcnRzWzBdLCBwdF9uZXh0ID0gdmVydHNbMV07XG4gICAgICAgIGxldCB0Y19wcmV2OiBbbnVtYmVyLCBudW1iZXJdLCB0Y190aGlzID0gdGV4Y29vcmRzWzBdLCB0Y19uZXh0ID0gdGV4Y29vcmRzWzFdO1xuICAgICAgICBsZXQgW2V4dF94LCBleHRfeV0gPSBjb21wdXRlX25vcm1hbF92ZWMocHRfdGhpcywgcHRfbmV4dCk7XG5cbiAgICAgICAgcmV0Wyd2ZXJ0cyddW2FyeV9pdnQgKyAwXSA9IHB0X3RoaXNbMF07IHJldFsndmVydHMnXVthcnlfaXZ0ICsgMV0gPSBwdF90aGlzWzFdO1xuICAgICAgICByZXRbJ3RleGNvb3JkcyddW2FyeV9pdnQgKyAwXSA9IHRjX3RoaXNbMF07IHJldFsndGV4Y29vcmRzJ11bYXJ5X2l2dCArIDFdID0gdGNfdGhpc1sxXTtcbiAgICAgICAgcmV0WydleHRydXNpb24nXVthcnlfaXZ0ICsgMF0gPSBleHRfeDsgcmV0WydleHRydXNpb24nXVthcnlfaXZ0ICsgMV0gPSBleHRfeTtcblxuICAgICAgICBmb3IgKGxldCBpdnQgPSAxOyBpdnQgPCB2ZXJ0cy5sZW5ndGg7IGl2dCsrKSB7XG4gICAgICAgICAgICBwdF90aGlzID0gdmVydHNbaXZ0XTsgcHRfcHJldiA9IHZlcnRzW2l2dCAtIDFdO1xuICAgICAgICAgICAgdGNfdGhpcyA9IHRleGNvb3Jkc1tpdnRdOyB0Y19wcmV2ID0gdGV4Y29vcmRzW2l2dCAtIDFdO1xuICAgICAgICAgICAgW2V4dF94LCBleHRfeV0gPSBjb21wdXRlX25vcm1hbF92ZWMocHRfcHJldiwgcHRfdGhpcyk7XG5cbiAgICAgICAgICAgIGFyeV9pdnQgPSBpbG5zWyd2ZXJ0cyddICsgKDEgKyAoaXZ0IC0gMSkgKiA0KSAqIG5fcG9pbnRzX3Blcl92ZXJ0Wyd2ZXJ0cyddO1xuXG4gICAgICAgICAgICByZXRbJ3ZlcnRzJ11bYXJ5X2l2dCArIDBdID0gcHRfcHJldlswXTsgcmV0Wyd2ZXJ0cyddW2FyeV9pdnQgKyAxXSA9IHB0X3ByZXZbMV07XG4gICAgICAgICAgICByZXRbJ3ZlcnRzJ11bYXJ5X2l2dCArIDJdID0gcHRfcHJldlswXTsgcmV0Wyd2ZXJ0cyddW2FyeV9pdnQgKyAzXSA9IHB0X3ByZXZbMV07XG5cbiAgICAgICAgICAgIHJldFsndmVydHMnXVthcnlfaXZ0ICsgNF0gPSBwdF90aGlzWzBdOyByZXRbJ3ZlcnRzJ11bYXJ5X2l2dCArIDVdID0gcHRfdGhpc1sxXTtcbiAgICAgICAgICAgIHJldFsndmVydHMnXVthcnlfaXZ0ICsgNl0gPSBwdF90aGlzWzBdOyByZXRbJ3ZlcnRzJ11bYXJ5X2l2dCArIDddID0gcHRfdGhpc1sxXTtcblxuICAgICAgICAgICAgcmV0Wyd0ZXhjb29yZHMnXVthcnlfaXZ0ICsgMF0gPSB0Y19wcmV2WzBdOyByZXRbJ3RleGNvb3JkcyddW2FyeV9pdnQgKyAxXSA9IHRjX3ByZXZbMV07XG4gICAgICAgICAgICByZXRbJ3RleGNvb3JkcyddW2FyeV9pdnQgKyAyXSA9IHRjX3ByZXZbMF07IHJldFsndGV4Y29vcmRzJ11bYXJ5X2l2dCArIDNdID0gdGNfcHJldlsxXTtcblxuICAgICAgICAgICAgcmV0Wyd0ZXhjb29yZHMnXVthcnlfaXZ0ICsgNF0gPSB0Y190aGlzWzBdOyByZXRbJ3RleGNvb3JkcyddW2FyeV9pdnQgKyA1XSA9IHRjX3RoaXNbMV07XG4gICAgICAgICAgICByZXRbJ3RleGNvb3JkcyddW2FyeV9pdnQgKyA2XSA9IHRjX3RoaXNbMF07IHJldFsndGV4Y29vcmRzJ11bYXJ5X2l2dCArIDddID0gdGNfdGhpc1sxXTtcblxuICAgICAgICAgICAgcmV0WydleHRydXNpb24nXVthcnlfaXZ0ICsgMCBdID0gIGV4dF94OyByZXRbJ2V4dHJ1c2lvbiddW2FyeV9pdnQgKyAxIF0gPSAgZXh0X3k7XG4gICAgICAgICAgICByZXRbJ2V4dHJ1c2lvbiddW2FyeV9pdnQgKyAyIF0gPSAtZXh0X3g7IHJldFsnZXh0cnVzaW9uJ11bYXJ5X2l2dCArIDMgXSA9IC1leHRfeTtcblxuICAgICAgICAgICAgcmV0WydleHRydXNpb24nXVthcnlfaXZ0ICsgNCBdID0gIGV4dF94OyByZXRbJ2V4dHJ1c2lvbiddW2FyeV9pdnQgKyA1IF0gPSAgZXh0X3k7XG4gICAgICAgICAgICByZXRbJ2V4dHJ1c2lvbiddW2FyeV9pdnQgKyA2IF0gPSAtZXh0X3g7IHJldFsnZXh0cnVzaW9uJ11bYXJ5X2l2dCArIDcgXSA9IC1leHRfeTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldFsndmVydHMnXVthcnlfaXZ0ICsgOF0gPSBwdF90aGlzWzBdOyByZXRbJ3ZlcnRzJ11bYXJ5X2l2dCArIDldID0gcHRfdGhpc1sxXTtcbiAgICAgICAgcmV0Wyd0ZXhjb29yZHMnXVthcnlfaXZ0ICsgOF0gPSB0Y190aGlzWzBdOyByZXRbJ3RleGNvb3JkcyddW2FyeV9pdnQgKyA5XSA9IHRjX3RoaXNbMV07XG4gICAgICAgIHJldFsnZXh0cnVzaW9uJ11bYXJ5X2l2dCArIDhdID0gLWV4dF94OyByZXRbJ2V4dHJ1c2lvbiddW2FyeV9pdnQgKyA5XSA9IC1leHRfeTtcblxuICAgICAgICBmb3IgKGxldCBpdnQgPSAwOyBpdnQgPCAodmVydHMubGVuZ3RoIC0gMSkgKiA2ICogbl9wb2ludHNfcGVyX3ZlcnRbJ29yaWdpbiddOyBpdnQgKz0gbl9wb2ludHNfcGVyX3ZlcnRbJ29yaWdpbiddKSB7XG4gICAgICAgICAgICBsaW5lWydvcmlnaW4nXS5mb3JFYWNoKChjZCwgaWNkKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0WydvcmlnaW4nXVtpbG5zWydvcmlnaW4nXSArIGl2dCArIGljZF0gPSBjZDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZvciAobGV0IGl2dCA9IDA7IGl2dCA8ICh2ZXJ0cy5sZW5ndGggLSAxKSAqIDYgKiBuX3BvaW50c19wZXJfdmVydFsnem9vbSddOyBpdnQgKz0gbl9wb2ludHNfcGVyX3ZlcnRbJ3pvb20nXSkge1xuICAgICAgICAgICAgcmV0Wyd6b29tJ11baWxuc1snem9vbSddICsgaXZ0XSA9IGxpbmVbJ3pvb20nXTtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5rZXlzKGlsbnMpLmZvckVhY2goayA9PiB7XG4gICAgICAgICAgICBpbG5zW2tdICs9ICh2ZXJ0cy5sZW5ndGggLSAxKSAqIDYgKiBuX3BvaW50c19wZXJfdmVydFtrXTtcbiAgICAgICAgfSlcbiAgICB9KVxuXG4gICAgcmV0dXJuIHJldDtcbn1cblxuY29uc3QgZXBfaW50ZXJmYWNlID0ge1xuICAgICdtYWtlQmFyYkVsZW1lbnRzJzogbWFrZUJhcmJFbGVtZW50cywgXG4gICAgJ21ha2VEb21haW5WZXJ0aWNlc0FuZFRleENvb3Jkcyc6IG1ha2VEb21haW5WZXJ0aWNlc0FuZFRleENvb3JkcyxcbiAgICAnbWFrZVBvbHlMaW5lcyc6IG1ha2VQb2x5bGluZXNcbn1cblxudHlwZSBQbG90TGF5ZXJXb3JrZXIgPSB0eXBlb2YgZXBfaW50ZXJmYWNlO1xuXG5Db21saW5rLmV4cG9zZShlcF9pbnRlcmZhY2UpO1xuXG5leHBvcnQgdHlwZSB7UGxvdExheWVyV29ya2VyfSIsIlxuY29uc3QgaGV4MnJnYmEgPSAoaGV4c3RyOiBzdHJpbmcsIG91dF90eXBlPzogc3RyaW5nKSA6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdID0+IHtcbiAgICBvdXRfdHlwZSA9IG91dF90eXBlID09PSB1bmRlZmluZWQgPyAnZmxvYXQnIDogb3V0X3R5cGU7XG5cbiAgICBjb25zdCBtYXRjaCA9IGhleHN0ci5tYXRjaCgvIyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSk/L2kpO1xuICAgIGlmIChtYXRjaCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBgR290ICcke2hleHN0cn0nIGluIGhleDJyZ2JhLCB3aGljaCBkb2VzIG5vdCBsb29rIGxpa2UgYSBoZXggY29sb3JgO1xuICAgIH1cblxuICAgIGxldCByZ2JhID0gbWF0Y2guc2xpY2UoMSkuZmlsdGVyKGMgPT4gYyAhPT0gdW5kZWZpbmVkKS5tYXAoYyA9PiBwYXJzZUludChjLCAxNikpO1xuXG4gICAgaWYgKG91dF90eXBlID09ICdmbG9hdCcpIHtcbiAgICAgICAgcmdiYSA9IHJnYmEubWFwKGMgPT4gYyAvIDI1NSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJnYmFbM10gPT09IHVuZGVmaW5lZCA/IFtyZ2JhWzBdLCByZ2JhWzFdLCByZ2JhWzJdLCAxXSA6IFtyZ2JhWzBdLCByZ2JhWzFdLCByZ2JhWzJdLCByZ2JhWzNdXTtcbn1cblxuY29uc3QgcmdiYTJoZXggPSAocmdiYTogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sIGluX3R5cGU/OiBzdHJpbmcpIDogc3RyaW5nID0+IHtcbiAgICBpbl90eXBlID0gaW5fdHlwZSA9PT0gdW5kZWZpbmVkID8gJ2Zsb2F0JyA6IGluX3R5cGU7XG5cbiAgICBsZXQgcmdiYV8gPSByZ2JhIGFzIG51bWJlcltdO1xuICAgIGlmIChpbl90eXBlID09ICdmbG9hdCcpIHtcbiAgICAgICAgcmdiYV8gPSByZ2JhXy5tYXAoYyA9PiBNYXRoLnJvdW5kKGMgKiAyNTUpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJyMnICsgcmdiYV8ubWFwKGMgPT4gYy50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKS50b1VwcGVyQ2FzZSgpKS5qb2luKCcnKTtcbn1cblxuY29uc3QgaGV4MnJnYiA9IChoZXhzdHI6IHN0cmluZywgb3V0X3R5cGU/OiBzdHJpbmcpIDogW251bWJlciwgbnVtYmVyLCBudW1iZXJdID0+IHtcbiAgICBjb25zdFtyLCBnLCBiLCBhXSA9IGhleDJyZ2JhKGhleHN0ciwgb3V0X3R5cGUpO1xuICAgIHJldHVybiBbciwgZywgYl07XG59XG5cbmNvbnN0IHJnYjJoZXggPSAocmdiOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sIGluX3R5cGU/OiBzdHJpbmcpIDogc3RyaW5nID0+IHtcbiAgICBjb25zdCBbciwgZywgYl0gPSByZ2I7XG4gICAgcmV0dXJuIHJnYmEyaGV4KFtyLCBnLCBiLCAwXSwgaW5fdHlwZSkuc2xpY2UoMCwgLTIpO1xufVxuXG5jb25zdCByZ2IyaHN2ID0gKHJnYjogW251bWJlciwgbnVtYmVyLCBudW1iZXJdKSA6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSA9PiB7XG4gICAgY29uc3QgW3IsIGcsIGJdID0gcmdiO1xuXG4gICAgY29uc3QgQ21heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICAgIGNvbnN0IENtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICBjb25zdCBEZWx0YSA9IENtYXggLSBDbWluO1xuICAgIFxuICAgIGxldCBIOiBudW1iZXI7XG4gICAgaWYgKERlbHRhID09IDApIHtcbiAgICAgICAgSCA9IDA7XG4gICAgfVxuICAgIGVsc2UgaWYgKENtYXggPT0gcikge1xuICAgICAgICBIID0gNjAgKiAoKGcgLSBiKSAvIERlbHRhKSAlIDY7XG4gICAgfVxuICAgIGVsc2UgaWYgKENtYXggPT0gZykge1xuICAgICAgICBIID0gNjAgKiAoKGIgLSByKSAvIERlbHRhICsgMik7XG4gICAgfVxuICAgIGVsc2UgaWYgKENtYXggPT0gYikge1xuICAgICAgICBIID0gNjAgKiAoKHIgLSBnKSAvIERlbHRhICsgNCk7XG4gICAgfVxuXG4gICAgbGV0IFMgPSBDbWF4ID09IDAgPyAwIDogRGVsdGEgLyBDbWF4O1xuICAgIGxldCBWID0gQ21heDtcblxuICAgIHJldHVybiBbSCwgUywgVl07XG59XG5cbmNvbnN0IGhzdjJyZ2IgPSAoaHN2OiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0pIDogW251bWJlciwgbnVtYmVyLCBudW1iZXJdID0+IHtcbiAgICBjb25zdCBbSCwgUywgVl0gPSBoc3Y7XG5cbiAgICBjb25zdCBDID0gViAqIFM7XG4gICAgY29uc3QgWCA9IEMgKiAoMSAtIE1hdGguYWJzKEggLyA2MCAlIDIgLSAxKSk7XG4gICAgY29uc3QgbSA9IFYgLSBDO1xuXG4gICAgbGV0IHJfcHJpbWUsIGdfcHJpbWUsIGJfcHJpbWU7XG4gICAgaWYgKDAgPD0gSCAmJiBIIDwgNjApIHtcbiAgICAgICAgcl9wcmltZSA9IEM7IGdfcHJpbWUgPSBYLCBiX3ByaW1lID0gMDtcbiAgICB9XG4gICAgZWxzZSBpZiAoNjAgPD0gSCAmJiBIIDwgMTIwKSB7XG4gICAgICAgIHJfcHJpbWUgPSBYOyBnX3ByaW1lID0gQywgYl9wcmltZSA9IDA7XG4gICAgfVxuICAgIGVsc2UgaWYgKDEyMCA8PSBIICYmIEggPCAxODApIHtcbiAgICAgICAgcl9wcmltZSA9IDA7IGdfcHJpbWUgPSBDLCBiX3ByaW1lID0gWDtcbiAgICB9XG4gICAgZWxzZSBpZiAoMTgwIDw9IEggJiYgSCA8IDI0MCkge1xuICAgICAgICByX3ByaW1lID0gMDsgZ19wcmltZSA9IFgsIGJfcHJpbWUgPSBDO1xuICAgIH1cbiAgICBlbHNlIGlmICgyNDAgPD0gSCAmJiBIIDwgMzAwKSB7XG4gICAgICAgIHJfcHJpbWUgPSBYOyBnX3ByaW1lID0gMCwgYl9wcmltZSA9IEM7XG4gICAgfVxuICAgIGVsc2UgaWYgKDMwMCA8PSBIICYmIEggPCAzNjApIHtcbiAgICAgICAgcl9wcmltZSA9IEM7IGdfcHJpbWUgPSAwLCBiX3ByaW1lID0gWDtcbiAgICB9XG5cbiAgICByZXR1cm4gW3JfcHJpbWUgKyBtLCBnX3ByaW1lICsgbSwgYl9wcmltZSArIG1dO1xufVxuXG5mdW5jdGlvbiBnZXRNaW5ab29tKGpsYXQ6IG51bWJlciwgaWxvbjogbnVtYmVyLCB0aGluX2ZhY19iYXNlOiBudW1iZXIpIHtcbiAgICBjb25zdCB6b29tX2Jhc2UgPSAxO1xuXG4gICAgbGV0IHpvb20gPSB6b29tX2Jhc2U7XG4gICAgbGV0IHRoaW5fZmFjID0gdGhpbl9mYWNfYmFzZTtcblxuICAgIHdoaWxlICgoKGpsYXQgJSB0aGluX2ZhYykgIT0gMCkgfHwgKChpbG9uICUgdGhpbl9mYWMpICE9IDApKSB7XG4gICAgICAgIHpvb20gKz0gMTtcbiAgICAgICAgdGhpbl9mYWMgLz0gMjtcbiAgICB9XG5cbiAgICByZXR1cm4gem9vbTtcbn1cblxuZnVuY3Rpb24qIHppcCguLi5hcmdzOiBhbnlbXSkge1xuXHRjb25zdCBpdGVyYXRvcnMgPSBhcmdzLm1hcCh4ID0+IHhbU3ltYm9sLml0ZXJhdG9yXSgpKTtcblx0d2hpbGUgKHRydWUpIHtcblx0XHRjb25zdCBjdXJyZW50ID0gaXRlcmF0b3JzLm1hcCh4ID0+IHgubmV4dCgpKTtcblx0XHRpZiAoY3VycmVudC5zb21lKHggPT4geC5kb25lKSkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdHlpZWxkIGN1cnJlbnQubWFwKHggPT4geC52YWx1ZSk7XG5cdH1cbn1cblxuZXhwb3J0IHtoZXgycmdiYSwgcmdiYTJoZXgsIGhleDJyZ2IsIHJnYjJoZXgsIHJnYjJoc3YsIGhzdjJyZ2IsIHppcCwgZ2V0TWluWm9vbX07Il0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInRoaXMiLCJwcm94eU1hcmtlciIsIlN5bWJvbCIsImNyZWF0ZUVuZHBvaW50IiwicmVsZWFzZVByb3h5IiwidGhyb3dNYXJrZXIiLCJpc09iamVjdCIsInZhbCIsInRyYW5zZmVySGFuZGxlcnMiLCJNYXAiLCJjYW5IYW5kbGUiLCJzZXJpYWxpemUiLCJvYmoiLCJwb3J0MSIsInBvcnQyIiwiTWVzc2FnZUNoYW5uZWwiLCJleHBvc2UiLCJkZXNlcmlhbGl6ZSIsInBvcnQiLCJzdGFydCIsImNyZWF0ZVByb3h5IiwidGFyZ2V0IiwidmFsdWUiLCJzZXJpYWxpemVkIiwiRXJyb3IiLCJpc0Vycm9yIiwibWVzc2FnZSIsIm5hbWUiLCJzdGFjayIsIk9iamVjdCIsImFzc2lnbiIsImVwIiwic2VsZiIsImFkZEV2ZW50TGlzdGVuZXIiLCJjYWxsYmFjayIsImV2IiwiZGF0YSIsImlkIiwidHlwZSIsInBhdGgiLCJhcmd1bWVudExpc3QiLCJtYXAiLCJmcm9tV2lyZVZhbHVlIiwicmV0dXJuVmFsdWUiLCJwYXJlbnQiLCJzbGljZSIsInJlZHVjZSIsInByb3AiLCJyYXdWYWx1ZSIsImFwcGx5IiwicHJveHkiLCJ0cmFuc2ZlcnMiLCJ0cmFuc2ZlckNhY2hlIiwic2V0IiwidHJhbnNmZXIiLCJ1bmRlZmluZWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsImNhdGNoIiwidGhlbiIsIndpcmVWYWx1ZSIsInRyYW5zZmVyYWJsZXMiLCJ0b1dpcmVWYWx1ZSIsInBvc3RNZXNzYWdlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNsb3NlRW5kUG9pbnQiLCJlbmRwb2ludCIsImNvbnN0cnVjdG9yIiwiaXNNZXNzYWdlUG9ydCIsImNsb3NlIiwidGhyb3dJZlByb3h5UmVsZWFzZWQiLCJpc1JlbGVhc2VkIiwiaXNQcm94eVJlbGVhc2VkIiwiUHJveHkiLCJnZXQiLCJfdGFyZ2V0IiwicmVxdWVzdFJlc3BvbnNlTWVzc2FnZSIsInAiLCJ0b1N0cmluZyIsImxlbmd0aCIsInIiLCJiaW5kIiwiX3RoaXNBcmciLCJyYXdBcmd1bWVudExpc3QiLCJsYXN0IiwicHJvY2Vzc0FyZ3VtZW50cyIsImNvbnN0cnVjdCIsInByb2Nlc3NlZCIsInYiLCJhcnIiLCJBcnJheSIsInByb3RvdHlwZSIsImNvbmNhdCIsIldlYWtNYXAiLCJoYW5kbGVyIiwic2VyaWFsaXplZFZhbHVlIiwibXNnIiwiZmlsbCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIk51bWJlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJqb2luIiwibCIsImxuZyIsImxhdCIsImlzTmFOIiwidG9NZXJjYXRvckNvb3JkIiwieCIsInkiLCJQSSIsImxvZyIsInRhbiIsImZpZWxkX2xhdHMiLCJmaWVsZF9sb25zIiwiZmllbGRfdSIsImZpZWxkX3YiLCJ0aGluX2ZhY19iYXNlIiwiQkFSQl9ESU1TIiwiQkFSQl9XSURUSCIsIkJBUkJfVEVYX1dJRFRIIiwiQkFSQl9IRUlHSFQiLCJCQVJCX1RFWF9IRUlHSFQiLCJCQVJCX1RFWF9XUkFQIiwibl9sYXRzIiwibl9sb25zIiwibl9lbGVtc190YyIsInB0cyIsIkZsb2F0MzJBcnJheSIsIm9mZnNldCIsInRleF9jb29yZHMiLCJpc3RhcnRfcHRzIiwiaXN0YXJ0X3RjIiwiYmFyYl93aWR0aF9mcmFjIiwiYmFyYl9oZWlnaHRfZnJhYyIsImZvckVhY2giLCJpbGF0IiwiZmxpcF9iYXJiIiwibG9uIiwiaWxvbiIsInpvb20iLCJqbGF0IiwidGhpbl9mYWMiLCJnZXRNaW5ab29tIiwidSIsImJhcmJfbWFnIiwicm91bmQiLCJoeXBvdCIsImJhcmJfYW5nIiwiYXRhbjIiLCJwdF9sbCIsIkxuZ0xhdCIsImljcm5yIiwiYWN0dWFsX2ljcm5yIiwibWF4IiwibWluIiwiaV9iYXJiIiwial9iYXJiIiwidGV4X3dpZHRoIiwidGV4X2hlaWdodCIsIm5pIiwidWJpIiwidmVydHMiLCJmbGF0IiwicHQiLCJjZCIsInRjIiwibGluZXMiLCJuX3BvaW50c19wZXJfdmVydCIsImZyb21FbnRyaWVzIiwiZW50cmllcyIsImsiLCJuX291dF92ZXJ0cyIsImEiLCJiIiwiYXJ5X2xlbnMiLCJucHB2IiwicmV0IiwiaWxucyIsImtleXMiLCJjb21wdXRlX25vcm1hbF92ZWMiLCJwdDEiLCJwdDIiLCJsaW5lX3ZlY194IiwibGluZV92ZWNfeSIsImxpbmVfdmVjX21hZyIsImxpbmUiLCJwdF9wcmV2IiwidGNfcHJldiIsInRleGNvb3JkcyIsImFyeV9pdnQiLCJwdF90aGlzIiwicHRfbmV4dCIsInRjX3RoaXMiLCJleHRfeCIsImV4dF95IiwiaXZ0IiwiaWNkIl0sInNvdXJjZVJvb3QiOiIifQ==